{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nvar JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];\n/**\n * The response object returned for every API call.\n *\n * @param {Object} http_response the response object returned from the Node/HTTP\n *  request\n * @param {Request} request the request object used to make this API call\n *\n * @property {number} statusCode the HTTP status code for the response, if any\n * @property {string} body the raw body received from the API\n * @property {Object} result the parsed JSON received from the API\n * @property {Object} data the data attribute taken from the result\n * @property {boolean} parsed wether the raw body has been parsed into JSON\n * @property {Request} request the request object used to make this API call\n *\n */\n\nvar Response = /*#__PURE__*/function () {\n  function Response(http_response, request) {\n    _classCallCheck(this, Response);\n\n    this.headers = http_response.headers || {};\n    this.statusCode = http_response.statusCode;\n    this.request = request;\n    this.body = '';\n    this.result = null;\n    this.data = null;\n    this.parsed = false;\n  } // PROTECTED\n\n  /**\n   * Add a chunk received from the API to the body\n   *\n   * @param  {string} chunk a chunk of data\n   * @protected\n   */\n\n\n  _createClass(Response, [{\n    key: \"addChunk\",\n    value: function addChunk(chunk) {\n      this.body += chunk;\n    }\n    /**\n     * Tries to parse parse the raw data\n     * @protected\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      try {\n        if (this.statusCode === 204) {\n          return;\n        }\n\n        if (this.isJson()) {\n          this.result = JSON.parse(this.body);\n          this.data = this.result.data;\n          this.parsed = true;\n        } else {\n          this.parsed = false;\n        }\n      } catch (SyntaxError) {\n        this.parsed = false;\n      }\n    }\n    /**\n     * Wether this API call can be considered a success. Used to wrap the response\n     * into a ResponseError\n     *\n     * @return {boolean}\n     * @protected\n     */\n\n  }, {\n    key: \"success\",\n    value: function success() {\n      if (this.statusCode == 204) {\n        return true;\n      }\n\n      if (this.parsed && this.statusCode < 300) {\n        return true;\n      }\n    } // PRIVATE\n\n    /**\n     * Tests if the content is seemingly JSON\n     *\n     * @return {boolean}\n     * @private\n     */\n\n  }, {\n    key: \"isJson\",\n    value: function isJson() {\n      return JSON_CONTENT_TYPES.indexOf(this.headers['content-type']) !== -1;\n    }\n  }]);\n\n  return Response;\n}();\n\nvar _default = Response;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,kBAAkB,GAAG,CAAC,kBAAD,EAAqB,8BAArB,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAdA,IAeMC,QAAQ;AACZ,oBAAYC,aAAZ,EAA2BC,OAA3B,EAAoC;AAAAC;;AAClC,SAAKC,OAAL,GAAeH,aAAa,CAACG,OAAdH,IAAyB,EAAxC;AACA,SAAKI,UAAL,GAAmBJ,aAAa,CAACI,UAAjC;AACA,SAAKH,OAAL,GAAmBA,OAAnB;AACA,SAAKI,IAAL,GAAmB,EAAnB;AACA,SAAKC,MAAL,GAAmB,IAAnB;AACA,SAAKC,IAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAmB,KAAnB;AACF,GATY,CAWZ;;AAEA;AACF;AACA;AACA;AACA;AACA;;;AALEC;AAAAC;AAAAC,WAMA,kBAASC,KAAT,EAAgB;AACd,WAAKP,IAAL,IAAaO,KAAb;AACF;AAGA;AACF;AACA;AACA;;AAdE,KAWA;AAAAF;AAAAC,WAIA,iBAAQ;AACN,UAAI;AACF,YAAI,KAAKP,UAAL,KAAoB,GAAxB,EAA6B;AAC3B;AACF;;AACA,YAAI,KAAKS,MAAL,EAAJ,EAAmB;AACjB,eAAKP,MAAL,GAAcQ,IAAI,CAACC,KAALD,CAAW,KAAKT,IAAhBS,CAAd;AACA,eAAKP,IAAL,GAAY,KAAKD,MAAL,CAAYC,IAAxB;AACA,eAAKC,MAAL,GAAc,IAAd;AACD,SAJD,MAIO;AACL,eAAKA,MAAL,GAAc,KAAd;AACF;AACD,OAXD,CAWE,OAAOQ,WAAP,EAAoB;AACpB,aAAKR,MAAL,GAAc,KAAd;AACF;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AA3BE,GAXA,EAgCA;AAAAE;AAAAC,WAOA,mBAAU;AACR,UAAI,KAAKP,UAAL,IAAmB,GAAvB,EAA4B;AAC1B,eAAO,IAAP;AACF;;AACA,UAAI,KAAKI,MAAL,IAAe,KAAKJ,UAAL,GAAkB,GAArC,EAA0C;AACxC,eAAO,IAAP;AACF;AACF,KAdA,CAgBA;;AAGA;AACF;AACA;AACA;AACA;AACA;;AAxBE,GAhCA,EAmDA;AAAAM;AAAAC,WAMA,kBAAS;AACP,aAAQb,kBAAkB,CAACmB,OAAnBnB,CAA2B,KAAKK,OAAL,CAAa,cAAb,CAA3BL,MAA6D,CAAC,CAAtE;AACF;AARA,GAnDA;;AA2DC;AAAA,CAxEW,EAfd;;AAuFG,eAGYC,QAHZ;AAGoBmB;AAAAC","names":["JSON_CONTENT_TYPES","Response","http_response","request","_classCallCheck","headers","statusCode","body","result","data","parsed","_createClass","key","value","chunk","isJson","JSON","parse","SyntaxError","indexOf","exports","module"],"sources":["/home/dom/Videos/FlyM/node_modules/amadeus/src/amadeus/client/response.js"],"sourcesContent":["let JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];\n\n/**\n * The response object returned for every API call.\n *\n * @param {Object} http_response the response object returned from the Node/HTTP\n *  request\n * @param {Request} request the request object used to make this API call\n *\n * @property {number} statusCode the HTTP status code for the response, if any\n * @property {string} body the raw body received from the API\n * @property {Object} result the parsed JSON received from the API\n * @property {Object} data the data attribute taken from the result\n * @property {boolean} parsed wether the raw body has been parsed into JSON\n * @property {Request} request the request object used to make this API call\n *\n */\nclass Response {\n  constructor(http_response, request) {\n    this.headers = http_response.headers || {};\n    this.statusCode  = http_response.statusCode;\n    this.request     = request;\n    this.body        = '';\n    this.result      = null;\n    this.data        = null;\n    this.parsed      = false;\n  }\n\n  // PROTECTED\n\n  /**\n   * Add a chunk received from the API to the body\n   *\n   * @param  {string} chunk a chunk of data\n   * @protected\n   */\n  addChunk(chunk) {\n    this.body += chunk;\n  }\n\n\n  /**\n   * Tries to parse parse the raw data\n   * @protected\n   */\n  parse() {\n    try {\n      if (this.statusCode === 204) {\n        return;\n      }\n      if (this.isJson()) {\n        this.result = JSON.parse(this.body);\n        this.data = this.result.data;\n        this.parsed = true;\n      } else {\n        this.parsed = false;\n      }\n    } catch (SyntaxError) {\n      this.parsed = false;\n    }\n  }\n\n  /**\n   * Wether this API call can be considered a success. Used to wrap the response\n   * into a ResponseError\n   *\n   * @return {boolean}\n   * @protected\n   */\n  success() {\n    if (this.statusCode == 204) {\n      return true;\n    }\n    if (this.parsed && this.statusCode < 300) {\n      return true;\n    }\n  }\n\n  // PRIVATE\n\n\n  /**\n   * Tests if the content is seemingly JSON\n   *\n   * @return {boolean}\n   * @private\n   */\n  isJson() {\n    return (JSON_CONTENT_TYPES.indexOf(this.headers['content-type']) !== -1);\n  }\n}\n\nexport default Response;\n"]},"metadata":{},"sourceType":"script"}