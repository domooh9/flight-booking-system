{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SocksProxyAgent = void 0;\n\nconst socks_1 = require(\"socks\");\n\nconst agent_base_1 = require(\"agent-base\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst dns_1 = __importDefault(require(\"dns\"));\n\nconst tls_1 = __importDefault(require(\"tls\"));\n\nconst debug = (0, debug_1.default)('socks-proxy-agent');\n\nfunction parseSocksProxy(opts) {\n  var _a;\n\n  let port = 0;\n  let lookup = false;\n  let type = 5;\n  const host = opts.hostname || opts.host;\n\n  if (host == null) {\n    throw new TypeError('No \"hostname\"');\n  }\n\n  if (typeof opts.port === 'number') {\n    port = opts.port;\n  } else if (typeof opts.port === 'string') {\n    port = parseInt(opts.port, 10);\n  } // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n  // \"The SOCKS service is conventionally located on TCP port 1080\"\n\n\n  if (port == null) {\n    port = 1080;\n  } // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n  // Defaults to 5.\n\n\n  if (opts.protocol != null) {\n    switch (opts.protocol.replace(':', '')) {\n      case 'socks4':\n        lookup = true;\n      // pass through\n\n      case 'socks4a':\n        type = 4;\n        break;\n\n      case 'socks5':\n        lookup = true;\n      // pass through\n\n      case 'socks': // no version specified, default to 5h\n\n      case 'socks5h':\n        type = 5;\n        break;\n\n      default:\n        throw new TypeError(`A \"socks\" protocol must be specified! Got: ${String(opts.protocol)}`);\n    }\n  }\n\n  if (typeof opts.type !== 'undefined') {\n    if (opts.type === 4 || opts.type === 5) {\n      type = opts.type;\n    } else {\n      throw new TypeError(`\"type\" must be 4 or 5, got: ${String(opts.type)}`);\n    }\n  }\n\n  const proxy = {\n    host,\n    port,\n    type\n  };\n  let userId = (_a = opts.userId) !== null && _a !== void 0 ? _a : opts.username;\n  let password = opts.password;\n\n  if (opts.auth != null) {\n    const auth = opts.auth.split(':');\n    userId = auth[0];\n    password = auth[1];\n  }\n\n  if (userId != null) {\n    Object.defineProperty(proxy, 'userId', {\n      value: userId,\n      enumerable: false\n    });\n  }\n\n  if (password != null) {\n    Object.defineProperty(proxy, 'password', {\n      value: password,\n      enumerable: false\n    });\n  }\n\n  return {\n    lookup,\n    proxy\n  };\n}\n\nconst normalizeProxyOptions = input => {\n  let proxyOptions;\n\n  if (typeof input === 'string') {\n    proxyOptions = new URL(input);\n  } else {\n    proxyOptions = input;\n  }\n\n  if (proxyOptions == null) {\n    throw new TypeError('a SOCKS proxy server `hostname` and `port` must be specified!');\n  }\n\n  return proxyOptions;\n};\n\nclass SocksProxyAgent extends agent_base_1.Agent {\n  constructor(input, options) {\n    var _a;\n\n    const proxyOptions = normalizeProxyOptions(input);\n    super(proxyOptions);\n    const parsedProxy = parseSocksProxy(proxyOptions);\n    this.shouldLookup = parsedProxy.lookup;\n    this.proxy = parsedProxy.proxy;\n    this.tlsConnectionOptions = proxyOptions.tls != null ? proxyOptions.tls : {};\n    this.timeout = (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * Initiates a SOCKS connection to the specified SOCKS proxy server,\n   * which in turn connects to the specified remote host and port.\n   *\n   * @api protected\n   */\n\n\n  callback(req, opts) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        shouldLookup,\n        proxy,\n        timeout\n      } = this;\n      let {\n        host,\n        port,\n        lookup: lookupCallback\n      } = opts;\n\n      if (host == null) {\n        throw new Error('No `host` defined!');\n      }\n\n      if (shouldLookup) {\n        // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n        host = yield new Promise((resolve, reject) => {\n          // Use the request's custom lookup, if one was configured:\n          const lookupFn = lookupCallback !== null && lookupCallback !== void 0 ? lookupCallback : dns_1.default.lookup;\n          lookupFn(host, {}, (err, res) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(res);\n            }\n          });\n        });\n      }\n\n      const socksOpts = {\n        proxy,\n        destination: {\n          host,\n          port\n        },\n        command: 'connect',\n        timeout: timeout !== null && timeout !== void 0 ? timeout : undefined\n      };\n\n      const cleanup = tlsSocket => {\n        req.destroy();\n        socket.destroy();\n        if (tlsSocket) tlsSocket.destroy();\n      };\n\n      debug('Creating socks proxy connection: %o', socksOpts);\n      const {\n        socket\n      } = yield socks_1.SocksClient.createConnection(socksOpts);\n      debug('Successfully created socks proxy connection');\n\n      if (timeout !== null) {\n        socket.setTimeout(timeout);\n        socket.on('timeout', () => cleanup());\n      }\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = (_a = opts.servername) !== null && _a !== void 0 ? _a : opts.host;\n        const tlsSocket = tls_1.default.connect(Object.assign(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n          socket,\n          servername\n        }), this.tlsConnectionOptions));\n        tlsSocket.once('error', error => {\n          debug('socket TLS error', error.message);\n          cleanup(tlsSocket);\n        });\n        return tlsSocket;\n      }\n\n      return socket;\n    });\n  }\n\n}\n\nexports.SocksProxyAgent = SocksProxyAgent;\n\nfunction omit(obj) {\n  const ret = {};\n  let key;\n\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n\n  return ret;\n}","map":{"version":3,"mappings":"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","names":["debug","parseSocksProxy","opts","port","lookup","type","host","hostname","TypeError","parseInt","protocol","replace","String","proxy","userId","_a","username","password","auth","split","Object","defineProperty","value","enumerable","normalizeProxyOptions","input","proxyOptions","URL","SocksProxyAgent","agent_base_1","constructor","options","parsedProxy","shouldLookup","tlsConnectionOptions","tls","timeout","callback","req","lookupCallback","Error","Promise","resolve","reject","lookupFn","dns_1","err","res","socksOpts","destination","command","undefined","cleanup","tlsSocket","destroy","socket","socks_1","createConnection","setTimeout","on","secureEndpoint","servername","tls_1","connect","omit","once","error","message","exports","obj","ret","key","keys","includes"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}