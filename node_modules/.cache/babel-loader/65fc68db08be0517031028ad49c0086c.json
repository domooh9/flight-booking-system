{"ast":null,"code":"const path = require('path');\n\nconst sqlite3 = require('./sqlite3-binding.js');\n\nconst EventEmitter = require('events').EventEmitter;\n\nmodule.exports = exports = sqlite3;\n\nfunction normalizeMethod(fn) {\n  return function (sql) {\n    let errBack;\n    const args = Array.prototype.slice.call(arguments, 1);\n\n    if (typeof args[args.length - 1] === 'function') {\n      const callback = args[args.length - 1];\n\n      errBack = function (err) {\n        if (err) {\n          callback(err);\n        }\n      };\n    }\n\n    const statement = new Statement(this, sql, errBack);\n    return fn.call(this, statement, args);\n  };\n}\n\nfunction inherits(target, source) {\n  for (const k in source.prototype) target.prototype[k] = source.prototype[k];\n}\n\nsqlite3.cached = {\n  Database: function (file, a, b) {\n    if (file === '' || file === ':memory:') {\n      // Don't cache special databases.\n      return new Database(file, a, b);\n    }\n\n    let db;\n    file = path.resolve(file);\n\n    if (!sqlite3.cached.objects[file]) {\n      db = sqlite3.cached.objects[file] = new Database(file, a, b);\n    } else {\n      // Make sure the callback is called.\n      db = sqlite3.cached.objects[file];\n      const callback = typeof a === 'number' ? b : a;\n\n      if (typeof callback === 'function') {\n        function cb() {\n          callback.call(db, null);\n        }\n\n        if (db.open) process.nextTick(cb);else db.once('open', cb);\n      }\n    }\n\n    return db;\n  },\n  objects: {}\n};\nconst Database = sqlite3.Database;\nconst Statement = sqlite3.Statement;\nconst Backup = sqlite3.Backup;\ninherits(Database, EventEmitter);\ninherits(Statement, EventEmitter);\ninherits(Backup, EventEmitter); // Database#prepare(sql, [bind1, bind2, ...], [callback])\n\nDatabase.prototype.prepare = normalizeMethod(function (statement, params) {\n  return params.length ? statement.bind.apply(statement, params) : statement;\n}); // Database#run(sql, [bind1, bind2, ...], [callback])\n\nDatabase.prototype.run = normalizeMethod(function (statement, params) {\n  statement.run.apply(statement, params).finalize();\n  return this;\n}); // Database#get(sql, [bind1, bind2, ...], [callback])\n\nDatabase.prototype.get = normalizeMethod(function (statement, params) {\n  statement.get.apply(statement, params).finalize();\n  return this;\n}); // Database#all(sql, [bind1, bind2, ...], [callback])\n\nDatabase.prototype.all = normalizeMethod(function (statement, params) {\n  statement.all.apply(statement, params).finalize();\n  return this;\n}); // Database#each(sql, [bind1, bind2, ...], [callback], [complete])\n\nDatabase.prototype.each = normalizeMethod(function (statement, params) {\n  statement.each.apply(statement, params).finalize();\n  return this;\n});\nDatabase.prototype.map = normalizeMethod(function (statement, params) {\n  statement.map.apply(statement, params).finalize();\n  return this;\n}); // Database#backup(filename, [callback])\n// Database#backup(filename, destName, sourceName, filenameIsDest, [callback])\n\nDatabase.prototype.backup = function () {\n  let backup;\n\n  if (arguments.length <= 2) {\n    // By default, we write the main database out to the main database of the named file.\n    // This is the most likely use of the backup api.\n    backup = new Backup(this, arguments[0], 'main', 'main', true, arguments[1]);\n  } else {\n    // Otherwise, give the user full control over the sqlite3_backup_init arguments.\n    backup = new Backup(this, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);\n  } // Per the sqlite docs, exclude the following errors as non-fatal by default.\n\n\n  backup.retryErrors = [sqlite3.BUSY, sqlite3.LOCKED];\n  return backup;\n};\n\nStatement.prototype.map = function () {\n  const params = Array.prototype.slice.call(arguments);\n  const callback = params.pop();\n  params.push(function (err, rows) {\n    if (err) return callback(err);\n    const result = {};\n\n    if (rows.length) {\n      const keys = Object.keys(rows[0]);\n      const key = keys[0];\n\n      if (keys.length > 2) {\n        // Value is an object\n        for (let i = 0; i < rows.length; i++) {\n          result[rows[i][key]] = rows[i];\n        }\n      } else {\n        const value = keys[1]; // Value is a plain value\n\n        for (let i = 0; i < rows.length; i++) {\n          result[rows[i][key]] = rows[i][value];\n        }\n      }\n    }\n\n    callback(err, result);\n  });\n  return this.all.apply(this, params);\n};\n\nlet isVerbose = false;\nconst supportedEvents = ['trace', 'profile', 'change'];\n\nDatabase.prototype.addListener = Database.prototype.on = function (type) {\n  const val = EventEmitter.prototype.addListener.apply(this, arguments);\n\n  if (supportedEvents.indexOf(type) >= 0) {\n    this.configure(type, true);\n  }\n\n  return val;\n};\n\nDatabase.prototype.removeListener = function (type) {\n  const val = EventEmitter.prototype.removeListener.apply(this, arguments);\n\n  if (supportedEvents.indexOf(type) >= 0 && !this._events[type]) {\n    this.configure(type, false);\n  }\n\n  return val;\n};\n\nDatabase.prototype.removeAllListeners = function (type) {\n  const val = EventEmitter.prototype.removeAllListeners.apply(this, arguments);\n\n  if (supportedEvents.indexOf(type) >= 0) {\n    this.configure(type, false);\n  }\n\n  return val;\n}; // Save the stack trace over EIO callbacks.\n\n\nsqlite3.verbose = function () {\n  if (!isVerbose) {\n    const trace = require('./trace');\n\n    ['prepare', 'get', 'run', 'all', 'each', 'map', 'close', 'exec'].forEach(function (name) {\n      trace.extendTrace(Database.prototype, name);\n    });\n    ['bind', 'get', 'run', 'all', 'each', 'map', 'reset', 'finalize'].forEach(function (name) {\n      trace.extendTrace(Statement.prototype, name);\n    });\n    isVerbose = true;\n  }\n\n  return sqlite3;\n};","map":{"version":3,"sources":["/home/dom/Videos/FlyM/node_modules/sqlite3/lib/sqlite3.js"],"names":["path","require","sqlite3","EventEmitter","module","exports","normalizeMethod","fn","sql","errBack","args","Array","prototype","slice","call","arguments","length","callback","err","statement","Statement","inherits","target","source","k","cached","Database","file","a","b","db","resolve","objects","cb","open","process","nextTick","once","Backup","prepare","params","bind","apply","run","finalize","get","all","each","map","backup","retryErrors","BUSY","LOCKED","pop","push","rows","result","keys","Object","key","i","value","isVerbose","supportedEvents","addListener","on","type","val","indexOf","configure","removeListener","_events","removeAllListeners","verbose","trace","forEach","name","extendTrace"],"mappings":"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","sourcesContent":["const path = require('path');\nconst sqlite3 = require('./sqlite3-binding.js');\nconst EventEmitter = require('events').EventEmitter;\nmodule.exports = exports = sqlite3;\n\nfunction normalizeMethod (fn) {\n    return function (sql) {\n        let errBack;\n        const args = Array.prototype.slice.call(arguments, 1);\n\n        if (typeof args[args.length - 1] === 'function') {\n            const callback = args[args.length - 1];\n            errBack = function(err) {\n                if (err) {\n                    callback(err);\n                }\n            };\n        }\n        const statement = new Statement(this, sql, errBack);\n        return fn.call(this, statement, args);\n    };\n}\n\nfunction inherits(target, source) {\n    for (const k in source.prototype)\n        target.prototype[k] = source.prototype[k];\n}\n\nsqlite3.cached = {\n    Database: function(file, a, b) {\n        if (file === '' || file === ':memory:') {\n            // Don't cache special databases.\n            return new Database(file, a, b);\n        }\n\n        let db;\n        file = path.resolve(file);\n\n        if (!sqlite3.cached.objects[file]) {\n            db = sqlite3.cached.objects[file] = new Database(file, a, b);\n        }\n        else {\n            // Make sure the callback is called.\n            db = sqlite3.cached.objects[file];\n            const callback = (typeof a === 'number') ? b : a;\n            if (typeof callback === 'function') {\n                function cb() { callback.call(db, null); }\n                if (db.open) process.nextTick(cb);\n                else db.once('open', cb);\n            }\n        }\n\n        return db;\n    },\n    objects: {}\n};\n\n\nconst Database = sqlite3.Database;\nconst Statement = sqlite3.Statement;\nconst Backup = sqlite3.Backup;\n\ninherits(Database, EventEmitter);\ninherits(Statement, EventEmitter);\ninherits(Backup, EventEmitter);\n\n// Database#prepare(sql, [bind1, bind2, ...], [callback])\nDatabase.prototype.prepare = normalizeMethod(function(statement, params) {\n    return params.length\n        ? statement.bind.apply(statement, params)\n        : statement;\n});\n\n// Database#run(sql, [bind1, bind2, ...], [callback])\nDatabase.prototype.run = normalizeMethod(function(statement, params) {\n    statement.run.apply(statement, params).finalize();\n    return this;\n});\n\n// Database#get(sql, [bind1, bind2, ...], [callback])\nDatabase.prototype.get = normalizeMethod(function(statement, params) {\n    statement.get.apply(statement, params).finalize();\n    return this;\n});\n\n// Database#all(sql, [bind1, bind2, ...], [callback])\nDatabase.prototype.all = normalizeMethod(function(statement, params) {\n    statement.all.apply(statement, params).finalize();\n    return this;\n});\n\n// Database#each(sql, [bind1, bind2, ...], [callback], [complete])\nDatabase.prototype.each = normalizeMethod(function(statement, params) {\n    statement.each.apply(statement, params).finalize();\n    return this;\n});\n\nDatabase.prototype.map = normalizeMethod(function(statement, params) {\n    statement.map.apply(statement, params).finalize();\n    return this;\n});\n\n// Database#backup(filename, [callback])\n// Database#backup(filename, destName, sourceName, filenameIsDest, [callback])\nDatabase.prototype.backup = function() {\n    let backup;\n    if (arguments.length <= 2) {\n        // By default, we write the main database out to the main database of the named file.\n        // This is the most likely use of the backup api.\n        backup = new Backup(this, arguments[0], 'main', 'main', true, arguments[1]);\n    } else {\n        // Otherwise, give the user full control over the sqlite3_backup_init arguments.\n        backup = new Backup(this, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);\n    }\n    // Per the sqlite docs, exclude the following errors as non-fatal by default.\n    backup.retryErrors = [sqlite3.BUSY, sqlite3.LOCKED];\n    return backup;\n};\n\nStatement.prototype.map = function() {\n    const params = Array.prototype.slice.call(arguments);\n    const callback = params.pop();\n    params.push(function(err, rows) {\n        if (err) return callback(err);\n        const result = {};\n        if (rows.length) {\n            const keys = Object.keys(rows[0]);\n            const key = keys[0];\n            if (keys.length > 2) {\n                // Value is an object\n                for (let i = 0; i < rows.length; i++) {\n                    result[rows[i][key]] = rows[i];\n                }\n            } else {\n                const value = keys[1];\n                // Value is a plain value\n                for (let i = 0; i < rows.length; i++) {\n                    result[rows[i][key]] = rows[i][value];\n                }\n            }\n        }\n        callback(err, result);\n    });\n    return this.all.apply(this, params);\n};\n\nlet isVerbose = false;\n\nconst supportedEvents = [ 'trace', 'profile', 'change' ];\n\nDatabase.prototype.addListener = Database.prototype.on = function(type) {\n    const val = EventEmitter.prototype.addListener.apply(this, arguments);\n    if (supportedEvents.indexOf(type) >= 0) {\n        this.configure(type, true);\n    }\n    return val;\n};\n\nDatabase.prototype.removeListener = function(type) {\n    const val = EventEmitter.prototype.removeListener.apply(this, arguments);\n    if (supportedEvents.indexOf(type) >= 0 && !this._events[type]) {\n        this.configure(type, false);\n    }\n    return val;\n};\n\nDatabase.prototype.removeAllListeners = function(type) {\n    const val = EventEmitter.prototype.removeAllListeners.apply(this, arguments);\n    if (supportedEvents.indexOf(type) >= 0) {\n        this.configure(type, false);\n    }\n    return val;\n};\n\n// Save the stack trace over EIO callbacks.\nsqlite3.verbose = function() {\n    if (!isVerbose) {\n        const trace = require('./trace');\n        [\n            'prepare',\n            'get',\n            'run',\n            'all',\n            'each',\n            'map',\n            'close',\n            'exec'\n        ].forEach(function (name) {\n            trace.extendTrace(Database.prototype, name);\n        });\n        [\n            'bind',\n            'get',\n            'run',\n            'all',\n            'each',\n            'map',\n            'reset',\n            'finalize',\n        ].forEach(function (name) {\n            trace.extendTrace(Statement.prototype, name);\n        });\n        isVerbose = true;\n    }\n\n    return sqlite3;\n};\n"]},"metadata":{},"sourceType":"script"}