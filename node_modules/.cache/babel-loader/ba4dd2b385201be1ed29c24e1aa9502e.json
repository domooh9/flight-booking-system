{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n/**\n * A Request object containing all the compiled information about this request.\n *\n * @property {string} host the host used for this API call\n * @property {number} port the port for this API call. Standard set to 443.\n * @property {boolean} ssl wether this API call uses SSL\n * @property {string} scheme the scheme inferred from the SSL state\n * @property {string} verb the HTTP method, for example `GET` or `POST`\n * @property {string} path the full path of the API endpoint\n * @property {Object} params the parameters to pass in the query or body\n * @property {string} queryPath the path and query string used for the API call\n * @property {string} bearerToken the authentication token\n * @property {string} clientVersion the version of the Amadeus library\n * @property {string} languageVersion the version of Node used\n * @property {string} appId the custom ID of the application using this library\n * @property {string} appVersion the custom version of the application\n *  using this library\n * @property {Object} headers the request headers\n *\n * @param {Object} options\n */\n\n\nvar Request = /*#__PURE__*/function () {\n  function Request(options) {\n    _classCallCheck(this, Request);\n\n    this.host = options.host;\n    this.port = options.port;\n    this.ssl = options.ssl;\n    this.scheme = this.ssl ? 'https' : 'http';\n    this.verb = options.verb;\n    this.path = options.path;\n    this.params = options.params;\n    this.queryPath = this.fullQueryPath();\n    this.bearerToken = options.bearerToken;\n    this.clientVersion = options.clientVersion;\n    this.languageVersion = options.languageVersion.replace('v', '');\n    this.appId = options.appId;\n    this.appVersion = options.appVersion;\n    this.headers = {\n      'User-Agent': this.userAgent(),\n      'Accept': 'application/json, application/vnd.amadeus+json'\n    };\n    this.ListHTTPOverride = ['/v2/shopping/flight-offers', '/v1/shopping/seatmaps', '/v1/shopping/availability/flight-availabilities', '/v2/shopping/flight-offers/prediction', '/v1/shopping/flight-offers/pricing', '/v1/shopping/flight-offers/upselling'];\n    this.addAuthorizationHeader();\n    this.addContentTypeHeader();\n    this.addHTTPOverrideHeader();\n  } // PROTECTED\n\n  /**\n   * Compiles the options for the HTTP request.\n   *\n   * Used by Client.execute when executing this request against the server.\n   *\n   * @return {Object} an associative array of options to be passed into the\n   *  Client.execute function\n   * @protected\n   */\n\n\n  _createClass(Request, [{\n    key: \"options\",\n    value: function options() {\n      var options = {\n        'host': this.host,\n        'port': this.port,\n        'protocol': \"\".concat(this.scheme, \":\"),\n        'path': this.queryPath,\n        'method': this.verb,\n        'headers': this.headers\n      };\n      return options;\n    }\n    /**\n     * Creats the body for the API cal, serializing the params if the verb is POST.\n     *\n     * @return {string} the serialized params\n     * @protected\n     */\n\n  }, {\n    key: \"body\",\n    value: function body() {\n      if (this.verb !== 'POST') {\n        return '';\n      } else {\n        if (!this.bearerToken) {\n          return _qs[\"default\"].stringify(this.params);\n        }\n\n        return this.params;\n      }\n    } // PRIVATE\n\n    /**\n     * Build up the custom User Agent\n     *\n     * @return {string} a user agent in the format \"library/version language/version app/version\"\n     * @private\n     */\n\n  }, {\n    key: \"userAgent\",\n    value: function userAgent() {\n      var userAgent = \"amadeus-node/\".concat(this.clientVersion, \" node/\").concat(this.languageVersion);\n\n      if (!this.appId) {\n        return userAgent;\n      }\n\n      return \"\".concat(userAgent, \" \").concat(this.appId, \"/\").concat(this.appVersion);\n    }\n    /**\n     * Build the full query path, combining the path with the query params if the\n     * verb is 'GET'. For example: '/foo/bar?baz=qux'\n     *\n     * @return {string} the path and params combined into one string.\n     * @private\n     */\n\n  }, {\n    key: \"fullQueryPath\",\n    value: function fullQueryPath() {\n      if (this.verb === 'POST') {\n        return this.path;\n      } else {\n        return \"\".concat(this.path, \"?\").concat(_qs[\"default\"].stringify(this.params));\n      }\n    }\n    /**\n     * Adds an Authorization header if the BearerToken is present\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addAuthorizationHeader\",\n    value: function addAuthorizationHeader() {\n      if (!this.bearerToken) {\n        return;\n      }\n\n      this.headers['Authorization'] = \"Bearer \".concat(this.bearerToken);\n    }\n    /**\n     * Adds an Content-Type header if the HTTP method equals POST\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addContentTypeHeader\",\n    value: function addContentTypeHeader() {\n      if (this.verb === 'POST' && !this.bearerToken) {\n        this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      } else {\n        this.headers['Content-Type'] = 'application/vnd.amadeus+json';\n      }\n\n      return;\n    }\n    /**\n    * Adds HTTPOverride method if it is required\n    *\n    *  @private\n    */\n\n  }, {\n    key: \"addHTTPOverrideHeader\",\n    value: function addHTTPOverrideHeader() {\n      if (this.verb === 'POST' && this.ListHTTPOverride.includes(this.path)) {\n        this.headers['X-HTTP-Method-Override'] = 'GET';\n      }\n\n      return;\n    }\n  }]);\n\n  return Request;\n}();\n\nvar _default = Request;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAAoB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAAA;AAAAA;AAAA;AAAAC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAAA;AAAAC;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AApBA,IAqBMC,OAAO;AACX,mBAAYC,OAAZ,EAAqB;AAAAC;;AACnB,SAAKC,IAAL,GAAuBF,OAAO,CAACE,IAA/B;AACA,SAAKC,IAAL,GAAuBH,OAAO,CAACG,IAA/B;AACA,SAAKC,GAAL,GAAuBJ,OAAO,CAACI,GAA/B;AACA,SAAKC,MAAL,GAAuB,KAAKD,GAAL,GAAW,OAAX,GAAqB,MAA5C;AACA,SAAKE,IAAL,GAAuBN,OAAO,CAACM,IAA/B;AACA,SAAKC,IAAL,GAAuBP,OAAO,CAACO,IAA/B;AACA,SAAKC,MAAL,GAAuBR,OAAO,CAACQ,MAA/B;AACA,SAAKC,SAAL,GAAuB,KAAKC,aAAL,EAAvB;AACA,SAAKC,WAAL,GAAuBX,OAAO,CAACW,WAA/B;AACA,SAAKC,aAAL,GAAuBZ,OAAO,CAACY,aAA/B;AACA,SAAKC,eAAL,GAAuBb,OAAO,CAACa,eAARb,CAAwBc,OAAxBd,CAAgC,GAAhCA,EAAqC,EAArCA,CAAvB;AACA,SAAKe,KAAL,GAAuBf,OAAO,CAACe,KAA/B;AACA,SAAKC,UAAL,GAAuBhB,OAAO,CAACgB,UAA/B;AACA,SAAKC,OAAL,GAAuB;AACrB,oBAAe,KAAKC,SAAL,EADM;AAErB,gBAAW;AAFU,KAAvB;AAIA,SAAKC,gBAAL,GAAuB,CACrB,4BADqB,EAErB,uBAFqB,EAGrB,iDAHqB,EAIrB,uCAJqB,EAKrB,oCALqB,EAMrB,sCANqB,CAAvB;AAQA,SAAKC,sBAAL;AACA,SAAKC,oBAAL;AACA,SAAKC,qBAAL;AACF,GA9BW,CAgCX;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAREC;AAAAC;AAAAC,WASA,mBAAU;AACR,UAAIzB,OAAO,GAAG;AACZ,gBAAS,KAAKE,IADF;AAEZ,gBAAS,KAAKC,IAFF;AAGZ,oBAAU,UAAM,KAAKE,MAAX,EAAiB,GAAjB,CAHE;AAIZ,gBAAS,KAAKI,SAJF;AAKZ,kBAAW,KAAKH,IALJ;AAMZ,mBAAY,KAAKW;AANL,OAAd;AAQA,aAAOjB,OAAP;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;;AA1BE,KAqBA;AAAAwB;AAAAC,WAMA,gBAAO;AACL,UAAI,KAAKnB,IAAL,KAAc,MAAlB,EAA0B;AAAE,eAAO,EAAP;AAAY,OAAxC,MACK;AACH,YAAI,CAAC,KAAKK,WAAV,EAAuB;AACrB,iBAAOe,eAAGC,SAAHD,CAAa,KAAKlB,MAAlBkB,CAAP;AACF;;AACA,eAAO,KAAKlB,MAAZ;AACF;AACF,KAdA,CAgBA;;AAEA;AACF;AACA;AACA;AACA;AACA;;AAvBE,GArBA,EAuCA;AAAAgB;AAAAC,WAMA,qBAAY;AACV,UAAIP,SAAS,0BAAmB,KAAKN,aAAxB,EAAqC,QAArC,EAAqCgB,MAArC,CAA8C,KAAKf,eAAnD,CAAb;;AACA,UAAI,CAAC,KAAKE,KAAV,EAAiB;AAAE,eAAOG,SAAP;AAAkB;;AACrC,uBAAUA,SAAV,EAAmB,GAAnB,EAAmBU,MAAnB,CAAuB,KAAKb,KAA5B,EAAiC,GAAjC,EAAiCa,MAAjC,CAAqC,KAAKZ,UAA1C;AACF;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAlBE,GAvCA,EAmDA;AAAAQ;AAAAC,WAOA,yBAAgB;AACd,UAAI,KAAKnB,IAAL,KAAc,MAAlB,EAA0B;AAAE,eAAO,KAAKC,IAAZ;AAAmB,OAA/C,MACK;AAAE,yBAAU,KAAKA,IAAf,EAAmB,GAAnB,EAAmBqB,MAAnB,CAAuBF,eAAGC,SAAHD,CAAa,KAAKlB,MAAlBkB,CAAvB;AAAoD;AAC7D;AAEA;AACF;AACA;AACA;AACA;;AAhBE,GAnDA,EA+DA;AAAAF;AAAAC,WAKA,kCAAyB;AACvB,UAAI,CAAC,KAAKd,WAAV,EAAuB;AAAE;AAAQ;;AACjC,WAAKM,OAAL,CAAa,eAAb,IAA6B,iBAAa,KAAKN,WAAlB,CAA7B;AACF;AAEA;AACF;AACA;AACA;AACA;;AAdE,GA/DA,EAyEA;AAAAa;AAAAC,WAKA,gCAAuB;AACrB,UAAI,KAAKnB,IAAL,KAAc,MAAd,IAAwB,CAAC,KAAKK,WAAlC,EAA+C;AAC7C,aAAKM,OAAL,CAAa,cAAb,IAA+B,mCAA/B;AACD,OAFD,MAEO;AACL,aAAKA,OAAL,CAAa,cAAb,IAA+B,8BAA/B;AACF;;AACA;AACF;AAEA;AACF;AACA;AACA;AACA;;AAlBE,GAzEA,EAuFA;AAAAO;AAAAC,WAKA,iCAAwB;AACtB,UAAI,KAAKnB,IAAL,KAAc,MAAd,IAAwB,KAAKa,gBAAL,CAAsBU,QAAtB,CAA+B,KAAKtB,IAApC,CAA5B,EAAuE;AACrE,aAAKU,OAAL,CAAa,wBAAb,IAAyC,KAAzC;AACF;;AACA;AACF;AAVA,GAvFA;;AAiGC;AAAA,CAnIU,EArBb;;AAwJG,eAGYlB,OAHZ;AAGmB+B;AAAAC","names":["descriptor","Object","writable","Request","options","_classCallCheck","host","port","ssl","scheme","verb","path","params","queryPath","fullQueryPath","bearerToken","clientVersion","languageVersion","replace","appId","appVersion","headers","userAgent","ListHTTPOverride","addAuthorizationHeader","addContentTypeHeader","addHTTPOverrideHeader","_createClass","key","value","qs","stringify","concat","includes","exports","module"],"sources":["/home/dom/Videos/FlyM/node_modules/amadeus/src/amadeus/client/request.js"],"sourcesContent":["import qs from 'qs';\n\n/**\n * A Request object containing all the compiled information about this request.\n *\n * @property {string} host the host used for this API call\n * @property {number} port the port for this API call. Standard set to 443.\n * @property {boolean} ssl wether this API call uses SSL\n * @property {string} scheme the scheme inferred from the SSL state\n * @property {string} verb the HTTP method, for example `GET` or `POST`\n * @property {string} path the full path of the API endpoint\n * @property {Object} params the parameters to pass in the query or body\n * @property {string} queryPath the path and query string used for the API call\n * @property {string} bearerToken the authentication token\n * @property {string} clientVersion the version of the Amadeus library\n * @property {string} languageVersion the version of Node used\n * @property {string} appId the custom ID of the application using this library\n * @property {string} appVersion the custom version of the application\n *  using this library\n * @property {Object} headers the request headers\n *\n * @param {Object} options\n */\nclass Request {\n  constructor(options) {\n    this.host            = options.host;\n    this.port            = options.port;\n    this.ssl             = options.ssl;\n    this.scheme          = this.ssl ? 'https' : 'http';\n    this.verb            = options.verb;\n    this.path            = options.path;\n    this.params          = options.params;\n    this.queryPath       = this.fullQueryPath();\n    this.bearerToken     = options.bearerToken;\n    this.clientVersion   = options.clientVersion;\n    this.languageVersion = options.languageVersion.replace('v', '');\n    this.appId           = options.appId;\n    this.appVersion      = options.appVersion;\n    this.headers         = {\n      'User-Agent' : this.userAgent(),\n      'Accept' : 'application/json, application/vnd.amadeus+json'\n    };\n    this.ListHTTPOverride= [\n      '/v2/shopping/flight-offers',\n      '/v1/shopping/seatmaps',\n      '/v1/shopping/availability/flight-availabilities',\n      '/v2/shopping/flight-offers/prediction',\n      '/v1/shopping/flight-offers/pricing',\n      '/v1/shopping/flight-offers/upselling'\n    ];\n    this.addAuthorizationHeader();\n    this.addContentTypeHeader();\n    this.addHTTPOverrideHeader();\n  }\n\n  // PROTECTED\n\n  /**\n   * Compiles the options for the HTTP request.\n   *\n   * Used by Client.execute when executing this request against the server.\n   *\n   * @return {Object} an associative array of options to be passed into the\n   *  Client.execute function\n   * @protected\n   */\n  options() {\n    let options = {\n      'host' : this.host,\n      'port' : this.port,\n      'protocol' : `${this.scheme}:`,\n      'path' : this.queryPath,\n      'method' : this.verb,\n      'headers' : this.headers\n    };\n    return options;\n  }\n\n  /**\n   * Creats the body for the API cal, serializing the params if the verb is POST.\n   *\n   * @return {string} the serialized params\n   * @protected\n   */\n  body() {\n    if (this.verb !== 'POST') { return ''; }\n    else {\n      if (!this.bearerToken) {\n        return qs.stringify(this.params);\n      }\n      return this.params;\n    }\n  }\n\n  // PRIVATE\n\n  /**\n   * Build up the custom User Agent\n   *\n   * @return {string} a user agent in the format \"library/version language/version app/version\"\n   * @private\n   */\n  userAgent() {\n    let userAgent = `amadeus-node/${this.clientVersion} node/${this.languageVersion}`;\n    if (!this.appId) { return userAgent; }\n    return `${userAgent} ${this.appId}/${this.appVersion}`;\n  }\n\n  /**\n   * Build the full query path, combining the path with the query params if the\n   * verb is 'GET'. For example: '/foo/bar?baz=qux'\n   *\n   * @return {string} the path and params combined into one string.\n   * @private\n   */\n  fullQueryPath() {\n    if (this.verb === 'POST') { return this.path; }\n    else { return `${this.path}?${qs.stringify(this.params)}`; }\n  }\n\n  /**\n   * Adds an Authorization header if the BearerToken is present\n   *\n   * @private\n   */\n  addAuthorizationHeader() {\n    if (!this.bearerToken) { return; }\n    this.headers['Authorization'] = `Bearer ${this.bearerToken}`;\n  }\n\n  /**\n   * Adds an Content-Type header if the HTTP method equals POST\n   *\n   * @private\n   */\n  addContentTypeHeader() {\n    if (this.verb === 'POST' && !this.bearerToken) {\n      this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    } else {\n      this.headers['Content-Type'] = 'application/vnd.amadeus+json';\n    }\n    return;\n  }\n\n  /**\n  * Adds HTTPOverride method if it is required\n  *\n  *  @private\n  */\n  addHTTPOverrideHeader() {\n    if (this.verb === 'POST' && this.ListHTTPOverride.includes(this.path)) {\n      this.headers['X-HTTP-Method-Override'] = 'GET';\n    }\n    return;\n  }\n}\n\nexport default Request;\n"]},"metadata":{},"sourceType":"script"}