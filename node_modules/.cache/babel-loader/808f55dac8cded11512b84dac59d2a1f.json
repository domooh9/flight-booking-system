{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _client = _interopRequireDefault(require(\"./amadeus/client\"));\n\nvar _pagination = _interopRequireDefault(require(\"./amadeus/client/pagination\"));\n\nvar _reference_data = _interopRequireDefault(require(\"./amadeus/namespaces/reference_data\"));\n\nvar _shopping = _interopRequireDefault(require(\"./amadeus/namespaces/shopping\"));\n\nvar _booking = _interopRequireDefault(require(\"./amadeus/namespaces/booking\"));\n\nvar _travel = _interopRequireDefault(require(\"./amadeus/namespaces/travel\"));\n\nvar _e_reputation = _interopRequireDefault(require(\"./amadeus/namespaces/e_reputation\"));\n\nvar _media = _interopRequireDefault(require(\"./amadeus/namespaces/media\"));\n\nvar _airport = _interopRequireDefault(require(\"./amadeus/namespaces/airport\"));\n\nvar _safety = _interopRequireDefault(require(\"./amadeus/namespaces/safety\"));\n\nvar _schedule = _interopRequireDefault(require(\"./amadeus/namespaces/schedule\"));\n\nvar _analytics = _interopRequireDefault(require(\"./amadeus/namespaces/analytics\"));\n\nvar _location = _interopRequireDefault(require(\"./amadeus/namespaces/location\"));\n\nvar _duty_of_care = _interopRequireDefault(require(\"./amadeus/namespaces/duty_of_care\"));\n\nvar _airline = _interopRequireDefault(require(\"./amadeus/namespaces/airline\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n/**\n * The Amadeus client library for accessing the travel APIs.\n *\n * Initialize using your credentials:\n *\n * ```js\n * var Amadeus = require('amadeus');\n * var amadeus = new Amadeus({\n *     clientId:    'YOUR_CLIENT_ID',\n *     clientSecret: 'YOUR_CLIENT_SECRET'\n * });\n * ```\n *\n * Alternatively, initialize the library using\n * the environment variables `AMADEUS_CLIENT_ID`\n * and `AMADEUS_CLIENT_SECRET`\n *\n * ```js\n * var amadeus = new Amadeus();\n * ```\n *\n * @param {Object} params\n * @param {string} params.clientId the API key used to authenticate the API\n * @param {string} params.clientSecret the API secret used to authenticate\n *  the API\n * @param {Object} [params.logger=console] a `console`-compatible logger that\n *  accepts `log`, `error` and `debug` calls.\n * @param {string} [params.logLevel='warn'] the log level for the client,\n *  available options are `debug`, `warn`, and `silent`\n * @param {string} [params.hostname='production'] the name of the server API\n *  calls are made to (`production` or `test`)\n * @param {string} [params.host] the full domain or IP for a server to make the\n *  API clal to. Only use this if you don't want to use the provided servers\n * @param {boolean} [params.ssl=true] wether to use SSL for this API call\n * @param {number} [params.port=443] the port to make the API call to\n * @param {string} [params.customAppId=null] a custom App ID to be passed in\n * the User Agent to the server.\n * @param {string} [params.customAppVersion=null] a custom App Version number to\n * be passed in the User Agent to the server.\n * @param {Object} [params.http=https] an optional Node/HTTP(S)-compatible client\n *  that accepts a 'request()' call with an array of options.\n *\n * @property {Client} client The client for making authenticated HTTP calls\n * @property {number} version The version of this API client\n */\n\n\nvar Amadeus = /*#__PURE__*/function () {\n  function Amadeus() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Amadeus);\n\n    this.client = new _client[\"default\"](params);\n    this.version = this.client.version;\n    this.referenceData = new _reference_data[\"default\"](this.client);\n    this.shopping = new _shopping[\"default\"](this.client);\n    this.booking = new _booking[\"default\"](this.client);\n    this.travel = new _travel[\"default\"](this.client);\n    this.eReputation = new _e_reputation[\"default\"](this.client);\n    this.media = new _media[\"default\"](this.client);\n    this.airport = new _airport[\"default\"](this.client);\n    this.pagination = new _pagination[\"default\"](this.client);\n    this.safety = new _safety[\"default\"](this.client);\n    this.schedule = new _schedule[\"default\"](this.client);\n    this.analytics = new _analytics[\"default\"](this.client);\n    this.location = new _location[\"default\"](this.client);\n    this.dutyOfCare = new _duty_of_care[\"default\"](this.client);\n    this.airline = new _airline[\"default\"](this.client);\n  }\n  /**\n   * The previous page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY',\n   *   page: { offset: 2 }\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.previous(response);\n   * }).then(function(previousPage){\n   *   console.log(previousPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n\n\n  _createClass(Amadeus, [{\n    key: \"previous\",\n    value: function previous(response) {\n      return this.pagination.page('previous', response);\n    }\n    /**\n     * The next page for the given response. Resolves to null if the page could\n     * not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY'\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.next(response);\n     * }).then(function(nextPage){\n     *   console.log(nextPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n     */\n\n  }, {\n    key: \"next\",\n    value: function next(response) {\n      return this.pagination.page('next', response);\n    }\n    /**\n     * The first page for the given response. Resolves to null if the page\n     * could not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY',\n     *   page: { offset: 2 }\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.first(response);\n     * }).then(function(firstPage){\n     *   console.log(firstPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n     */\n\n  }, {\n    key: \"first\",\n    value: function first(response) {\n      return this.pagination.page('first', response);\n    }\n    /**\n     * The last page for the given response. Resolves to null if the page\n     * could not be found.\n     *\n     * ```js\n     * amadeus.referenceData.locations.get({\n     *   keyword: 'LON',\n     *   subType: 'AIRPORT,CITY'\n     * }).then(function(response){\n     *   console.log(response);\n     *   return amadeus.last(response);\n     * }).then(function(lastPage){\n     *   console.log(lastPage);\n     * });\n     * ```\n     *\n     * @param response the previous response for an API call\n     * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n     */\n\n  }, {\n    key: \"last\",\n    value: function last(response) {\n      return this.pagination.page('last', response);\n    }\n  }]);\n\n  return Amadeus;\n}();\n/**\n * A handy list of location types, to be used in the locations API:\n *\n * ```js\n * amadeus.referenceData.location.get({\n *   keyword: 'lon',\n *   subType: Amadeus.location.any\n * });\n * ```\n *\n * Currently available are the types `.airport`, `.city`, and `.any`\n */\n\n\nAmadeus.location = {\n  airport: 'AIRPORT',\n  city: 'CITY',\n  any: 'AIRPORT,CITY'\n};\n/**\n * A handy list of direction types, to be used in the Flight Busiest Period API:\n *\n * ```js\n * amadeus.travel.analytics.airTraffic.busiestPeriod.get({\n *   cityCode: 'par',\n *   perdiod: 2015,\n *   direction: Amadeus.direction.arriving\n * });\n * ```\n *\n * Currently available are the types `.arriving` and `.departing`\n */\n\nAmadeus.direction = {\n  arriving: 'ARRIVING',\n  departing: 'DEPARTING'\n};\nvar _default = Amadeus;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":"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","names":["descriptor","Object","writable","Amadeus","params","_classCallCheck","client","Client","version","referenceData","ReferenceData","shopping","Shopping","booking","Booking","travel","Travel","eReputation","EReputation","media","Media","airport","Airport","pagination","Pagination","safety","Safety","schedule","Schedule","analytics","Analytics","location","Location","dutyOfCare","DutyOfCare","airline","Airline","_createClass","key","value","response","page","city","any","direction","arriving","departing","exports","module"],"sources":["/home/dom/Videos/FlyM/node_modules/amadeus/src/amadeus.js"],"sourcesContent":["import Client        from './amadeus/client';\nimport Pagination    from './amadeus/client/pagination';\n\nimport ReferenceData from './amadeus/namespaces/reference_data';\nimport Shopping      from './amadeus/namespaces/shopping';\nimport Booking       from './amadeus/namespaces/booking';\nimport Travel        from './amadeus/namespaces/travel';\nimport EReputation   from './amadeus/namespaces/e_reputation';\nimport Media         from './amadeus/namespaces/media';\nimport Airport       from './amadeus/namespaces/airport';\nimport Safety        from './amadeus/namespaces/safety';\nimport Schedule      from './amadeus/namespaces/schedule';\nimport Analytics     from './amadeus/namespaces/analytics';\nimport Location      from './amadeus/namespaces/location';\nimport DutyOfCare    from './amadeus/namespaces/duty_of_care';\nimport Airline       from './amadeus/namespaces/airline';\n\n\n/**\n * The Amadeus client library for accessing the travel APIs.\n *\n * Initialize using your credentials:\n *\n * ```js\n * var Amadeus = require('amadeus');\n * var amadeus = new Amadeus({\n *     clientId:    'YOUR_CLIENT_ID',\n *     clientSecret: 'YOUR_CLIENT_SECRET'\n * });\n * ```\n *\n * Alternatively, initialize the library using\n * the environment variables `AMADEUS_CLIENT_ID`\n * and `AMADEUS_CLIENT_SECRET`\n *\n * ```js\n * var amadeus = new Amadeus();\n * ```\n *\n * @param {Object} params\n * @param {string} params.clientId the API key used to authenticate the API\n * @param {string} params.clientSecret the API secret used to authenticate\n *  the API\n * @param {Object} [params.logger=console] a `console`-compatible logger that\n *  accepts `log`, `error` and `debug` calls.\n * @param {string} [params.logLevel='warn'] the log level for the client,\n *  available options are `debug`, `warn`, and `silent`\n * @param {string} [params.hostname='production'] the name of the server API\n *  calls are made to (`production` or `test`)\n * @param {string} [params.host] the full domain or IP for a server to make the\n *  API clal to. Only use this if you don't want to use the provided servers\n * @param {boolean} [params.ssl=true] wether to use SSL for this API call\n * @param {number} [params.port=443] the port to make the API call to\n * @param {string} [params.customAppId=null] a custom App ID to be passed in\n * the User Agent to the server.\n * @param {string} [params.customAppVersion=null] a custom App Version number to\n * be passed in the User Agent to the server.\n * @param {Object} [params.http=https] an optional Node/HTTP(S)-compatible client\n *  that accepts a 'request()' call with an array of options.\n *\n * @property {Client} client The client for making authenticated HTTP calls\n * @property {number} version The version of this API client\n */\nclass Amadeus {\n  constructor(params = {}) {\n    this.client = new Client(params);\n    this.version = this.client.version;\n\n    this.referenceData  = new ReferenceData(this.client);\n    this.shopping       = new Shopping(this.client);\n    this.booking        = new Booking(this.client);\n    this.travel         = new Travel(this.client);\n    this.eReputation    = new EReputation(this.client);\n    this.media          = new Media(this.client);\n    this.airport        = new Airport(this.client);\n    this.pagination     = new Pagination(this.client);\n    this.safety         = new Safety(this.client);\n    this.schedule       = new Schedule(this.client);\n    this.analytics      = new Analytics(this.client);\n    this.location       = new Location(this.client);\n    this.dutyOfCare     = new DutyOfCare(this.client);\n    this.airline        = new Airline(this.client);\n  }\n\n  /**\n   * The previous page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY',\n   *   page: { offset: 2 }\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.previous(response);\n   * }).then(function(previousPage){\n   *   console.log(previousPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  previous(response) { return this.pagination.page('previous', response); }\n\n  /**\n   * The next page for the given response. Resolves to null if the page could\n   * not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY'\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.next(response);\n   * }).then(function(nextPage){\n   *   console.log(nextPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  next(response)     { return this.pagination.page('next', response); }\n\n  /**\n   * The first page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY',\n   *   page: { offset: 2 }\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.first(response);\n   * }).then(function(firstPage){\n   *   console.log(firstPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  first(response)    { return this.pagination.page('first', response); }\n\n  /**\n   * The last page for the given response. Resolves to null if the page\n   * could not be found.\n   *\n   * ```js\n   * amadeus.referenceData.locations.get({\n   *   keyword: 'LON',\n   *   subType: 'AIRPORT,CITY'\n   * }).then(function(response){\n   *   console.log(response);\n   *   return amadeus.last(response);\n   * }).then(function(lastPage){\n   *   console.log(lastPage);\n   * });\n   * ```\n   *\n   * @param response the previous response for an API call\n   * @return {Promise.<Response,ResponseError>} a Bluebird Promise\n   */\n  last(response)     { return this.pagination.page('last', response); }\n}\n\n\n/**\n * A handy list of location types, to be used in the locations API:\n *\n * ```js\n * amadeus.referenceData.location.get({\n *   keyword: 'lon',\n *   subType: Amadeus.location.any\n * });\n * ```\n *\n * Currently available are the types `.airport`, `.city`, and `.any`\n */\nAmadeus.location = {\n  airport: 'AIRPORT',\n  city: 'CITY',\n  any: 'AIRPORT,CITY'\n};\n\n/**\n * A handy list of direction types, to be used in the Flight Busiest Period API:\n *\n * ```js\n * amadeus.travel.analytics.airTraffic.busiestPeriod.get({\n *   cityCode: 'par',\n *   perdiod: 2015,\n *   direction: Amadeus.direction.arriving\n * });\n * ```\n *\n * Currently available are the types `.arriving` and `.departing`\n */\n\nAmadeus.direction = {\n  arriving: 'ARRIVING',\n  departing: 'DEPARTING'\n};\n\nexport default Amadeus;\n"]},"metadata":{},"sourceType":"script"}