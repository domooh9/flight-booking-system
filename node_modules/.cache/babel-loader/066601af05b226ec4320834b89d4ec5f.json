{"ast":null,"code":"\"use strict\";\n\nvar sessionAuth = require(\"./session-shared.js\");\n\nrequire(\"supertokens-web-js/recipe/session\");\n\nvar React = require(\"react\");\n\nfunction _interopDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefault(React);\n\nvar useSessionContext$1 = function () {\n  var ctx = React__default.default.useContext(sessionAuth.SessionContext);\n\n  if (ctx.isDefault === true) {\n    throw new Error(\"Cannot use useSessionContext outside auth wrapper components.\");\n  }\n\n  return ctx;\n};\n\nvar useClaimValue$1 = function (claim) {\n  var ctx = useSessionContext$1();\n\n  if (ctx.loading) {\n    return {\n      loading: true\n    };\n  }\n\n  if (ctx.doesSessionExist === false) {\n    return {\n      loading: false,\n      doesSessionExist: false,\n      value: undefined\n    };\n  }\n\n  return {\n    loading: false,\n    doesSessionExist: true,\n    value: claim.getValueFromPayload(ctx.accessTokenPayload)\n  };\n};\n/* Copyright (c) 2021, VRAI Labs and/or its affiliates. All rights reserved.\n *\n * This software is licensed under the Apache License, Version 2.0 (the\n * \"License\") as published by the Apache Software Foundation.\n *\n * You may not use this file except in compliance with the License. You may\n * obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\n\nvar SessionAPIWrapper =\n/** @class */\nfunction () {\n  function SessionAPIWrapper() {}\n\n  SessionAPIWrapper.init = function (config) {\n    return sessionAuth.Session.init(config);\n  };\n\n  SessionAPIWrapper.getUserId = function (input) {\n    return sessionAuth.__awaiter(this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().getUserId({\n          userContext: sessionAuth.getNormalisedUserContext(input === null || input === void 0 ? void 0 : input.userContext)\n        })];\n      });\n    });\n  };\n\n  SessionAPIWrapper.getAccessToken = function (input) {\n    return sessionAuth.__awaiter(this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().getAccessToken({\n          userContext: sessionAuth.getNormalisedUserContext(input === null || input === void 0 ? void 0 : input.userContext)\n        })];\n      });\n    });\n  };\n\n  SessionAPIWrapper.getAccessTokenPayloadSecurely = function (input) {\n    return sessionAuth.__awaiter(this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().getAccessTokenPayloadSecurely({\n          userContext: sessionAuth.getNormalisedUserContext(input === null || input === void 0 ? void 0 : input.userContext)\n        })];\n      });\n    });\n  };\n\n  SessionAPIWrapper.attemptRefreshingSession = function () {\n    return sessionAuth.__awaiter(this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().attemptRefreshingSession()];\n      });\n    });\n  };\n\n  SessionAPIWrapper.doesSessionExist = function (input) {\n    return sessionAuth.__awaiter(this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().doesSessionExist({\n          userContext: sessionAuth.getNormalisedUserContext(input === null || input === void 0 ? void 0 : input.userContext)\n        })];\n      });\n    });\n  };\n  /**\n   * @deprecated\n   */\n\n\n  SessionAPIWrapper.addAxiosInterceptors = function (axiosInstance, userContext) {\n    return sessionAuth.Session.addAxiosInterceptors(axiosInstance, sessionAuth.getNormalisedUserContext(userContext));\n  };\n\n  SessionAPIWrapper.signOut = function (input) {\n    return sessionAuth.__awaiter(this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().signOut({\n          userContext: sessionAuth.getNormalisedUserContext(input === null || input === void 0 ? void 0 : input.userContext)\n        })];\n      });\n    });\n  };\n\n  SessionAPIWrapper.validateClaims = function (input) {\n    return sessionAuth.Session.getInstanceOrThrow().validateClaims({\n      overrideGlobalClaimValidators: input === null || input === void 0 ? void 0 : input.overrideGlobalClaimValidators,\n      userContext: sessionAuth.getNormalisedUserContext(input === null || input === void 0 ? void 0 : input.userContext)\n    });\n  };\n\n  SessionAPIWrapper.getInvalidClaimsFromResponse = function (input) {\n    return sessionAuth.Session.getInstanceOrThrow().getInvalidClaimsFromResponse(input);\n  };\n\n  SessionAPIWrapper.getClaimValue = function (input) {\n    return sessionAuth.Session.getInstanceOrThrow().getClaimValue({\n      claim: input.claim,\n      userContext: sessionAuth.getNormalisedUserContext(input === null || input === void 0 ? void 0 : input.userContext)\n    });\n  };\n\n  SessionAPIWrapper.useSessionContext = useSessionContext$1;\n  SessionAPIWrapper.useClaimValue = useClaimValue$1;\n  SessionAPIWrapper.SessionAuth = sessionAuth.SessionAuthWrapper;\n  return SessionAPIWrapper;\n}();\n\nvar useSessionContext = SessionAPIWrapper.useSessionContext;\nvar useClaimValue = SessionAPIWrapper.useClaimValue;\nvar SessionAuth = SessionAPIWrapper.SessionAuth;\nvar init = SessionAPIWrapper.init;\nvar getUserId = SessionAPIWrapper.getUserId;\nvar getAccessToken = SessionAPIWrapper.getAccessToken;\nvar getAccessTokenPayloadSecurely = SessionAPIWrapper.getAccessTokenPayloadSecurely;\nvar attemptRefreshingSession = SessionAPIWrapper.attemptRefreshingSession;\nvar doesSessionExist = SessionAPIWrapper.doesSessionExist;\n/**\n * @deprecated\n */\n\nvar addAxiosInterceptors = SessionAPIWrapper.addAxiosInterceptors;\nvar signOut = SessionAPIWrapper.signOut;\nvar validateClaims = SessionAPIWrapper.validateClaims;\nvar getInvalidClaimsFromResponse = SessionAPIWrapper.getInvalidClaimsFromResponse;\nvar getClaimValue = SessionAPIWrapper.getClaimValue;\nexports.SessionAPIWrapper = SessionAPIWrapper;\nexports.SessionAuth = SessionAuth;\nexports.addAxiosInterceptors = addAxiosInterceptors;\nexports.attemptRefreshingSession = attemptRefreshingSession;\nexports.doesSessionExist = doesSessionExist;\nexports.getAccessToken = getAccessToken;\nexports.getAccessTokenPayloadSecurely = getAccessTokenPayloadSecurely;\nexports.getClaimValue = getClaimValue;\nexports.getInvalidClaimsFromResponse = getInvalidClaimsFromResponse;\nexports.getUserId = getUserId;\nexports.init = init;\nexports.signOut = signOut;\nexports.useClaimValue = useClaimValue;\nexports.useSessionContext = useSessionContext$1;\nexports.useSessionContext$1 = useSessionContext;\nexports.validateClaims = validateClaims;","map":{"version":3,"mappings":"","names":[],"sources":[],"sourcesContent":["\"use strict\";\n\nvar sessionAuth = require(\"./session-shared.js\");\nrequire(\"supertokens-web-js/recipe/session\");\nvar React = require(\"react\");\n\nfunction _interopDefault(e) {\n    return e && e.__esModule ? e : { default: e };\n}\n\nvar React__default = /*#__PURE__*/ _interopDefault(React);\n\nvar useSessionContext$1 = function () {\n    var ctx = React__default.default.useContext(sessionAuth.SessionContext);\n    if (ctx.isDefault === true) {\n        throw new Error(\"Cannot use useSessionContext outside auth wrapper components.\");\n    }\n    return ctx;\n};\n\nvar useClaimValue$1 = function (claim) {\n    var ctx = useSessionContext$1();\n    if (ctx.loading) {\n        return {\n            loading: true,\n        };\n    }\n    if (ctx.doesSessionExist === false) {\n        return {\n            loading: false,\n            doesSessionExist: false,\n            value: undefined,\n        };\n    }\n    return {\n        loading: false,\n        doesSessionExist: true,\n        value: claim.getValueFromPayload(ctx.accessTokenPayload),\n    };\n};\n\n/* Copyright (c) 2021, VRAI Labs and/or its affiliates. All rights reserved.\n *\n * This software is licensed under the Apache License, Version 2.0 (the\n * \"License\") as published by the Apache Software Foundation.\n *\n * You may not use this file except in compliance with the License. You may\n * obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\nvar SessionAPIWrapper = /** @class */ (function () {\n    function SessionAPIWrapper() {}\n    SessionAPIWrapper.init = function (config) {\n        return sessionAuth.Session.init(config);\n    };\n    SessionAPIWrapper.getUserId = function (input) {\n        return sessionAuth.__awaiter(this, void 0, void 0, function () {\n            return sessionAuth.__generator(this, function (_a) {\n                return [\n                    2 /*return*/,\n                    sessionAuth.Session.getInstanceOrThrow().getUserId({\n                        userContext: sessionAuth.getNormalisedUserContext(\n                            input === null || input === void 0 ? void 0 : input.userContext\n                        ),\n                    }),\n                ];\n            });\n        });\n    };\n    SessionAPIWrapper.getAccessToken = function (input) {\n        return sessionAuth.__awaiter(this, void 0, void 0, function () {\n            return sessionAuth.__generator(this, function (_a) {\n                return [\n                    2 /*return*/,\n                    sessionAuth.Session.getInstanceOrThrow().getAccessToken({\n                        userContext: sessionAuth.getNormalisedUserContext(\n                            input === null || input === void 0 ? void 0 : input.userContext\n                        ),\n                    }),\n                ];\n            });\n        });\n    };\n    SessionAPIWrapper.getAccessTokenPayloadSecurely = function (input) {\n        return sessionAuth.__awaiter(this, void 0, void 0, function () {\n            return sessionAuth.__generator(this, function (_a) {\n                return [\n                    2 /*return*/,\n                    sessionAuth.Session.getInstanceOrThrow().getAccessTokenPayloadSecurely({\n                        userContext: sessionAuth.getNormalisedUserContext(\n                            input === null || input === void 0 ? void 0 : input.userContext\n                        ),\n                    }),\n                ];\n            });\n        });\n    };\n    SessionAPIWrapper.attemptRefreshingSession = function () {\n        return sessionAuth.__awaiter(this, void 0, void 0, function () {\n            return sessionAuth.__generator(this, function (_a) {\n                return [2 /*return*/, sessionAuth.Session.getInstanceOrThrow().attemptRefreshingSession()];\n            });\n        });\n    };\n    SessionAPIWrapper.doesSessionExist = function (input) {\n        return sessionAuth.__awaiter(this, void 0, void 0, function () {\n            return sessionAuth.__generator(this, function (_a) {\n                return [\n                    2 /*return*/,\n                    sessionAuth.Session.getInstanceOrThrow().doesSessionExist({\n                        userContext: sessionAuth.getNormalisedUserContext(\n                            input === null || input === void 0 ? void 0 : input.userContext\n                        ),\n                    }),\n                ];\n            });\n        });\n    };\n    /**\n     * @deprecated\n     */\n    SessionAPIWrapper.addAxiosInterceptors = function (axiosInstance, userContext) {\n        return sessionAuth.Session.addAxiosInterceptors(\n            axiosInstance,\n            sessionAuth.getNormalisedUserContext(userContext)\n        );\n    };\n    SessionAPIWrapper.signOut = function (input) {\n        return sessionAuth.__awaiter(this, void 0, void 0, function () {\n            return sessionAuth.__generator(this, function (_a) {\n                return [\n                    2 /*return*/,\n                    sessionAuth.Session.getInstanceOrThrow().signOut({\n                        userContext: sessionAuth.getNormalisedUserContext(\n                            input === null || input === void 0 ? void 0 : input.userContext\n                        ),\n                    }),\n                ];\n            });\n        });\n    };\n    SessionAPIWrapper.validateClaims = function (input) {\n        return sessionAuth.Session.getInstanceOrThrow().validateClaims({\n            overrideGlobalClaimValidators:\n                input === null || input === void 0 ? void 0 : input.overrideGlobalClaimValidators,\n            userContext: sessionAuth.getNormalisedUserContext(\n                input === null || input === void 0 ? void 0 : input.userContext\n            ),\n        });\n    };\n    SessionAPIWrapper.getInvalidClaimsFromResponse = function (input) {\n        return sessionAuth.Session.getInstanceOrThrow().getInvalidClaimsFromResponse(input);\n    };\n    SessionAPIWrapper.getClaimValue = function (input) {\n        return sessionAuth.Session.getInstanceOrThrow().getClaimValue({\n            claim: input.claim,\n            userContext: sessionAuth.getNormalisedUserContext(\n                input === null || input === void 0 ? void 0 : input.userContext\n            ),\n        });\n    };\n    SessionAPIWrapper.useSessionContext = useSessionContext$1;\n    SessionAPIWrapper.useClaimValue = useClaimValue$1;\n    SessionAPIWrapper.SessionAuth = sessionAuth.SessionAuthWrapper;\n    return SessionAPIWrapper;\n})();\nvar useSessionContext = SessionAPIWrapper.useSessionContext;\nvar useClaimValue = SessionAPIWrapper.useClaimValue;\nvar SessionAuth = SessionAPIWrapper.SessionAuth;\nvar init = SessionAPIWrapper.init;\nvar getUserId = SessionAPIWrapper.getUserId;\nvar getAccessToken = SessionAPIWrapper.getAccessToken;\nvar getAccessTokenPayloadSecurely = SessionAPIWrapper.getAccessTokenPayloadSecurely;\nvar attemptRefreshingSession = SessionAPIWrapper.attemptRefreshingSession;\nvar doesSessionExist = SessionAPIWrapper.doesSessionExist;\n/**\n * @deprecated\n */\nvar addAxiosInterceptors = SessionAPIWrapper.addAxiosInterceptors;\nvar signOut = SessionAPIWrapper.signOut;\nvar validateClaims = SessionAPIWrapper.validateClaims;\nvar getInvalidClaimsFromResponse = SessionAPIWrapper.getInvalidClaimsFromResponse;\nvar getClaimValue = SessionAPIWrapper.getClaimValue;\n\nexports.SessionAPIWrapper = SessionAPIWrapper;\nexports.SessionAuth = SessionAuth;\nexports.addAxiosInterceptors = addAxiosInterceptors;\nexports.attemptRefreshingSession = attemptRefreshingSession;\nexports.doesSessionExist = doesSessionExist;\nexports.getAccessToken = getAccessToken;\nexports.getAccessTokenPayloadSecurely = getAccessTokenPayloadSecurely;\nexports.getClaimValue = getClaimValue;\nexports.getInvalidClaimsFromResponse = getInvalidClaimsFromResponse;\nexports.getUserId = getUserId;\nexports.init = init;\nexports.signOut = signOut;\nexports.useClaimValue = useClaimValue;\nexports.useSessionContext = useSessionContext$1;\nexports.useSessionContext$1 = useSessionContext;\nexports.validateClaims = validateClaims;\n"]},"metadata":{},"sourceType":"script"}