{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst log = require('npmlog');\n\nconst os = require('os');\n\nconst processRelease = require('./process-release');\n\nconst win = process.platform === 'win32';\n\nconst findNodeDirectory = require('./find-node-directory');\n\nconst createConfigGypi = require('./create-config-gypi');\n\nconst msgFormat = require('util').format;\n\nvar findPython = require('./find-python');\n\nif (win) {\n  var findVisualStudio = require('./find-visualstudio');\n}\n\nfunction configure(gyp, argv, callback) {\n  var python;\n  var buildDir = path.resolve('build');\n  var configNames = ['config.gypi', 'common.gypi'];\n  var configs = [];\n  var nodeDir;\n  var release = processRelease(argv, gyp, process.version, process.release);\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err);\n    } else {\n      python = found;\n      getNodeDir();\n    }\n  });\n\n  function getNodeDir() {\n    // 'python' should be set by now\n    process.env.PYTHON = python;\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir());\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir);\n      createBuildDir();\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version);\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version);\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version));\n      } // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n\n\n      gyp.opts.ensure = !gyp.opts.tarball;\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err);\n        }\n\n        log.verbose('get node dir', 'target node version installed:', release.versionDir);\n        nodeDir = path.resolve(gyp.devDir, release.versionDir);\n        createBuildDir();\n      });\n    }\n  }\n\n  function createBuildDir() {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir);\n    fs.mkdir(buildDir, {\n      recursive: true\n    }, function (err, isNew) {\n      if (err) {\n        return callback(err);\n      }\n\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew ? 'Yes' : 'No');\n\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version, createConfigFile);\n      } else {\n        createConfigFile();\n      }\n    });\n  }\n\n  function createConfigFile(err, vsInfo) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (process.platform === 'win32') {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015);\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path;\n    }\n\n    createConfigGypi({\n      gyp,\n      buildDir,\n      nodeDir,\n      vsInfo\n    }).then(configPath => {\n      configs.push(configPath);\n      findConfigs();\n    }).catch(err => {\n      callback(err);\n    });\n  }\n\n  function findConfigs() {\n    var name = configNames.shift();\n\n    if (!name) {\n      return runGyp();\n    }\n\n    var fullPath = path.resolve(name);\n    log.verbose(name, 'checking for gypi file: %s', fullPath);\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs(); // check next gypi filename\n        } else {\n          callback(err);\n        }\n      } else {\n        log.verbose(name, 'found gypi file');\n        configs.push(fullPath);\n        findConfigs();\n      }\n    });\n  }\n\n  function runGyp(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"'); // force the 'make' target for non-Windows\n\n        argv.push('-f', 'msvs');\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"'); // force the 'make' target for non-Windows\n\n        argv.push('-f', 'make');\n      }\n    } // include all the \".gypi\" files that were found\n\n\n    configs.forEach(function (config) {\n      argv.push('-I', config);\n    }); // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n\n    var nodeExpFile;\n\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x';\n      var nodeRootDir = findNodeDirectory();\n      var candidates;\n\n      if (process.platform === 'aix') {\n        candidates = ['include/node/node', 'out/Release/node', 'out/Debug/node', 'node'].map(function (file) {\n          return file + '.' + ext;\n        });\n      } else {\n        candidates = ['out/Release/obj.target/libnode', 'out/Debug/obj.target/libnode', 'lib/libnode'].map(function (file) {\n          return file + '.' + ext;\n        });\n      }\n\n      var logprefix = 'find exports file';\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates);\n\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile);\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir);\n        log.error(logprefix, 'Could not find exports file');\n        return callback(new Error(msg));\n      }\n    } // this logic ported from the old `gyp_addon` python file\n\n\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py');\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi');\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi');\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi');\n      }\n\n      var outputDir = 'build';\n\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir;\n      }\n\n      var nodeGypDir = path.resolve(__dirname, '..');\n      var nodeLibFile = path.join(nodeDir, !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)', release.name + '.lib');\n      argv.push('-I', addonGypi);\n      argv.push('-I', commonGypi);\n      argv.push('-Dlibrary=shared_library');\n      argv.push('-Dvisibility=default');\n      argv.push('-Dnode_root_dir=' + nodeDir);\n\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile);\n      }\n\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir); // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\');\n      }\n\n      argv.push('-Dnode_lib_file=' + nodeLibFile);\n      argv.push('-Dmodule_root_dir=' + process.cwd());\n      argv.push('-Dnode_engine=' + (gyp.opts.node_engine || process.jsEngine || 'v8'));\n      argv.push('--depth=.');\n      argv.push('--no-parallel'); // tell gyp to write the Makefile/Solution files into output_dir\n\n      argv.push('--generator-output', outputDir); // tell make to write its output into the same dir\n\n      argv.push('-Goutput_dir=.'); // enforce use of the \"binding.gyp\" file\n\n      argv.unshift('binding.gyp'); // execute `gyp` from the current target nodedir\n\n      argv.unshift(gypScript); // make sure python uses files that came with this particular node package\n\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')];\n\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH);\n      }\n\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':');\n      var cp = gyp.spawn(python, argv);\n      cp.on('exit', onCpExit);\n    });\n  }\n\n  function onCpExit(code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code));\n    } else {\n      // we're done\n      callback();\n    }\n  }\n}\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\n\n\nfunction findAccessibleSync(logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next]);\n\n    try {\n      var fd = fs.openSync(candidate, 'r');\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message);\n      continue;\n    }\n\n    fs.closeSync(fd);\n    log.silly(logprefix, 'Found readable %s', candidate);\n    return candidate;\n  }\n\n  return undefined;\n}\n\nmodule.exports = configure;\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n};\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module';","map":{"version":3,"sources":["/home/dom/Videos/FlyM/node_modules/node-gyp/lib/configure.js"],"names":["fs","require","path","log","os","processRelease","win","process","platform","findNodeDirectory","createConfigGypi","msgFormat","format","findPython","findVisualStudio","configure","gyp","argv","callback","python","buildDir","resolve","configNames","configs","nodeDir","release","version","opts","err","found","getNodeDir","env","PYTHON","nodedir","replace","homedir","verbose","createBuildDir","semver","Error","ensure","tarball","commands","install","versionDir","devDir","mkdir","recursive","isNew","msvs_version","createConfigFile","vsInfo","GYP_MSVS_VERSION","Math","min","versionYear","GYP_MSVS_OVERRIDE_PATH","then","configPath","push","findConfigs","catch","name","shift","runGyp","fullPath","stat","code","indexOf","forEach","config","nodeExpFile","ext","nodeRootDir","candidates","map","file","logprefix","findAccessibleSync","undefined","msg","error","gypScript","__dirname","addonGypi","commonGypi","outputDir","nodeGypDir","nodeLibFile","join","cwd","node_engine","jsEngine","unshift","pypath","PYTHONPATH","cp","spawn","on","onCpExit","dir","next","length","candidate","fd","openSync","e","silly","message","closeSync","module","exports","test","usage"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst log = require('npmlog')\nconst os = require('os')\nconst processRelease = require('./process-release')\nconst win = process.platform === 'win32'\nconst findNodeDirectory = require('./find-node-directory')\nconst createConfigGypi = require('./create-config-gypi')\nconst msgFormat = require('util').format\nvar findPython = require('./find-python')\nif (win) {\n  var findVisualStudio = require('./find-visualstudio')\n}\n\nfunction configure (gyp, argv, callback) {\n  var python\n  var buildDir = path.resolve('build')\n  var configNames = ['config.gypi', 'common.gypi']\n  var configs = []\n  var nodeDir\n  var release = processRelease(argv, gyp, process.version, process.release)\n\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err)\n    } else {\n      python = found\n      getNodeDir()\n    }\n  })\n\n  function getNodeDir () {\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir())\n\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n      createBuildDir()\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version))\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = !gyp.opts.tarball\n\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err)\n        }\n        log.verbose('get node dir', 'target node version installed:', release.versionDir)\n        nodeDir = path.resolve(gyp.devDir, release.versionDir)\n        createBuildDir()\n      })\n    }\n  }\n\n  function createBuildDir () {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir)\n    fs.mkdir(buildDir, { recursive: true }, function (err, isNew) {\n      if (err) {\n        return callback(err)\n      }\n      log.verbose(\n        'build dir', '\"build\" dir needed to be created?', isNew ? 'Yes' : 'No'\n      )\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version,\n          createConfigFile)\n      } else {\n        createConfigFile()\n      }\n    })\n  }\n\n  function createConfigFile (err, vsInfo) {\n    if (err) {\n      return callback(err)\n    }\n    if (process.platform === 'win32') {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    createConfigGypi({ gyp, buildDir, nodeDir, vsInfo }).then(configPath => {\n      configs.push(configPath)\n      findConfigs()\n    }).catch(err => {\n      callback(err)\n    })\n  }\n\n  function findConfigs () {\n    var name = configNames.shift()\n    if (!name) {\n      return runGyp()\n    }\n    var fullPath = path.resolve(name)\n\n    log.verbose(name, 'checking for gypi file: %s', fullPath)\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs() // check next gypi filename\n        } else {\n          callback(err)\n        }\n      } else {\n        log.verbose(name, 'found gypi file')\n        configs.push(fullPath)\n        findConfigs()\n      }\n    })\n  }\n\n  function runGyp (err) {\n    if (err) {\n      return callback(err)\n    }\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs')\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make')\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config)\n    })\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n    var nodeExpFile\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x'\n      var nodeRootDir = findNodeDirectory()\n      var candidates\n\n      if (process.platform === 'aix') {\n        candidates = [\n          'include/node/node',\n          'out/Release/node',\n          'out/Debug/node',\n          'node'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      } else {\n        candidates = [\n          'out/Release/obj.target/libnode',\n          'out/Debug/obj.target/libnode',\n          'lib/libnode'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      }\n\n      var logprefix = 'find exports file'\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates)\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        return callback(new Error(msg))\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py')\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi')\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi')\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi')\n      }\n\n      var outputDir = 'build'\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir\n      }\n      var nodeGypDir = path.resolve(__dirname, '..')\n\n      var nodeLibFile = path.join(nodeDir,\n        !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)',\n        release.name + '.lib')\n\n      argv.push('-I', addonGypi)\n      argv.push('-I', commonGypi)\n      argv.push('-Dlibrary=shared_library')\n      argv.push('-Dvisibility=default')\n      argv.push('-Dnode_root_dir=' + nodeDir)\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile)\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n\n      // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\')\n      }\n      argv.push('-Dnode_lib_file=' + nodeLibFile)\n      argv.push('-Dmodule_root_dir=' + process.cwd())\n      argv.push('-Dnode_engine=' +\n        (gyp.opts.node_engine || process.jsEngine || 'v8'))\n      argv.push('--depth=.')\n      argv.push('--no-parallel')\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', outputDir)\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.')\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp')\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gypScript)\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH)\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n      var cp = gyp.spawn(python, argv)\n      cp.on('exit', onCpExit)\n    })\n  }\n\n  function onCpExit (code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code))\n    } else {\n      // we're done\n      callback()\n    }\n  }\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync (logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next])\n    try {\n      var fd = fs.openSync(candidate, 'r')\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message)\n      continue\n    }\n    fs.closeSync(fd)\n    log.silly(logprefix, 'Found readable %s', candidate)\n    return candidate\n  }\n\n  return undefined\n}\n\nmodule.exports = configure\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n}\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module'\n"]},"metadata":{},"sourceType":"script"}