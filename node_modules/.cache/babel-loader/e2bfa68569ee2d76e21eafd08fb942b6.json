{"ast":null,"code":"'use strict'; // tar -x\n\nconst hlo = require('./high-level-opt.js');\n\nconst Unpack = require('./unpack.js');\n\nconst fs = require('fs');\n\nconst fsm = require('fs-minipass');\n\nconst path = require('path');\n\nconst stripSlash = require('./strip-trailing-slashes.js');\n\nmodule.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') {\n    cb = opt_, files = null, opt_ = {};\n  } else if (Array.isArray(opt_)) {\n    files = opt_, opt_ = {};\n  }\n\n  if (typeof files === 'function') {\n    cb = files, files = null;\n  }\n\n  if (!files) {\n    files = [];\n  } else {\n    files = Array.from(files);\n  }\n\n  const opt = hlo(opt_);\n\n  if (opt.sync && typeof cb === 'function') {\n    throw new TypeError('callback not supported for sync tar functions');\n  }\n\n  if (!opt.file && typeof cb === 'function') {\n    throw new TypeError('callback only supported with file option');\n  }\n\n  if (files.length) {\n    filesFilter(opt, files);\n  }\n\n  return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);\n}; // construct a filter that limits the file entries listed\n// include child entries if a dir is included\n\n\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [stripSlash(f), true]));\n  const filter = opt.filter;\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.';\n    const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path.dirname(file), root);\n    map.set(file, ret);\n    return ret;\n  };\n\n  opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file)) : file => mapHas(stripSlash(file));\n};\n\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt);\n  const file = opt.file;\n  const stat = fs.statSync(file); // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size\n  });\n  stream.pipe(u);\n};\n\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt);\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const file = opt.file;\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject);\n    u.on('close', resolve); // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n\n    fs.stat(file, (er, stat) => {\n      if (er) {\n        reject(er);\n      } else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        });\n        stream.on('error', reject);\n        stream.pipe(u);\n      }\n    });\n  });\n  return cb ? p.then(cb, cb) : p;\n};\n\nconst extractSync = opt => new Unpack.Sync(opt);\n\nconst extract = opt => new Unpack(opt);","map":{"version":3,"sources":["/home/dom/Videos/FlyM/node_modules/tar/lib/extract.js"],"names":["hlo","require","Unpack","fs","fsm","path","stripSlash","module","exports","opt_","files","cb","Array","isArray","from","opt","sync","TypeError","file","length","filesFilter","extractFileSync","extractFile","extractSync","extract","map","Map","f","filter","mapHas","r","root","parse","ret","has","get","dirname","set","entry","u","Sync","stat","statSync","readSize","maxReadSize","stream","ReadStreamSync","size","pipe","p","Promise","resolve","reject","on","er","ReadStream","then"],"mappings":"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","sourcesContent":["'use strict'\n\n// tar -x\nconst hlo = require('./high-level-opt.js')\nconst Unpack = require('./unpack.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nmodule.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') {\n    cb = opt_, files = null, opt_ = {}\n  } else if (Array.isArray(opt_)) {\n    files = opt_, opt_ = {}\n  }\n\n  if (typeof files === 'function') {\n    cb = files, files = null\n  }\n\n  if (!files) {\n    files = []\n  } else {\n    files = Array.from(files)\n  }\n\n  const opt = hlo(opt_)\n\n  if (opt.sync && typeof cb === 'function') {\n    throw new TypeError('callback not supported for sync tar functions')\n  }\n\n  if (!opt.file && typeof cb === 'function') {\n    throw new TypeError('callback only supported with file option')\n  }\n\n  if (files.length) {\n    filesFilter(opt, files)\n  }\n\n  return opt.file && opt.sync ? extractFileSync(opt)\n    : opt.file ? extractFile(opt, cb)\n    : opt.sync ? extractSync(opt)\n    : extract(opt)\n}\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [stripSlash(f), true]))\n  const filter = opt.filter\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.'\n    const ret = file === root ? false\n      : map.has(file) ? map.get(file)\n      : mapHas(path.dirname(file), root)\n\n    map.set(file, ret)\n    return ret\n  }\n\n  opt.filter = filter\n    ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file))\n    : file => mapHas(stripSlash(file))\n}\n\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt)\n\n  const file = opt.file\n  const stat = fs.statSync(file)\n  // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size,\n  })\n  stream.pipe(u)\n}\n\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt)\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024\n\n  const file = opt.file\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject)\n    u.on('close', resolve)\n\n    // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n    fs.stat(file, (er, stat) => {\n      if (er) {\n        reject(er)\n      } else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size,\n        })\n        stream.on('error', reject)\n        stream.pipe(u)\n      }\n    })\n  })\n  return cb ? p.then(cb, cb) : p\n}\n\nconst extractSync = opt => new Unpack.Sync(opt)\n\nconst extract = opt => new Unpack(opt)\n"]},"metadata":{},"sourceType":"script"}