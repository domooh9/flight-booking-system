{"ast":null,"code":"'use strict';\n\nconst {\n  inspect\n} = require('util'); // adapted from node's internal/errors\n// https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js\n// close copy of node's internal SystemError class.\n\n\nclass SystemError {\n  constructor(code, prefix, context) {\n    // XXX context.code is undefined in all constructors used in cp/polyfill\n    // that may be a bug copied from node, maybe the constructor should use\n    // `code` not `errno`?  nodejs/node#41104\n    let message = `${prefix}: ${context.syscall} returned ` + `${context.code} (${context.message})`;\n\n    if (context.path !== undefined) {\n      message += ` ${context.path}`;\n    }\n\n    if (context.dest !== undefined) {\n      message += ` => ${context.dest}`;\n    }\n\n    this.code = code;\n    Object.defineProperties(this, {\n      name: {\n        value: 'SystemError',\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      info: {\n        value: context,\n        enumerable: true,\n        configurable: true,\n        writable: false\n      },\n      errno: {\n        get() {\n          return context.errno;\n        },\n\n        set(value) {\n          context.errno = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      },\n      syscall: {\n        get() {\n          return context.syscall;\n        },\n\n        set(value) {\n          context.syscall = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      }\n    });\n\n    if (context.path !== undefined) {\n      Object.defineProperty(this, 'path', {\n        get() {\n          return context.path;\n        },\n\n        set(value) {\n          context.path = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      });\n    }\n\n    if (context.dest !== undefined) {\n      Object.defineProperty(this, 'dest', {\n        get() {\n          return context.dest;\n        },\n\n        set(value) {\n          context.dest = value;\n        },\n\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](_recurseTimes, ctx) {\n    return inspect(this, { ...ctx,\n      getters: true,\n      customInspect: false\n    });\n  }\n\n}\n\nfunction E(code, message) {\n  module.exports[code] = class NodeError extends SystemError {\n    constructor(ctx) {\n      super(code, message, ctx);\n    }\n\n  };\n}\n\nE('ERR_FS_CP_DIR_TO_NON_DIR', 'Cannot overwrite directory with non-directory');\nE('ERR_FS_CP_EEXIST', 'Target already exists');\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest');\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe');\nE('ERR_FS_CP_NON_DIR_TO_DIR', 'Cannot overwrite non-directory with directory');\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file');\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY', 'Cannot overwrite symlink in subdirectory of self');\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type');\nE('ERR_FS_EISDIR', 'Path is a directory');\nmodule.exports.ERR_INVALID_ARG_TYPE = class ERR_INVALID_ARG_TYPE extends Error {\n  constructor(name, expected, actual) {\n    super();\n    this.code = 'ERR_INVALID_ARG_TYPE';\n    this.message = `The ${name} argument must be ${expected}. Received ${typeof actual}`;\n  }\n\n};","map":{"version":3,"sources":["/home/dom/Videos/FlyM/node_modules/@npmcli/fs/lib/errors.js"],"names":["inspect","require","SystemError","constructor","code","prefix","context","message","syscall","path","undefined","dest","Object","defineProperties","name","value","enumerable","writable","configurable","info","errno","get","set","defineProperty","toString","Symbol","for","_recurseTimes","ctx","getters","customInspect","E","module","exports","NodeError","ERR_INVALID_ARG_TYPE","Error","expected","actual"],"mappings":"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","sourcesContent":["'use strict'\nconst { inspect } = require('util')\n\n// adapted from node's internal/errors\n// https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js\n\n// close copy of node's internal SystemError class.\nclass SystemError {\n  constructor (code, prefix, context) {\n    // XXX context.code is undefined in all constructors used in cp/polyfill\n    // that may be a bug copied from node, maybe the constructor should use\n    // `code` not `errno`?  nodejs/node#41104\n    let message = `${prefix}: ${context.syscall} returned ` +\n                  `${context.code} (${context.message})`\n\n    if (context.path !== undefined) {\n      message += ` ${context.path}`\n    }\n    if (context.dest !== undefined) {\n      message += ` => ${context.dest}`\n    }\n\n    this.code = code\n    Object.defineProperties(this, {\n      name: {\n        value: 'SystemError',\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      info: {\n        value: context,\n        enumerable: true,\n        configurable: true,\n        writable: false,\n      },\n      errno: {\n        get () {\n          return context.errno\n        },\n        set (value) {\n          context.errno = value\n        },\n        enumerable: true,\n        configurable: true,\n      },\n      syscall: {\n        get () {\n          return context.syscall\n        },\n        set (value) {\n          context.syscall = value\n        },\n        enumerable: true,\n        configurable: true,\n      },\n    })\n\n    if (context.path !== undefined) {\n      Object.defineProperty(this, 'path', {\n        get () {\n          return context.path\n        },\n        set (value) {\n          context.path = value\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n\n    if (context.dest !== undefined) {\n      Object.defineProperty(this, 'dest', {\n        get () {\n          return context.dest\n        },\n        set (value) {\n          context.dest = value\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] (_recurseTimes, ctx) {\n    return inspect(this, {\n      ...ctx,\n      getters: true,\n      customInspect: false,\n    })\n  }\n}\n\nfunction E (code, message) {\n  module.exports[code] = class NodeError extends SystemError {\n    constructor (ctx) {\n      super(code, message, ctx)\n    }\n  }\n}\n\nE('ERR_FS_CP_DIR_TO_NON_DIR', 'Cannot overwrite directory with non-directory')\nE('ERR_FS_CP_EEXIST', 'Target already exists')\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest')\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe')\nE('ERR_FS_CP_NON_DIR_TO_DIR', 'Cannot overwrite non-directory with directory')\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file')\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY', 'Cannot overwrite symlink in subdirectory of self')\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type')\nE('ERR_FS_EISDIR', 'Path is a directory')\n\nmodule.exports.ERR_INVALID_ARG_TYPE = class ERR_INVALID_ARG_TYPE extends Error {\n  constructor (name, expected, actual) {\n    super()\n    this.code = 'ERR_INVALID_ARG_TYPE'\n    this.message = `The ${name} argument must be ${expected}. Received ${typeof actual}`\n  }\n}\n"]},"metadata":{},"sourceType":"script"}