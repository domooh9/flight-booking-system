{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    throw: verb(1),\n    return: verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PrimitiveArrayClaim = void 0;\n\nvar PrimitiveArrayClaim =\n/** @class */\nfunction () {\n  function PrimitiveArrayClaim(config) {\n    var _this = this;\n\n    this.validators = {\n      includes: function (val, maxAgeInSeconds, id) {\n        if (maxAgeInSeconds === void 0) {\n          maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n        }\n\n        return {\n          id: id !== undefined ? id : _this.id,\n          refresh: function (ctx) {\n            return _this.refresh(ctx);\n          },\n          shouldRefresh: function (payload, ctx) {\n            return _this.getValueFromPayload(payload, ctx) === undefined || // We know payload[this.id] is defined since the value is not undefined in this branch\n            maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000;\n          },\n          validate: function (payload, ctx) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var claimVal, ageInSeconds;\n              return __generator(this, function (_a) {\n                claimVal = this.getValueFromPayload(payload, ctx);\n\n                if (claimVal === undefined) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"value does not exist\",\n                      expectedToInclude: val,\n                      actualValue: claimVal\n                    }\n                  }];\n                }\n\n                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n\n                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"expired\",\n                      ageInSeconds: ageInSeconds,\n                      maxAgeInSeconds: maxAgeInSeconds\n                    }\n                  }];\n                }\n\n                if (!claimVal.includes(val)) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"wrong value\",\n                      expectedToInclude: val,\n                      actualValue: claimVal\n                    }\n                  }];\n                }\n\n                return [2\n                /*return*/\n                , {\n                  isValid: true\n                }];\n              });\n            });\n          }\n        };\n      },\n      excludes: function (val, maxAgeInSeconds, id) {\n        if (maxAgeInSeconds === void 0) {\n          maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n        }\n\n        return {\n          id: id !== undefined ? id : _this.id,\n          refresh: function (ctx) {\n            return _this.refresh(ctx);\n          },\n          shouldRefresh: function (payload, ctx) {\n            return _this.getValueFromPayload(payload, ctx) === undefined || // We know payload[this.id] is defined since the value is not undefined in this branch\n            maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000;\n          },\n          validate: function (payload, ctx) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var claimVal, ageInSeconds;\n              return __generator(this, function (_a) {\n                claimVal = this.getValueFromPayload(payload, ctx);\n\n                if (claimVal === undefined) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"value does not exist\",\n                      expectedToNotInclude: val,\n                      actualValue: claimVal\n                    }\n                  }];\n                }\n\n                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n\n                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"expired\",\n                      ageInSeconds: ageInSeconds,\n                      maxAgeInSeconds: maxAgeInSeconds\n                    }\n                  }];\n                }\n\n                if (claimVal.includes(val)) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"wrong value\",\n                      expectedToNotInclude: val,\n                      actualValue: claimVal\n                    }\n                  }];\n                }\n\n                return [2\n                /*return*/\n                , {\n                  isValid: true\n                }];\n              });\n            });\n          }\n        };\n      },\n      includesAll: function (val, maxAgeInSeconds, id) {\n        if (maxAgeInSeconds === void 0) {\n          maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n        }\n\n        return {\n          id: id !== undefined ? id : _this.id,\n          refresh: function (ctx) {\n            return _this.refresh(ctx);\n          },\n          shouldRefresh: function (payload, ctx) {\n            return _this.getValueFromPayload(payload, ctx) === undefined || // We know payload[this.id] is defined since the value is not undefined in this branch\n            maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000;\n          },\n          validate: function (payload, ctx) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var claimVal, ageInSeconds, claimSet, isValid;\n              return __generator(this, function (_a) {\n                claimVal = this.getValueFromPayload(payload, ctx);\n\n                if (claimVal === undefined) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"value does not exist\",\n                      expectedToInclude: val,\n                      actualValue: claimVal\n                    }\n                  }];\n                }\n\n                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n\n                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"expired\",\n                      ageInSeconds: ageInSeconds,\n                      maxAgeInSeconds: maxAgeInSeconds\n                    }\n                  }];\n                }\n\n                claimSet = new Set(claimVal);\n                isValid = val.every(function (v) {\n                  return claimSet.has(v);\n                });\n                return [2\n                /*return*/\n                , isValid ? {\n                  isValid: isValid\n                } : {\n                  isValid: isValid,\n                  reason: {\n                    message: \"wrong value\",\n                    expectedToInclude: val,\n                    actualValue: claimVal\n                  }\n                }];\n              });\n            });\n          }\n        };\n      },\n      includesAny: function (val, maxAgeInSeconds, id) {\n        if (maxAgeInSeconds === void 0) {\n          maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n        }\n\n        return {\n          id: id !== undefined ? id : _this.id,\n          refresh: function (ctx) {\n            return _this.refresh(ctx);\n          },\n          shouldRefresh: function (payload, ctx) {\n            return _this.getValueFromPayload(payload, ctx) === undefined || // We know payload[this.id] is defined since the value is not undefined in this branch\n            maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000;\n          },\n          validate: function (payload, ctx) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var claimVal, ageInSeconds, claimSet, isValid;\n              return __generator(this, function (_a) {\n                claimVal = this.getValueFromPayload(payload, ctx);\n\n                if (claimVal === undefined) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"value does not exist\",\n                      expectedToInclude: val,\n                      actualValue: claimVal\n                    }\n                  }];\n                }\n\n                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n\n                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"expired\",\n                      ageInSeconds: ageInSeconds,\n                      maxAgeInSeconds: maxAgeInSeconds\n                    }\n                  }];\n                }\n\n                claimSet = new Set(claimVal);\n                isValid = val.some(function (v) {\n                  return claimSet.has(v);\n                });\n                return [2\n                /*return*/\n                , isValid ? {\n                  isValid: isValid\n                } : {\n                  isValid: isValid,\n                  reason: {\n                    message: \"wrong value\",\n                    expectedToIncludeAtLeastOneOf: val,\n                    actualValue: claimVal\n                  }\n                }];\n              });\n            });\n          }\n        };\n      },\n      excludesAll: function (val, maxAgeInSeconds, id) {\n        if (maxAgeInSeconds === void 0) {\n          maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n        }\n\n        return {\n          id: id !== undefined ? id : _this.id,\n          refresh: function (ctx) {\n            return _this.refresh(ctx);\n          },\n          shouldRefresh: function (payload, ctx) {\n            return _this.getValueFromPayload(payload, ctx) === undefined || // We know payload[this.id] is defined since the value is not undefined in this branch\n            maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000;\n          },\n          validate: function (payload, ctx) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var claimVal, ageInSeconds, claimSet, isValid;\n              return __generator(this, function (_a) {\n                claimVal = this.getValueFromPayload(payload, ctx);\n\n                if (claimVal === undefined) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"value does not exist\",\n                      expectedToNotInclude: val,\n                      actualValue: claimVal\n                    }\n                  }];\n                }\n\n                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n\n                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                  return [2\n                  /*return*/\n                  , {\n                    isValid: false,\n                    reason: {\n                      message: \"expired\",\n                      ageInSeconds: ageInSeconds,\n                      maxAgeInSeconds: maxAgeInSeconds\n                    }\n                  }];\n                }\n\n                claimSet = new Set(claimVal);\n                isValid = val.every(function (v) {\n                  return !claimSet.has(v);\n                });\n                return [2\n                /*return*/\n                , isValid ? {\n                  isValid: isValid\n                } : {\n                  isValid: isValid,\n                  reason: {\n                    message: \"wrong value\",\n                    expectedToNotInclude: val,\n                    actualValue: claimVal\n                  }\n                }];\n              });\n            });\n          }\n        };\n      }\n    };\n    this.id = config.id;\n    this.refresh = config.refresh;\n    this.defaultMaxAgeInSeconds = config.defaultMaxAgeInSeconds;\n  }\n\n  PrimitiveArrayClaim.prototype.getValueFromPayload = function (payload, _userContext) {\n    return payload[this.id] !== undefined ? payload[this.id].v : undefined;\n  };\n\n  PrimitiveArrayClaim.prototype.getLastFetchedTime = function (payload, _userContext) {\n    return payload[this.id] !== undefined ? payload[this.id].t : undefined;\n  };\n\n  return PrimitiveArrayClaim;\n}();\n\nexports.PrimitiveArrayClaim = PrimitiveArrayClaim;","map":{"version":3,"sources":["/home/dom/FlyM/node_modules/supertokens-website/lib/build/claims/primitiveArrayClaim.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","defineProperty","exports","PrimitiveArrayClaim","config","_this","validators","includes","val","maxAgeInSeconds","id","defaultMaxAgeInSeconds","undefined","refresh","ctx","shouldRefresh","payload","getValueFromPayload","Date","now","validate","claimVal","ageInSeconds","_a","isValid","reason","message","expectedToInclude","actualValue","getLastFetchedTime","excludes","expectedToNotInclude","includesAll","claimSet","Set","every","has","includesAny","some","expectedToIncludeAtLeastOneOf","excludesAll","prototype","_userContext"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter =\n    (this && this.__awaiter) ||\n    function (thisArg, _arguments, P, generator) {\n        function adopt(value) {\n            return value instanceof P\n                ? value\n                : new P(function (resolve) {\n                      resolve(value);\n                  });\n        }\n        return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n                try {\n                    step(generator.next(value));\n                } catch (e) {\n                    reject(e);\n                }\n            }\n            function rejected(value) {\n                try {\n                    step(generator[\"throw\"](value));\n                } catch (e) {\n                    reject(e);\n                }\n            }\n            function step(result) {\n                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n    };\nvar __generator =\n    (this && this.__generator) ||\n    function (thisArg, body) {\n        var _ = {\n                label: 0,\n                sent: function () {\n                    if (t[0] & 1) throw t[1];\n                    return t[1];\n                },\n                trys: [],\n                ops: []\n            },\n            f,\n            y,\n            t,\n            g;\n        return (\n            (g = { next: verb(0), throw: verb(1), return: verb(2) }),\n            typeof Symbol === \"function\" &&\n                (g[Symbol.iterator] = function () {\n                    return this;\n                }),\n            g\n        );\n        function verb(n) {\n            return function (v) {\n                return step([n, v]);\n            };\n        }\n        function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n            while (_)\n                try {\n                    if (\n                        ((f = 1),\n                        y &&\n                            (t =\n                                op[0] & 2\n                                    ? y[\"return\"]\n                                    : op[0]\n                                    ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0)\n                                    : y.next) &&\n                            !(t = t.call(y, op[1])).done)\n                    )\n                        return t;\n                    if (((y = 0), t)) op = [op[0] & 2, t.value];\n                    switch (op[0]) {\n                        case 0:\n                        case 1:\n                            t = op;\n                            break;\n                        case 4:\n                            _.label++;\n                            return { value: op[1], done: false };\n                        case 5:\n                            _.label++;\n                            y = op[1];\n                            op = [0];\n                            continue;\n                        case 7:\n                            op = _.ops.pop();\n                            _.trys.pop();\n                            continue;\n                        default:\n                            if (\n                                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&\n                                (op[0] === 6 || op[0] === 2)\n                            ) {\n                                _ = 0;\n                                continue;\n                            }\n                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                                _.label = op[1];\n                                break;\n                            }\n                            if (op[0] === 6 && _.label < t[1]) {\n                                _.label = t[1];\n                                t = op;\n                                break;\n                            }\n                            if (t && _.label < t[2]) {\n                                _.label = t[2];\n                                _.ops.push(op);\n                                break;\n                            }\n                            if (t[2]) _.ops.pop();\n                            _.trys.pop();\n                            continue;\n                    }\n                    op = body.call(thisArg, _);\n                } catch (e) {\n                    op = [6, e];\n                    y = 0;\n                } finally {\n                    f = t = 0;\n                }\n            if (op[0] & 5) throw op[1];\n            return { value: op[0] ? op[1] : void 0, done: true };\n        }\n    };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PrimitiveArrayClaim = void 0;\nvar PrimitiveArrayClaim = /** @class */ (function () {\n    function PrimitiveArrayClaim(config) {\n        var _this = this;\n        this.validators = {\n            includes: function (val, maxAgeInSeconds, id) {\n                if (maxAgeInSeconds === void 0) {\n                    maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n                }\n                return {\n                    id: id !== undefined ? id : _this.id,\n                    refresh: function (ctx) {\n                        return _this.refresh(ctx);\n                    },\n                    shouldRefresh: function (payload, ctx) {\n                        return (\n                            _this.getValueFromPayload(payload, ctx) === undefined ||\n                            // We know payload[this.id] is defined since the value is not undefined in this branch\n                            (maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000)\n                        );\n                    },\n                    validate: function (payload, ctx) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                            var claimVal, ageInSeconds;\n                            return __generator(this, function (_a) {\n                                claimVal = this.getValueFromPayload(payload, ctx);\n                                if (claimVal === undefined) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"value does not exist\",\n                                                expectedToInclude: val,\n                                                actualValue: claimVal\n                                            }\n                                        }\n                                    ];\n                                }\n                                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n                                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"expired\",\n                                                ageInSeconds: ageInSeconds,\n                                                maxAgeInSeconds: maxAgeInSeconds\n                                            }\n                                        }\n                                    ];\n                                }\n                                if (!claimVal.includes(val)) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"wrong value\",\n                                                expectedToInclude: val,\n                                                actualValue: claimVal\n                                            }\n                                        }\n                                    ];\n                                }\n                                return [2 /*return*/, { isValid: true }];\n                            });\n                        });\n                    }\n                };\n            },\n            excludes: function (val, maxAgeInSeconds, id) {\n                if (maxAgeInSeconds === void 0) {\n                    maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n                }\n                return {\n                    id: id !== undefined ? id : _this.id,\n                    refresh: function (ctx) {\n                        return _this.refresh(ctx);\n                    },\n                    shouldRefresh: function (payload, ctx) {\n                        return (\n                            _this.getValueFromPayload(payload, ctx) === undefined ||\n                            // We know payload[this.id] is defined since the value is not undefined in this branch\n                            (maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000)\n                        );\n                    },\n                    validate: function (payload, ctx) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                            var claimVal, ageInSeconds;\n                            return __generator(this, function (_a) {\n                                claimVal = this.getValueFromPayload(payload, ctx);\n                                if (claimVal === undefined) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"value does not exist\",\n                                                expectedToNotInclude: val,\n                                                actualValue: claimVal\n                                            }\n                                        }\n                                    ];\n                                }\n                                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n                                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"expired\",\n                                                ageInSeconds: ageInSeconds,\n                                                maxAgeInSeconds: maxAgeInSeconds\n                                            }\n                                        }\n                                    ];\n                                }\n                                if (claimVal.includes(val)) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"wrong value\",\n                                                expectedToNotInclude: val,\n                                                actualValue: claimVal\n                                            }\n                                        }\n                                    ];\n                                }\n                                return [2 /*return*/, { isValid: true }];\n                            });\n                        });\n                    }\n                };\n            },\n            includesAll: function (val, maxAgeInSeconds, id) {\n                if (maxAgeInSeconds === void 0) {\n                    maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n                }\n                return {\n                    id: id !== undefined ? id : _this.id,\n                    refresh: function (ctx) {\n                        return _this.refresh(ctx);\n                    },\n                    shouldRefresh: function (payload, ctx) {\n                        return (\n                            _this.getValueFromPayload(payload, ctx) === undefined ||\n                            // We know payload[this.id] is defined since the value is not undefined in this branch\n                            (maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000)\n                        );\n                    },\n                    validate: function (payload, ctx) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                            var claimVal, ageInSeconds, claimSet, isValid;\n                            return __generator(this, function (_a) {\n                                claimVal = this.getValueFromPayload(payload, ctx);\n                                if (claimVal === undefined) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"value does not exist\",\n                                                expectedToInclude: val,\n                                                actualValue: claimVal\n                                            }\n                                        }\n                                    ];\n                                }\n                                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n                                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"expired\",\n                                                ageInSeconds: ageInSeconds,\n                                                maxAgeInSeconds: maxAgeInSeconds\n                                            }\n                                        }\n                                    ];\n                                }\n                                claimSet = new Set(claimVal);\n                                isValid = val.every(function (v) {\n                                    return claimSet.has(v);\n                                });\n                                return [\n                                    2 /*return*/,\n                                    isValid\n                                        ? { isValid: isValid }\n                                        : {\n                                              isValid: isValid,\n                                              reason: {\n                                                  message: \"wrong value\",\n                                                  expectedToInclude: val,\n                                                  actualValue: claimVal\n                                              }\n                                          }\n                                ];\n                            });\n                        });\n                    }\n                };\n            },\n            includesAny: function (val, maxAgeInSeconds, id) {\n                if (maxAgeInSeconds === void 0) {\n                    maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n                }\n                return {\n                    id: id !== undefined ? id : _this.id,\n                    refresh: function (ctx) {\n                        return _this.refresh(ctx);\n                    },\n                    shouldRefresh: function (payload, ctx) {\n                        return (\n                            _this.getValueFromPayload(payload, ctx) === undefined ||\n                            // We know payload[this.id] is defined since the value is not undefined in this branch\n                            (maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000)\n                        );\n                    },\n                    validate: function (payload, ctx) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                            var claimVal, ageInSeconds, claimSet, isValid;\n                            return __generator(this, function (_a) {\n                                claimVal = this.getValueFromPayload(payload, ctx);\n                                if (claimVal === undefined) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"value does not exist\",\n                                                expectedToInclude: val,\n                                                actualValue: claimVal\n                                            }\n                                        }\n                                    ];\n                                }\n                                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n                                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"expired\",\n                                                ageInSeconds: ageInSeconds,\n                                                maxAgeInSeconds: maxAgeInSeconds\n                                            }\n                                        }\n                                    ];\n                                }\n                                claimSet = new Set(claimVal);\n                                isValid = val.some(function (v) {\n                                    return claimSet.has(v);\n                                });\n                                return [\n                                    2 /*return*/,\n                                    isValid\n                                        ? { isValid: isValid }\n                                        : {\n                                              isValid: isValid,\n                                              reason: {\n                                                  message: \"wrong value\",\n                                                  expectedToIncludeAtLeastOneOf: val,\n                                                  actualValue: claimVal\n                                              }\n                                          }\n                                ];\n                            });\n                        });\n                    }\n                };\n            },\n            excludesAll: function (val, maxAgeInSeconds, id) {\n                if (maxAgeInSeconds === void 0) {\n                    maxAgeInSeconds = _this.defaultMaxAgeInSeconds;\n                }\n                return {\n                    id: id !== undefined ? id : _this.id,\n                    refresh: function (ctx) {\n                        return _this.refresh(ctx);\n                    },\n                    shouldRefresh: function (payload, ctx) {\n                        return (\n                            _this.getValueFromPayload(payload, ctx) === undefined ||\n                            // We know payload[this.id] is defined since the value is not undefined in this branch\n                            (maxAgeInSeconds !== undefined && payload[_this.id].t < Date.now() - maxAgeInSeconds * 1000)\n                        );\n                    },\n                    validate: function (payload, ctx) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                            var claimVal, ageInSeconds, claimSet, isValid;\n                            return __generator(this, function (_a) {\n                                claimVal = this.getValueFromPayload(payload, ctx);\n                                if (claimVal === undefined) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"value does not exist\",\n                                                expectedToNotInclude: val,\n                                                actualValue: claimVal\n                                            }\n                                        }\n                                    ];\n                                }\n                                ageInSeconds = (Date.now() - this.getLastFetchedTime(payload, ctx)) / 1000;\n                                if (maxAgeInSeconds !== undefined && ageInSeconds > maxAgeInSeconds) {\n                                    return [\n                                        2 /*return*/,\n                                        {\n                                            isValid: false,\n                                            reason: {\n                                                message: \"expired\",\n                                                ageInSeconds: ageInSeconds,\n                                                maxAgeInSeconds: maxAgeInSeconds\n                                            }\n                                        }\n                                    ];\n                                }\n                                claimSet = new Set(claimVal);\n                                isValid = val.every(function (v) {\n                                    return !claimSet.has(v);\n                                });\n                                return [\n                                    2 /*return*/,\n                                    isValid\n                                        ? { isValid: isValid }\n                                        : {\n                                              isValid: isValid,\n                                              reason: {\n                                                  message: \"wrong value\",\n                                                  expectedToNotInclude: val,\n                                                  actualValue: claimVal\n                                              }\n                                          }\n                                ];\n                            });\n                        });\n                    }\n                };\n            }\n        };\n        this.id = config.id;\n        this.refresh = config.refresh;\n        this.defaultMaxAgeInSeconds = config.defaultMaxAgeInSeconds;\n    }\n    PrimitiveArrayClaim.prototype.getValueFromPayload = function (payload, _userContext) {\n        return payload[this.id] !== undefined ? payload[this.id].v : undefined;\n    };\n    PrimitiveArrayClaim.prototype.getLastFetchedTime = function (payload, _userContext) {\n        return payload[this.id] !== undefined ? payload[this.id].t : undefined;\n    };\n    return PrimitiveArrayClaim;\n})();\nexports.PrimitiveArrayClaim = PrimitiveArrayClaim;\n"]},"metadata":{},"sourceType":"script"}