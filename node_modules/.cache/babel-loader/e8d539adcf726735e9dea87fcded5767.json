{"ast":null,"code":"'use strict'; // tar -u\n\nconst hlo = require('./high-level-opt.js');\n\nconst r = require('./replace.js'); // just call tar.r with the filter and mtimeCache\n\n\nmodule.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_);\n\n  if (!opt.file) {\n    throw new TypeError('file is required');\n  }\n\n  if (opt.gzip) {\n    throw new TypeError('cannot append to compressed archives');\n  }\n\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified');\n  }\n\n  files = Array.from(files);\n  mtimeFilter(opt);\n  return r(opt, files, cb);\n};\n\nconst mtimeFilter = opt => {\n  const filter = opt.filter;\n\n  if (!opt.mtimeCache) {\n    opt.mtimeCache = new Map();\n  }\n\n  opt.filter = filter ? (path, stat) => filter(path, stat) && !(opt.mtimeCache.get(path) > stat.mtime) : (path, stat) => !(opt.mtimeCache.get(path) > stat.mtime);\n};","map":{"version":3,"sources":["/home/dom/Videos/FlyM/node_modules/tar/lib/update.js"],"names":["hlo","require","r","module","exports","opt_","files","cb","opt","file","TypeError","gzip","Array","isArray","length","from","mtimeFilter","filter","mtimeCache","Map","path","stat","get","mtime"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,cAAD,CAAjB,C,CACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,KAAP,EAAcC,EAAd,KAAqB;AACpC,QAAMC,GAAG,GAAGR,GAAG,CAACK,IAAD,CAAf;;AAEA,MAAI,CAACG,GAAG,CAACC,IAAT,EAAe;AACb,UAAM,IAAIC,SAAJ,CAAc,kBAAd,CAAN;AACD;;AAED,MAAIF,GAAG,CAACG,IAAR,EAAc;AACZ,UAAM,IAAID,SAAJ,CAAc,sCAAd,CAAN;AACD;;AAED,MAAI,CAACJ,KAAD,IAAU,CAACM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAX,IAAmC,CAACA,KAAK,CAACQ,MAA9C,EAAsD;AACpD,UAAM,IAAIJ,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAEDJ,EAAAA,KAAK,GAAGM,KAAK,CAACG,IAAN,CAAWT,KAAX,CAAR;AAEAU,EAAAA,WAAW,CAACR,GAAD,CAAX;AACA,SAAON,CAAC,CAACM,GAAD,EAAMF,KAAN,EAAaC,EAAb,CAAR;AACD,CAnBD;;AAqBA,MAAMS,WAAW,GAAGR,GAAG,IAAI;AACzB,QAAMS,MAAM,GAAGT,GAAG,CAACS,MAAnB;;AAEA,MAAI,CAACT,GAAG,CAACU,UAAT,EAAqB;AACnBV,IAAAA,GAAG,CAACU,UAAJ,GAAiB,IAAIC,GAAJ,EAAjB;AACD;;AAEDX,EAAAA,GAAG,CAACS,MAAJ,GAAaA,MAAM,GAAG,CAACG,IAAD,EAAOC,IAAP,KACpBJ,MAAM,CAACG,IAAD,EAAOC,IAAP,CAAN,IAAsB,EAAEb,GAAG,CAACU,UAAJ,CAAeI,GAAf,CAAmBF,IAAnB,IAA2BC,IAAI,CAACE,KAAlC,CADL,GAEf,CAACH,IAAD,EAAOC,IAAP,KAAgB,EAAEb,GAAG,CAACU,UAAJ,CAAeI,GAAf,CAAmBF,IAAnB,IAA2BC,IAAI,CAACE,KAAlC,CAFpB;AAGD,CAVD","sourcesContent":["'use strict'\n\n// tar -u\n\nconst hlo = require('./high-level-opt.js')\nconst r = require('./replace.js')\n// just call tar.r with the filter and mtimeCache\n\nmodule.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_)\n\n  if (!opt.file) {\n    throw new TypeError('file is required')\n  }\n\n  if (opt.gzip) {\n    throw new TypeError('cannot append to compressed archives')\n  }\n\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified')\n  }\n\n  files = Array.from(files)\n\n  mtimeFilter(opt)\n  return r(opt, files, cb)\n}\n\nconst mtimeFilter = opt => {\n  const filter = opt.filter\n\n  if (!opt.mtimeCache) {\n    opt.mtimeCache = new Map()\n  }\n\n  opt.filter = filter ? (path, stat) =>\n    filter(path, stat) && !(opt.mtimeCache.get(path) > stat.mtime)\n    : (path, stat) => !(opt.mtimeCache.get(path) > stat.mtime)\n}\n"]},"metadata":{},"sourceType":"script"}