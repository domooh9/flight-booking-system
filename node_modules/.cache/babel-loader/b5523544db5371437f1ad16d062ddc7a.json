{"ast":null,"code":"/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n  if (!/^data:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  } // strip newlines\n\n\n  uri = uri.replace(/\\r?\\n/g, ''); // split the URI up into the \"metadata\" and the \"data\" portions\n\n  const firstComma = uri.indexOf(',');\n\n  if (firstComma === -1 || firstComma <= 4) {\n    throw new TypeError('malformed data: URI');\n  } // remove the \"data:\" scheme and parse the metadata\n\n\n  const meta = uri.substring(5, firstComma).split(';');\n  let charset = '';\n  let base64 = false;\n  const type = meta[0] || 'text/plain';\n  let typeFull = type;\n\n  for (let i = 1; i < meta.length; i++) {\n    if (meta[i] === 'base64') {\n      base64 = true;\n    } else if (meta[i]) {\n      typeFull += `;${meta[i]}`;\n\n      if (meta[i].indexOf('charset=') === 0) {\n        charset = meta[i].substring(8);\n      }\n    }\n  } // defaults to US-ASCII only if type is not provided\n\n\n  if (!meta[0] && !charset.length) {\n    typeFull += ';charset=US-ASCII';\n    charset = 'US-ASCII';\n  } // get the encoded data portion and decode URI-encoded chars\n\n\n  const encoding = base64 ? 'base64' : 'ascii';\n  const data = unescape(uri.substring(firstComma + 1));\n  const buffer = Buffer.from(data, encoding); // set `.type` and `.typeFull` properties to MIME type\n\n  buffer.type = type;\n  buffer.typeFull = typeFull; // set the `.charset` property\n\n  buffer.charset = charset;\n  return buffer;\n}\nexport default dataUriToBuffer;","map":{"version":3,"mappings":"AAMA;;;;;;;AAOA,OAAM,SAAUA,eAAV,CAA0BC,GAA1B,EAAqC;AAC1C,MAAI,CAAC,UAAUC,IAAV,CAAeD,GAAf,CAAL,EAA0B;AACzB,UAAM,IAAIE,SAAJ,CACL,kEADK,CAAN;AAGA,GALyC,CAO1C;;;AACAF,KAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAN,CAR0C,CAU1C;;AACA,QAAMC,UAAU,GAAGJ,GAAG,CAACK,OAAJ,CAAY,GAAZ,CAAnB;;AACA,MAAID,UAAU,KAAK,CAAC,CAAhB,IAAqBA,UAAU,IAAI,CAAvC,EAA0C;AACzC,UAAM,IAAIF,SAAJ,CAAc,qBAAd,CAAN;AACA,GAdyC,CAgB1C;;;AACA,QAAMI,IAAI,GAAGN,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAiBH,UAAjB,EAA6BI,KAA7B,CAAmC,GAAnC,CAAb;AAEA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAG,KAAb;AACA,QAAMC,IAAI,GAAGL,IAAI,CAAC,CAAD,CAAJ,IAAW,YAAxB;AACA,MAAIM,QAAQ,GAAGD,IAAf;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrC,QAAIP,IAAI,CAACO,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACzBH,YAAM,GAAG,IAAT;AACA,KAFD,MAEO,IAAGJ,IAAI,CAACO,CAAD,CAAP,EAAY;AAClBD,cAAQ,IAAI,IAAMN,IAAI,CAACO,CAAD,CAAG,EAAzB;;AACA,UAAIP,IAAI,CAACO,CAAD,CAAJ,CAAQR,OAAR,CAAgB,UAAhB,MAAgC,CAApC,EAAuC;AACtCI,eAAO,GAAGH,IAAI,CAACO,CAAD,CAAJ,CAAQN,SAAR,CAAkB,CAAlB,CAAV;AACA;AACD;AACD,GAhCyC,CAiC1C;;;AACA,MAAI,CAACD,IAAI,CAAC,CAAD,CAAL,IAAY,CAACG,OAAO,CAACK,MAAzB,EAAiC;AAChCF,YAAQ,IAAI,mBAAZ;AACAH,WAAO,GAAG,UAAV;AACA,GArCyC,CAuC1C;;;AACA,QAAMM,QAAQ,GAAGL,MAAM,GAAG,QAAH,GAAc,OAArC;AACA,QAAMM,IAAI,GAAGC,QAAQ,CAACjB,GAAG,CAACO,SAAJ,CAAcH,UAAU,GAAG,CAA3B,CAAD,CAArB;AACA,QAAMc,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBD,QAAlB,CAAf,CA1C0C,CA4C1C;;AACAG,QAAM,CAACP,IAAP,GAAcA,IAAd;AACAO,QAAM,CAACN,QAAP,GAAkBA,QAAlB,CA9C0C,CAgD1C;;AACAM,QAAM,CAACT,OAAP,GAAiBA,OAAjB;AAEA,SAAOS,MAAP;AACA;AAED,eAAenB,eAAf","names":["dataUriToBuffer","uri","test","TypeError","replace","firstComma","indexOf","meta","substring","split","charset","base64","type","typeFull","i","length","encoding","data","unescape","buffer","Buffer","from"],"sources":["/home/dom/Videos/FlyM/node_modules/data-uri-to-buffer/src/index.ts"],"sourcesContent":["export interface MimeBuffer extends Buffer {\n\ttype: string;\n\ttypeFull: string;\n\tcharset: string;\n}\n\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri: string): MimeBuffer {\n\tif (!/^data:/i.test(uri)) {\n\t\tthrow new TypeError(\n\t\t\t'`uri` does not appear to be a Data URI (must begin with \"data:\")'\n\t\t);\n\t}\n\n\t// strip newlines\n\turi = uri.replace(/\\r?\\n/g, '');\n\n\t// split the URI up into the \"metadata\" and the \"data\" portions\n\tconst firstComma = uri.indexOf(',');\n\tif (firstComma === -1 || firstComma <= 4) {\n\t\tthrow new TypeError('malformed data: URI');\n\t}\n\n\t// remove the \"data:\" scheme and parse the metadata\n\tconst meta = uri.substring(5, firstComma).split(';');\n\n\tlet charset = '';\n\tlet base64 = false;\n\tconst type = meta[0] || 'text/plain';\n\tlet typeFull = type;\n\tfor (let i = 1; i < meta.length; i++) {\n\t\tif (meta[i] === 'base64') {\n\t\t\tbase64 = true;\n\t\t} else if(meta[i]) {\n\t\t\ttypeFull += `;${  meta[i]}`;\n\t\t\tif (meta[i].indexOf('charset=') === 0) {\n\t\t\t\tcharset = meta[i].substring(8);\n\t\t\t}\n\t\t}\n\t}\n\t// defaults to US-ASCII only if type is not provided\n\tif (!meta[0] && !charset.length) {\n\t\ttypeFull += ';charset=US-ASCII';\n\t\tcharset = 'US-ASCII';\n\t}\n\n\t// get the encoded data portion and decode URI-encoded chars\n\tconst encoding = base64 ? 'base64' : 'ascii';\n\tconst data = unescape(uri.substring(firstComma + 1));\n\tconst buffer = Buffer.from(data, encoding) as MimeBuffer;\n\n\t// set `.type` and `.typeFull` properties to MIME type\n\tbuffer.type = type;\n\tbuffer.typeFull = typeFull;\n\n\t// set the `.charset` property\n\tbuffer.charset = charset;\n\n\treturn buffer;\n}\n\nexport default dataUriToBuffer;\n"]},"metadata":{},"sourceType":"module"}