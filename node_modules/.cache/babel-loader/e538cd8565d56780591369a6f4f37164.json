{"ast":null,"code":"import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\";\nimport { v4 as uuid } from \"uuid\";\nconst firebaseApp = firebase.initializeApp({\n  apiKey: import.meta.env.VITE_DUMMYGRAM_APIKEY,\n  authDomain: import.meta.env.VITE_DUMMYGRAM_AUTHDOMAIN,\n  projectId: import.meta.env.VITE_DUMMYGRAM_PROJECTID,\n  storageBucket: import.meta.env.VITE_DUMMYGRAM_STORAGEBUCKET,\n  messagingSenderId: import.meta.env.VITE_DUMMYGRAM_MESSAGINGSENDERID,\n  appId: import.meta.env.VITE_DUMMYGRAM_APPID,\n  measurementId: import.meta.env.VITE_DUMMYGRAM_MEASUREMENTID\n}); // Use these for db & auth\n// console.log(\"api key = \", import.meta.env);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n/**\n *\n * @param {File[]} files\n * @param {{\n *   storageLocation: string,\n *   onUploadProgress: (percentage: number) => void\n * }} options\n */\n\nfunction handleMultiUpload(files) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  const _options = Object.assign({\n    storageLocation: \"images\",\n\n    /**\n     *\n     * @param {number} _percentage\n     */\n    onUploadProgress: _percentage => {},\n    generateThumbnails: false\n  }, options);\n\n  let totalSize = 0;\n  let totalUploaded = 0;\n  const uploadPromises = files.map(file => {\n    const fileName = uuid() + \".\" + file.name.split(\".\").pop();\n    return new Promise((resolve, reject) => {\n      const task = storage.ref(`${_options.storageLocation}/${fileName}`).put(file);\n      /** @type {null|number} */\n\n      let currUploadTotalSize = null;\n      /** @type {null|number} */\n\n      let lastUploadedSize = null;\n      task.on(\"state_changed\", snapshot => {\n        var _lastUploadedSize;\n\n        if (currUploadTotalSize === null) {\n          totalSize += snapshot.totalBytes;\n          currUploadTotalSize = snapshot.totalBytes;\n        }\n\n        totalUploaded -= (_lastUploadedSize = lastUploadedSize) !== null && _lastUploadedSize !== void 0 ? _lastUploadedSize : 0;\n        totalUploaded += snapshot.bytesTransferred;\n        lastUploadedSize = snapshot.bytesTransferred;\n\n        _options.onUploadProgress(Math.round(totalUploaded / totalSize * 100));\n      }, error => {\n        if (currUploadTotalSize !== null) {\n          totalSize -= currUploadTotalSize;\n        }\n\n        if (lastUploadedSize !== null) {\n          totalUploaded -= lastUploadedSize;\n        }\n\n        reject(error);\n      }, () => {\n        storage.ref(_options.storageLocation).child(fileName).getDownloadURL().then(url => {\n          if (_options.generateThumbnails) {\n            const thumbnailScale = 1 / 10;\n            const image = new Image();\n            image.src = URL.createObjectURL(file);\n            image.addEventListener(\"load\", () => {\n              const canvas = document.createElement(\"canvas\");\n              canvas.width = image.naturalWidth * thumbnailScale;\n              canvas.height = image.naturalHeight * thumbnailScale;\n              canvas.getContext(\"2d\").drawImage(image, 0, 0, canvas.width, canvas.height);\n              resolve({\n                thumbnail: canvas.toDataURL(),\n                imageWidth: image.naturalWidth,\n                imageHeight: image.naturalHeight,\n                imageUrl: url\n              });\n            });\n            image.addEventListener(\"error\", () => {\n              resolve({\n                imageUrl: url,\n                thumbnail: null,\n                imageWidth: 0,\n                imageHeight: 0\n              });\n            });\n          } else {\n            resolve(url);\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    });\n  });\n  return new Promise((resolve, reject) => {\n    Promise.all(uploadPromises).then(uploads => {\n      resolve(uploads);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n\nexport { db, auth, storage, handleMultiUpload };\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();","map":{"version":3,"sources":["/home/dom/FlyM/src/components/Firebase.js"],"names":["firebase","v4","uuid","firebaseApp","initializeApp","apiKey","import","meta","env","VITE_DUMMYGRAM_APIKEY","authDomain","VITE_DUMMYGRAM_AUTHDOMAIN","projectId","VITE_DUMMYGRAM_PROJECTID","storageBucket","VITE_DUMMYGRAM_STORAGEBUCKET","messagingSenderId","VITE_DUMMYGRAM_MESSAGINGSENDERID","appId","VITE_DUMMYGRAM_APPID","measurementId","VITE_DUMMYGRAM_MEASUREMENTID","db","firestore","auth","storage","handleMultiUpload","files","options","_options","Object","assign","storageLocation","onUploadProgress","_percentage","generateThumbnails","totalSize","totalUploaded","uploadPromises","map","file","fileName","name","split","pop","Promise","resolve","reject","task","ref","put","currUploadTotalSize","lastUploadedSize","on","snapshot","totalBytes","bytesTransferred","Math","round","error","child","getDownloadURL","then","url","thumbnailScale","image","Image","src","URL","createObjectURL","addEventListener","canvas","document","createElement","width","naturalWidth","height","naturalHeight","getContext","drawImage","thumbnail","toDataURL","imageWidth","imageHeight","imageUrl","catch","all","uploads","googleProvider","GoogleAuthProvider","facebookProvider","FacebookAuthProvider"],"mappings":"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","sourcesContent":["import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\";\nimport { v4 as uuid } from \"uuid\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: import.meta.env.VITE_DUMMYGRAM_APIKEY,\n  authDomain: import.meta.env.VITE_DUMMYGRAM_AUTHDOMAIN,\n  projectId: import.meta.env.VITE_DUMMYGRAM_PROJECTID,\n  storageBucket: import.meta.env.VITE_DUMMYGRAM_STORAGEBUCKET,\n  messagingSenderId: import.meta.env.VITE_DUMMYGRAM_MESSAGINGSENDERID,\n  appId: import.meta.env.VITE_DUMMYGRAM_APPID,\n  measurementId: import.meta.env.VITE_DUMMYGRAM_MEASUREMENTID,\n});\n\n// Use these for db & auth\n// console.log(\"api key = \", import.meta.env);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n/**\n *\n * @param {File[]} files\n * @param {{\n *   storageLocation: string,\n *   onUploadProgress: (percentage: number) => void\n * }} options\n */\nfunction handleMultiUpload(files, options = {}) {\n  const _options = Object.assign(\n    {\n      storageLocation: \"images\",\n      /**\n       *\n       * @param {number} _percentage\n       */\n      onUploadProgress: (_percentage) => {},\n      generateThumbnails: false,\n    },\n    options\n  );\n\n  let totalSize = 0;\n  let totalUploaded = 0;\n\n  const uploadPromises = files.map((file) => {\n    const fileName = uuid() + \".\" + file.name.split(\".\").pop();\n    return new Promise((resolve, reject) => {\n      const task = storage\n        .ref(`${_options.storageLocation}/${fileName}`)\n        .put(file);\n\n      /** @type {null|number} */\n      let currUploadTotalSize = null;\n      /** @type {null|number} */\n      let lastUploadedSize = null;\n\n      task.on(\n        \"state_changed\",\n        (snapshot) => {\n          if (currUploadTotalSize === null) {\n            totalSize += snapshot.totalBytes;\n            currUploadTotalSize = snapshot.totalBytes;\n          }\n\n          totalUploaded -= lastUploadedSize ?? 0;\n          totalUploaded += snapshot.bytesTransferred;\n\n          lastUploadedSize = snapshot.bytesTransferred;\n\n          _options.onUploadProgress(\n            Math.round((totalUploaded / totalSize) * 100)\n          );\n        },\n        (error) => {\n          if (currUploadTotalSize !== null) {\n            totalSize -= currUploadTotalSize;\n          }\n\n          if (lastUploadedSize !== null) {\n            totalUploaded -= lastUploadedSize;\n          }\n\n          reject(error);\n        },\n        () => {\n          storage\n            .ref(_options.storageLocation)\n            .child(fileName)\n            .getDownloadURL()\n            .then((url) => {\n              if (_options.generateThumbnails) {\n                const thumbnailScale = 1 / 10;\n\n                const image = new Image();\n                image.src = URL.createObjectURL(file);\n\n                image.addEventListener(\"load\", () => {\n                  const canvas = document.createElement(\"canvas\");\n                  canvas.width = image.naturalWidth * thumbnailScale;\n                  canvas.height = image.naturalHeight * thumbnailScale;\n\n                  canvas\n                    .getContext(\"2d\")\n                    .drawImage(image, 0, 0, canvas.width, canvas.height);\n\n                  resolve({\n                    thumbnail: canvas.toDataURL(),\n                    imageWidth: image.naturalWidth,\n                    imageHeight: image.naturalHeight,\n                    imageUrl: url,\n                  });\n                });\n\n                image.addEventListener(\"error\", () => {\n                  resolve({\n                    imageUrl: url,\n                    thumbnail: null,\n                    imageWidth: 0,\n                    imageHeight: 0,\n                  });\n                });\n              } else {\n                resolve(url);\n              }\n            })\n            .catch((error) => {\n              reject(error);\n            });\n        }\n      );\n    });\n  });\n\n  return new Promise((resolve, reject) => {\n    Promise.all(uploadPromises)\n      .then((uploads) => {\n        resolve(uploads);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n\nexport { db, auth, storage, handleMultiUpload };\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();"]},"metadata":{},"sourceType":"module"}