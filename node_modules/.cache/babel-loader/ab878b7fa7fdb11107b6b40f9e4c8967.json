{"ast":null,"code":"\"use strict\";\n\nvar sessionAuth = require(\"./session-shared.js\");\n\nvar jsxRuntime = require(\"react/jsx-runtime\");\n\nvar translations = require(\"./translations.js\");\n\nvar NormalisedURLPath = require(\"supertokens-web-js/utils/normalisedURLPath\");\n\nvar utils = require(\"./authRecipe-shared.js\");\n\nvar React = require(\"react\");\n\nvar translations$1 = require(\"./emailverification-shared.js\");\n\nvar translationContext = require(\"./translationContext.js\");\n\nrequire(\"./index.js\");\n\nvar validators = require(\"./emailpassword-shared3.js\");\n\nvar STGeneralError = require(\"supertokens-web-js/utils/error\");\n\nvar button = require(\"./emailpassword-shared.js\");\n\nvar recipeImplementation = require(\"supertokens-web-js/recipe/emailpassword/recipeImplementation\");\n\nfunction _interopDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== \"default\") {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar NormalisedURLPath__default = /*#__PURE__*/_interopDefault(NormalisedURLPath);\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nvar STGeneralError__default = /*#__PURE__*/_interopDefault(STGeneralError);\n\nvar _a = translations.createGenericComponentsOverrideContext(),\n    useContext = _a[0],\n    Provider = _a[1];\n/* Copyright (c) 2021, VRAI Labs and/or its affiliates. All rights reserved.\n *\n * This software is licensed under the Apache License, Version 2.0 (the\n * \"License\") as published by the Apache Software Foundation.\n *\n * You may not use this file except in compliance with the License. You may\n * obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Imports.\n */\n\n/*\n * Component.\n */\n\n\nfunction HeavyArrowLeftIcon(_a) {\n  var color = _a.color;\n  return jsxRuntime.jsx(\"svg\", sessionAuth.__assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"16\",\n    height: \"13\",\n    viewBox: \"0 0 16 13\",\n    \"data-supertokens\": \"heavyArrowLeftIcon\"\n  }, {\n    children: jsxRuntime.jsx(\"path\", {\n      fill: color,\n      d: \"M13 6.8h.022H3.8l2.9 2.9a.761.761 0 0 1 0 1.07l-.451.451a.754.754 0 0 1-1.064 0L.22 6.254a.759.759 0 0 1 0-1.068L5.186.22a.755.755 0 0 1 1.064 0l.45.451a.746.746 0 0 1 .22.532.724.724 0 0 1-.22.522l-2.93 2.92h9.24a.781.781 0 0 1 .764.773v.638A.766.766 0 0 1 13 6.8z\",\n      transform: \"translate(1.182 .708)\"\n    })\n  }));\n}\n/*\n * Component.\n */\n\n\nfunction BackButton(_a) {\n  var onClick = _a.onClick;\n  return jsxRuntime.jsx(\"button\", sessionAuth.__assign({\n    onClick: onClick,\n    \"data-supertokens\": \"backButton backButtonCommon\"\n  }, {\n    children: jsxRuntime.jsx(HeavyArrowLeftIcon, {\n      color: \"rgb(var(--palette-textTitle))\"\n    })\n  }));\n}\n/*\n * Component.\n */\n\n\nfunction BackToSignInButton(_a) {\n  var onClick = _a.onClick;\n  var t = translationContext.useTranslation();\n  return jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n    \"data-supertokens\": \"secondaryText secondaryLinkWithLeftArrow\",\n    onClick: onClick\n  }, {\n    children: [jsxRuntime.jsx(validators.ArrowLeftIcon, {\n      color: \"rgb(var(--palette-secondaryText))\"\n    }), t(\"EMAIL_PASSWORD_RESET_SIGN_IN_LINK\")]\n  }));\n}\n\nvar EmailPasswordResetPasswordEmail = function (props) {\n  var t = translationContext.useTranslation();\n  var userContext = sessionAuth.useUserContext();\n\n  var _a = React.useState(\"READY\"),\n      status = _a[0],\n      setStatus = _a[1];\n\n  var _b = React.useState(\"\"),\n      emailFieldValue = _b[0],\n      setEmailFieldValue = _b[1];\n\n  var onSuccess = function () {\n    setStatus(\"SENT\");\n  };\n\n  var resend = function () {\n    setStatus(\"READY\");\n  };\n\n  var formFields = props.formFields;\n  var emailSuccessText = t(\"EMAIL_PASSWORD_RESET_SEND_BEFORE_EMAIL\") + (emailFieldValue !== undefined && emailFieldValue.length > 0 ? emailFieldValue : t(\"EMAIL_PASSWORD_RESET_SEND_FALLBACK_EMAIL\")) + t(\"EMAIL_PASSWORD_RESET_SEND_AFTER_EMAIL\");\n\n  if (status === \"SENT\") {\n    return jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"container\"\n    }, {\n      children: jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"row\"\n      }, {\n        children: [jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n          \"data-supertokens\": \"primaryText enterEmailSuccessMessage\"\n        }, {\n          children: [emailSuccessText, jsxRuntime.jsx(\"span\", sessionAuth.__assign({\n            \"data-supertokens\": \"link resendEmailLink\",\n            onClick: resend\n          }, {\n            children: t(\"EMAIL_PASSWORD_RESET_RESEND_LINK\")\n          }))]\n        })), jsxRuntime.jsx(BackToSignInButton, {\n          onClick: props.onBackButtonClicked\n        })]\n      }))\n    }));\n  } // Otherwise, return Form.\n\n\n  return jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n    \"data-supertokens\": \"container\"\n  }, {\n    children: jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"row\"\n    }, {\n      children: [jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"headerTitle resetPasswordHeaderTitle\"\n      }, {\n        children: [jsxRuntime.jsx(BackButton, {\n          onClick: props.onBackButtonClicked\n        }), t(\"EMAIL_PASSWORD_RESET_HEADER_TITLE\"), jsxRuntime.jsx(\"span\", {\n          \"data-supertokens\": \"backButtonPlaceholder backButtonCommon\"\n        })]\n      })), jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"headerSubtitle\"\n      }, {\n        children: jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n          \"data-supertokens\": \"secondaryText\"\n        }, {\n          children: t(\"EMAIL_PASSWORD_RESET_HEADER_SUBTITLE\")\n        }))\n      })), props.error !== undefined && jsxRuntime.jsx(translations.GeneralError, {\n        error: props.error\n      }), jsxRuntime.jsx(validators.FormBase, {\n        clearError: props.clearError,\n        onError: props.onError,\n        formFields: formFields,\n        buttonLabel: \"EMAIL_PASSWORD_RESET_SEND_BTN\",\n        onSuccess: onSuccess,\n        callAPI: function (formFields) {\n          return sessionAuth.__awaiter(void 0, void 0, void 0, function () {\n            var validationErrors, emailField;\n            return sessionAuth.__generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , sessionAuth.validateForm(formFields, props.config.resetPasswordUsingTokenFeature.enterEmailForm.formFields)];\n\n                case 1:\n                  validationErrors = _a.sent();\n\n                  if (validationErrors.length > 0) {\n                    return [2\n                    /*return*/\n                    , {\n                      status: \"FIELD_ERROR\",\n                      formFields: validationErrors\n                    }];\n                  }\n\n                  emailField = formFields.find(function (field) {\n                    return field.id === \"email\";\n                  });\n\n                  if (emailField !== undefined) {\n                    setEmailFieldValue(emailField.value);\n                  }\n\n                  return [4\n                  /*yield*/\n                  , props.recipeImplementation.sendPasswordResetEmail({\n                    formFields: formFields,\n                    userContext: userContext\n                  })];\n\n                case 2:\n                  return [2\n                  /*return*/\n                  , _a.sent()];\n              }\n            });\n          });\n        },\n        showLabels: true,\n        validateOnBlur: true\n      })]\n    }))\n  }));\n};\n\nvar ResetPasswordEmail = translations.withOverride(\"EmailPasswordResetPasswordEmail\", EmailPasswordResetPasswordEmail);\n\nvar EmailPasswordSubmitNewPassword = function (props) {\n  var t = translationContext.useTranslation();\n  var userContext = sessionAuth.useUserContext();\n\n  var _a = React.useState(\"READY\"),\n      status = _a[0],\n      setStatus = _a[1];\n\n  var onSuccess = function () {\n    setStatus(\"SUCCESS\");\n  };\n\n  var formFields = props.formFields,\n      onSignInClicked = props.onSignInClicked;\n\n  if (status === \"SUCCESS\") {\n    return jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"container\"\n    }, {\n      children: jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"row\"\n      }, {\n        children: [jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n          \"data-supertokens\": \"headerTitle\"\n        }, {\n          children: t(\"EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_HEADER_TITLE\")\n        })), jsxRuntime.jsx(validators.FormRow, {\n          children: jsxRuntime.jsxs(React.Fragment, {\n            children: [jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n              \"data-supertokens\": \"primaryText submitNewPasswordSuccessMessage\"\n            }, {\n              children: t(\"EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_DESC\")\n            })), jsxRuntime.jsx(button.Button, {\n              disabled: false,\n              isLoading: false,\n              type: \"button\",\n              onClick: onSignInClicked,\n              label: \"EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_SIGN_IN_BTN\"\n            })]\n          })\n        }, \"form-button\")]\n      }))\n    }));\n  }\n\n  return jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n    \"data-supertokens\": \"container\"\n  }, {\n    children: jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"row\"\n    }, {\n      children: [jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"headerTitle\"\n      }, {\n        children: t(\"EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_TITLE\")\n      })), jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"headerSubtitle\"\n      }, {\n        children: jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n          \"data-supertokens\": \"secondaryText\"\n        }, {\n          children: t(\"EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_SUBTITLE\")\n        }))\n      })), props.error !== undefined && jsxRuntime.jsx(translations.GeneralError, {\n        error: props.error\n      }), jsxRuntime.jsx(validators.FormBase, {\n        formFields: formFields,\n        clearError: props.clearError,\n        onError: props.onError,\n        buttonLabel: \"EMAIL_PASSWORD_RESET_SUBMIT_PW_CHANGE_PW_BTN\",\n        onSuccess: onSuccess,\n        validateOnBlur: true,\n        callAPI: function (fields) {\n          return sessionAuth.__awaiter(void 0, void 0, void 0, function () {\n            var validationErrors, response;\n            return sessionAuth.__generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , sessionAuth.validateForm(fields, props.config.resetPasswordUsingTokenFeature.submitNewPasswordForm.formFields)];\n\n                case 1:\n                  validationErrors = _a.sent();\n\n                  if (validationErrors.length > 0) {\n                    return [2\n                    /*return*/\n                    , {\n                      status: \"FIELD_ERROR\",\n                      formFields: validationErrors\n                    }];\n                  } // Verify that both passwords match.\n\n\n                  if (fields[0].value !== fields[1].value) {\n                    return [2\n                    /*return*/\n                    , {\n                      status: \"FIELD_ERROR\",\n                      formFields: [{\n                        id: fields[1].id,\n                        error: \"ERROR_CONFIRM_PASSWORD_NO_MATCH\"\n                      }]\n                    }];\n                  }\n\n                  return [4\n                  /*yield*/\n                  , props.recipeImplementation.submitNewPassword({\n                    formFields: fields,\n                    userContext: userContext\n                  })];\n\n                case 2:\n                  response = _a.sent();\n\n                  if (response.status === \"RESET_PASSWORD_INVALID_TOKEN_ERROR\") {\n                    throw new STGeneralError__default.default(\"EMAIL_PASSWORD_RESET_PASSWORD_INVALID_TOKEN_ERROR\");\n                  }\n\n                  return [2\n                  /*return*/\n                  , response.status === \"FIELD_ERROR\" ? response : {\n                    status: \"OK\"\n                  }];\n              }\n            });\n          });\n        },\n        showLabels: true\n      })]\n    }))\n  }));\n};\n\nvar SubmitNewPassword = translations.withOverride(\"EmailPasswordSubmitNewPassword\", EmailPasswordSubmitNewPassword);\n/*\n * Component.\n */\n\nfunction ResetPasswordUsingTokenTheme(props) {\n  /*\n   * Render.\n   */\n  // If no token, return SubmitNewPassword.\n  if (props.submitNewPasswordForm !== undefined) {\n    return jsxRuntime.jsx(SubmitNewPassword, sessionAuth.__assign({}, props.submitNewPasswordForm));\n  } // Otherwise, return EnterEmail.\n\n\n  return jsxRuntime.jsx(ResetPasswordEmail, sessionAuth.__assign({}, props.enterEmailForm));\n}\n\nfunction ResetPasswordUsingTokenThemeWrapper(props) {\n  var hasFont = translations.hasFontDefined(props.config.rootStyle);\n  var userStyles = props.submitNewPasswordForm ? props.config.resetPasswordUsingTokenFeature.submitNewPasswordForm.style : props.config.resetPasswordUsingTokenFeature.enterEmailForm.style;\n  return jsxRuntime.jsx(sessionAuth.UserContextWrapper, sessionAuth.__assign({\n    userContext: props.userContext\n  }, {\n    children: jsxRuntime.jsx(translations$1.ThemeBase, sessionAuth.__assign({\n      loadDefaultFont: !hasFont,\n      userStyles: [props.config.rootStyle, userStyles]\n    }, {\n      children: jsxRuntime.jsx(ResetPasswordUsingTokenTheme, sessionAuth.__assign({}, props))\n    }))\n  }));\n}\n\nvar SignInFooter = translations.withOverride(\"EmailPasswordSignInFooter\", function EmailPasswordSignInFooter(_a) {\n  var onClick = _a.onClick;\n  var t = translationContext.useTranslation();\n  return jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n    \"data-supertokens\": \"link secondaryText forgotPasswordLink\",\n    onClick: onClick\n  }, {\n    children: t(\"EMAIL_PASSWORD_SIGN_IN_FOOTER_FORGOT_PW_LINK\")\n  }));\n});\nvar SignInForm = translations.withOverride(\"EmailPasswordSignInForm\", function EmailPasswordSignInForm(props) {\n  var _this = this;\n\n  var userContext = sessionAuth.useUserContext();\n  return jsxRuntime.jsx(validators.FormBase, {\n    formFields: props.formFields,\n    clearError: props.clearError,\n    onError: props.onError,\n    buttonLabel: \"EMAIL_PASSWORD_SIGN_IN_SUBMIT_BTN\",\n    onSuccess: props.onSuccess,\n    callAPI: function (formFields) {\n      return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n        var validationErrors, response;\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , sessionAuth.validateForm(formFields, props.config.signInAndUpFeature.signInForm.formFields)];\n\n            case 1:\n              validationErrors = _a.sent();\n\n              if (validationErrors.length > 0) {\n                return [2\n                /*return*/\n                , {\n                  status: \"FIELD_ERROR\",\n                  formFields: validationErrors\n                }];\n              }\n\n              return [4\n              /*yield*/\n              , props.recipeImplementation.signIn({\n                formFields: formFields,\n                userContext: userContext\n              })];\n\n            case 2:\n              response = _a.sent();\n\n              if (response.status === \"WRONG_CREDENTIALS_ERROR\") {\n                throw new STGeneralError__default.default(\"EMAIL_PASSWORD_SIGN_IN_WRONG_CREDENTIALS_ERROR\");\n              } else {\n                return [2\n                /*return*/\n                , response];\n              }\n\n          }\n        });\n      });\n    },\n    validateOnBlur: false,\n    showLabels: true,\n    footer: props.footer\n  });\n});\nvar SignInHeader = translations.withOverride(\"EmailPasswordSignInHeader\", function EmailPasswordSignInHeader(_a) {\n  var onClick = _a.onClick;\n  var t = translationContext.useTranslation();\n  return jsxRuntime.jsxs(React.Fragment, {\n    children: [jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"headerTitle\"\n    }, {\n      children: t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_TITLE\")\n    })), jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"headerSubtitle\"\n    }, {\n      children: jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"secondaryText\"\n      }, {\n        children: [t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_START\"), jsxRuntime.jsx(\"span\", sessionAuth.__assign({\n          \"data-supertokens\": \"link\",\n          onClick: onClick\n        }, {\n          children: t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_SIGN_UP_LINK\")\n        })), t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_END\")]\n      }))\n    })), jsxRuntime.jsx(\"div\", {\n      \"data-supertokens\": \"divider\"\n    })]\n  });\n});\nvar SignIn = translations.withOverride(\"EmailPasswordSignIn\", function EmailPasswordSignIn(props) {\n  return jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n    \"data-supertokens\": \"container\"\n  }, {\n    children: [jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"row\"\n    }, {\n      children: [jsxRuntime.jsx(SignInHeader, {\n        onClick: props.signUpClicked\n      }), props.error !== undefined && jsxRuntime.jsx(translations.GeneralError, {\n        error: props.error\n      }), jsxRuntime.jsx(SignInForm, sessionAuth.__assign({}, props, {\n        footer: jsxRuntime.jsx(SignInFooter, {\n          onClick: props.forgotPasswordClick\n        })\n      }))]\n    })), jsxRuntime.jsx(utils.SuperTokensBranding, {})]\n  }));\n});\nvar SignUpFooter = translations.withOverride(\"EmailPasswordSignUpFooter\", function EmailPasswordSignUpFooter(_a) {\n  var termsOfServiceLink = _a.termsOfServiceLink,\n      privacyPolicyLink = _a.privacyPolicyLink;\n  var t = translationContext.useTranslation();\n\n  if (termsOfServiceLink === undefined && privacyPolicyLink === undefined) {\n    return null;\n  }\n\n  return jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n    \"data-supertokens\": \"secondaryText privacyPolicyAndTermsAndConditions\"\n  }, {\n    children: [t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_START\"), termsOfServiceLink !== undefined && jsxRuntime.jsx(\"a\", sessionAuth.__assign({\n      \"data-supertokens\": \"link\",\n      href: termsOfServiceLink,\n      target: \"_blank\",\n      rel: \"noopener noreferer\"\n    }, {\n      children: t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_TOS\")\n    })), termsOfServiceLink !== undefined && privacyPolicyLink !== undefined && t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_AND\"), privacyPolicyLink !== undefined && jsxRuntime.jsx(\"a\", sessionAuth.__assign({\n      \"data-supertokens\": \"link\",\n      href: privacyPolicyLink,\n      target: \"_blank\",\n      rel: \"noopener noreferer\"\n    }, {\n      children: t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_PP\")\n    })), t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_END\")]\n  }));\n});\n/*\n * Component.\n */\n\nvar SignUpForm = translations.withOverride(\"EmailPasswordSignUpForm\", function EmailPasswordSignUpForm(props) {\n  var _this = this;\n\n  var userContext = sessionAuth.useUserContext();\n  return jsxRuntime.jsx(validators.FormBase, {\n    formFields: props.formFields,\n    clearError: props.clearError,\n    onError: props.onError,\n    buttonLabel: \"EMAIL_PASSWORD_SIGN_UP_SUBMIT_BTN\",\n    onSuccess: props.onSuccess,\n    callAPI: function (formFields) {\n      return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n        var validationErrors;\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , sessionAuth.validateForm(formFields, props.config.signInAndUpFeature.signUpForm.formFields)];\n\n            case 1:\n              validationErrors = _a.sent();\n\n              if (validationErrors.length > 0) {\n                return [2\n                /*return*/\n                , {\n                  status: \"FIELD_ERROR\",\n                  formFields: validationErrors\n                }];\n              }\n\n              return [2\n              /*return*/\n              , props.recipeImplementation.signUp({\n                formFields: formFields,\n                userContext: userContext\n              })];\n          }\n        });\n      });\n    },\n    validateOnBlur: true,\n    showLabels: true,\n    footer: props.footer\n  });\n});\nvar SignUpHeader = translations.withOverride(\"EmailPasswordSignUpHeader\", function EmailPasswordSignUpHeader(_a) {\n  var onClick = _a.onClick;\n  var t = translationContext.useTranslation();\n  return jsxRuntime.jsxs(React.Fragment, {\n    children: [jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"headerTitle\"\n    }, {\n      children: t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_TITLE\")\n    })), jsxRuntime.jsx(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"headerSubtitle\"\n    }, {\n      children: jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n        \"data-supertokens\": \"secondaryText\"\n      }, {\n        children: [t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_START\"), jsxRuntime.jsx(\"span\", sessionAuth.__assign({\n          \"data-supertokens\": \"link\",\n          onClick: onClick\n        }, {\n          children: t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_SIGN_IN_LINK\")\n        })), t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_END\")]\n      }))\n    })), jsxRuntime.jsx(\"div\", {\n      \"data-supertokens\": \"divider\"\n    })]\n  });\n});\nvar SignUp = translations.withOverride(\"EmailPasswordSignUp\", function EmailPasswordSignUp(props) {\n  return jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n    \"data-supertokens\": \"container\"\n  }, {\n    children: [jsxRuntime.jsxs(\"div\", sessionAuth.__assign({\n      \"data-supertokens\": \"row\"\n    }, {\n      children: [jsxRuntime.jsx(SignUpHeader, {\n        onClick: props.signInClicked\n      }), props.error !== undefined && jsxRuntime.jsx(translations.GeneralError, {\n        error: props.error\n      }), jsxRuntime.jsx(SignUpForm, sessionAuth.__assign({}, props, {\n        footer: jsxRuntime.jsx(SignUpFooter, {\n          privacyPolicyLink: props.config.signInAndUpFeature.signUpForm.privacyPolicyLink,\n          termsOfServiceLink: props.config.signInAndUpFeature.signUpForm.termsOfServiceLink\n        })\n      }))]\n    })), jsxRuntime.jsx(utils.SuperTokensBranding, {})]\n  }));\n});\n\nvar SignInAndUpTheme = function (props) {\n  // If isSignUp, return signUp.\n  if (props.featureState.isSignUp) {\n    return jsxRuntime.jsx(SignUp, sessionAuth.__assign({}, props.signUpForm, {\n      signInClicked: function () {\n        props.dispatch({\n          type: \"setSignIn\"\n        });\n      }\n    }));\n  } // Otherwise, return SignIn.\n\n\n  return jsxRuntime.jsx(SignIn, sessionAuth.__assign({}, props.signInForm, {\n    signUpClicked: function () {\n      props.dispatch({\n        type: \"setSignUp\"\n      });\n    }\n  }));\n};\n\nfunction SignInAndUpThemeWrapper(props) {\n  var hasFont = translations.hasFontDefined(props.config.rootStyle);\n  var activeStyle = props.featureState.isSignUp ? props.config.signInAndUpFeature.signUpForm.style : props.config.signInAndUpFeature.signInForm.style;\n  return jsxRuntime.jsx(sessionAuth.UserContextWrapper, sessionAuth.__assign({\n    userContext: props.userContext\n  }, {\n    children: jsxRuntime.jsx(translations$1.ThemeBase, sessionAuth.__assign({\n      loadDefaultFont: !hasFont,\n      userStyles: [props.config.rootStyle, activeStyle]\n    }, {\n      children: jsxRuntime.jsx(SignInAndUpTheme, sessionAuth.__assign({}, props))\n    }))\n  }));\n}\n\nvar defaultTranslationsEmailPassword = {\n  en: sessionAuth.__assign(sessionAuth.__assign(sessionAuth.__assign({}, translations.defaultTranslationsCommon.en), translations$1.defaultTranslationsEmailVerification.en), {\n    EMAIL_PASSWORD_EMAIL_LABEL: \"Email\",\n    EMAIL_PASSWORD_EMAIL_PLACEHOLDER: \"Email address\",\n    EMAIL_PASSWORD_PASSWORD_LABEL: \"Password\",\n    EMAIL_PASSWORD_PASSWORD_PLACEHOLDER: \"Password\",\n    EMAIL_PASSWORD_SIGN_IN_HEADER_TITLE: \"Sign In\",\n    EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_START: \"Not registered yet?\",\n    EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_SIGN_UP_LINK: \"Sign Up\",\n    EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_END: \"\",\n    EMAIL_PASSWORD_SIGN_IN_FOOTER_FORGOT_PW_LINK: \"Forgot password?\",\n    EMAIL_PASSWORD_SIGN_IN_SUBMIT_BTN: \"SIGN IN\",\n    EMAIL_PASSWORD_SIGN_IN_WRONG_CREDENTIALS_ERROR: \"Incorrect email and password combination\",\n    EMAIL_PASSWORD_SIGN_UP_HEADER_TITLE: \"Sign Up\",\n    EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_START: \"Already have an account?\",\n    EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_SIGN_IN_LINK: \"Sign In\",\n    EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_END: \"\",\n    EMAIL_PASSWORD_SIGN_UP_FOOTER_START: \"By continuing, you agree to our \",\n    EMAIL_PASSWORD_SIGN_UP_FOOTER_TOS: \"Terms of Service\",\n    EMAIL_PASSWORD_SIGN_UP_FOOTER_AND: \" and \",\n    EMAIL_PASSWORD_SIGN_UP_FOOTER_PP: \"Privacy Policy\",\n    EMAIL_PASSWORD_SIGN_UP_FOOTER_END: \"\",\n    EMAIL_PASSWORD_SIGN_UP_SUBMIT_BTN: \"SIGN UP\",\n    EMAIL_PASSWORD_EMAIL_ALREADY_EXISTS: \"This email already exists. Please sign in instead\",\n    EMAIL_PASSWORD_RESET_HEADER_TITLE: \"Reset your password\",\n    EMAIL_PASSWORD_RESET_HEADER_SUBTITLE: \"We will send you an email to reset your password\",\n    EMAIL_PASSWORD_RESET_SEND_FALLBACK_EMAIL: \"your account\",\n    EMAIL_PASSWORD_RESET_SEND_BEFORE_EMAIL: \"A password reset email has been sent to \",\n    EMAIL_PASSWORD_RESET_SEND_AFTER_EMAIL: \", if it exists in our system. \",\n    EMAIL_PASSWORD_RESET_RESEND_LINK: \"Resend or change email\",\n    EMAIL_PASSWORD_RESET_SEND_BTN: \"Email me\",\n    EMAIL_PASSWORD_RESET_SIGN_IN_LINK: \"Sign In\",\n    EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_HEADER_TITLE: \"Success!\",\n    EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_DESC: \"Your password has been updated successfully\",\n    EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_SIGN_IN_BTN: \"SIGN IN\",\n    EMAIL_PASSWORD_NEW_PASSWORD_LABEL: \"New password\",\n    EMAIL_PASSWORD_NEW_PASSWORD_PLACEHOLDER: \"New password\",\n    EMAIL_PASSWORD_CONFIRM_PASSWORD_LABEL: \"Confirm password\",\n    EMAIL_PASSWORD_CONFIRM_PASSWORD_PLACEHOLDER: \"Confirm your password\",\n    EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_TITLE: \"Change your password\",\n    EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_SUBTITLE: \"Enter a new password below to change your password\",\n    EMAIL_PASSWORD_RESET_SUBMIT_PW_CHANGE_PW_BTN: \"CHANGE PASSWORD\",\n    EMAIL_PASSWORD_RESET_PASSWORD_INVALID_TOKEN_ERROR: \"Invalid password reset token\",\n    ERROR_EMAIL_NON_STRING: \"Email must be of type string\",\n    ERROR_EMAIL_INVALID: \"Email is invalid\",\n    ERROR_PASSWORD_NON_STRING: \"Password must be of type string\",\n    ERROR_PASSWORD_TOO_SHORT: \"Password must contain at least 8 characters, including a number\",\n    ERROR_PASSWORD_TOO_LONG: \"Password's length must be lesser than 100 characters\",\n    ERROR_PASSWORD_NO_ALPHA: \"Password must contain at least one alphabet\",\n    ERROR_PASSWORD_NO_NUM: \"Password must contain at least one number\",\n    ERROR_CONFIRM_PASSWORD_NO_MATCH: \"Confirmation password doesn't match\",\n    ERROR_NON_OPTIONAL: \"Field is not optional\",\n\n    /*\n     * The following are error messages from our backend SDK.\n     * These are returned as full messages to preserver compatibilty, but they work just like the keys above.\n     * They are shown as is by default (setting the value to undefined will display the raw translation key)\n     */\n    \"This email already exists. Please sign in instead.\": undefined,\n    \"Field is not optional\": undefined,\n    \"Password must contain at least 8 characters, including a number\": undefined,\n    \"Password's length must be lesser than 100 characters\": undefined,\n    \"Password must contain at least one alphabet\": undefined,\n    \"Password must contain at least one number\": undefined,\n    \"Email is invalid\": undefined\n  })\n};\n\nvar ResetPasswordUsingToken = function (props) {\n  var token = sessionAuth.getQueryParams(\"token\");\n\n  var _a = React__namespace.useState(),\n      error = _a[0],\n      setError = _a[1];\n\n  var enterEmailFormFeature = props.recipe.config.resetPasswordUsingTokenFeature.enterEmailForm;\n  var submitNewPasswordFormFeature = props.recipe.config.resetPasswordUsingTokenFeature.submitNewPasswordForm;\n  var submitNewPasswordForm = token === undefined || token === null ? undefined : {\n    error: error,\n    onError: function (error) {\n      return setError(error);\n    },\n    clearError: function () {\n      return setError(undefined);\n    },\n    styleFromInit: submitNewPasswordFormFeature.style,\n    formFields: submitNewPasswordFormFeature.formFields,\n    recipeImplementation: props.recipe.recipeImpl,\n    config: props.recipe.config,\n    onSignInClicked: function () {\n      void sessionAuth.SuperTokens.getInstanceOrThrow().redirectToAuth({\n        show: \"signin\",\n        history: props.history,\n        redirectBack: false\n      });\n    },\n    token: token\n  };\n  var enterEmailForm = {\n    onBackButtonClicked: function () {\n      return sessionAuth.SuperTokens.getInstanceOrThrow().redirectToAuth({\n        show: \"signin\",\n        history: props.history,\n        redirectBack: false\n      });\n    },\n    error: error,\n    onError: function (error) {\n      return setError(error);\n    },\n    clearError: function () {\n      return setError(undefined);\n    },\n    styleFromInit: enterEmailFormFeature.style,\n    formFields: enterEmailFormFeature.formFields,\n    recipeImplementation: props.recipe.recipeImpl,\n    config: props.recipe.config\n  };\n  var childProps = {\n    config: props.recipe.config,\n    submitNewPasswordForm: submitNewPasswordForm,\n    enterEmailForm: enterEmailForm\n  };\n  var recipeComponentOverrides = props.useComponentOverrides();\n  return jsxRuntime.jsx(translations.ComponentOverrideContext.Provider, sessionAuth.__assign({\n    value: recipeComponentOverrides\n  }, {\n    children: jsxRuntime.jsx(translations.FeatureWrapper, sessionAuth.__assign({\n      useShadowDom: props.recipe.config.useShadowDom,\n      defaultStore: defaultTranslationsEmailPassword\n    }, {\n      children: jsxRuntime.jsxs(React.Fragment, {\n        children: [props.children === undefined && jsxRuntime.jsx(ResetPasswordUsingTokenThemeWrapper, sessionAuth.__assign({}, childProps)), props.children && React__namespace.Children.map(props.children, function (child) {\n          if (React__namespace.isValidElement(child)) {\n            return React__namespace.cloneElement(child, childProps);\n          }\n\n          return child;\n        })]\n      })\n    }))\n  }));\n};\n\nvar useFeatureReducer = function (recipe) {\n  return React__namespace.useReducer(function (oldState, action) {\n    switch (action.type) {\n      case \"setSignIn\":\n        return sessionAuth.__assign(sessionAuth.__assign({}, oldState), {\n          error: undefined,\n          isSignUp: false\n        });\n\n      case \"setSignUp\":\n        return sessionAuth.__assign(sessionAuth.__assign({}, oldState), {\n          error: undefined,\n          isSignUp: true\n        });\n\n      case \"setError\":\n        return sessionAuth.__assign(sessionAuth.__assign({}, oldState), {\n          error: action.error\n        });\n\n      default:\n        return oldState;\n    }\n  }, {\n    isSignUp: recipe === undefined ? false : recipe.config.signInAndUpFeature.defaultToSignUp,\n    user: undefined,\n    error: undefined\n  }, function (initArg) {\n    var show = sessionAuth.getQueryParams(\"show\");\n    var isSignUp = initArg.isSignUp;\n\n    if (show !== null) {\n      isSignUp = show === \"signup\";\n    }\n\n    return {\n      isSignUp: isSignUp,\n      user: undefined,\n      error: undefined\n    };\n  });\n};\n\nfunction useChildProps(recipe, state, dispatch, history) {\n  var _this = this;\n\n  var recipeImplementation = React.useMemo(function () {\n    return recipe && getModifiedRecipeImplementation(recipe.recipeImpl);\n  }, [recipe]);\n  var userContext = sessionAuth.useUserContext();\n  var onSignInSuccess = React.useCallback(function () {\n    return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection({\n          rid: recipe.config.recipeId,\n          successRedirectContext: {\n            action: \"SUCCESS\",\n            isNewUser: false,\n            redirectToPath: sessionAuth.getRedirectToPathFromURL()\n          }\n        }, userContext, history)];\n      });\n    });\n  }, [recipe, userContext, history]);\n  var onSignUpSuccess = React.useCallback(function () {\n    return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n      return sessionAuth.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , sessionAuth.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection({\n          rid: recipe.config.recipeId,\n          successRedirectContext: {\n            action: \"SUCCESS\",\n            isNewUser: true,\n            redirectToPath: sessionAuth.getRedirectToPathFromURL()\n          }\n        }, userContext, history)];\n      });\n    });\n  }, [recipe, userContext, history]);\n  return React.useMemo(function () {\n    if (recipe === undefined || recipeImplementation === undefined) {\n      return;\n    }\n\n    var signInAndUpFeature = recipe.config.signInAndUpFeature;\n    var signUpFeature = signInAndUpFeature.signUpForm;\n    var signInFeature = signInAndUpFeature.signInForm;\n    var signInForm = {\n      recipeImplementation: recipeImplementation,\n      config: recipe.config,\n      styleFromInit: signInFeature.style,\n      formFields: signInFeature.formFields,\n      error: state.error,\n      clearError: function () {\n        return dispatch({\n          type: \"setError\",\n          error: undefined\n        });\n      },\n      onError: function (error) {\n        return dispatch({\n          type: \"setError\",\n          error: error\n        });\n      },\n      onSuccess: onSignInSuccess,\n      forgotPasswordClick: function () {\n        return recipe.redirect({\n          action: \"RESET_PASSWORD\"\n        }, history);\n      }\n    };\n    var signUpForm = {\n      recipeImplementation: recipeImplementation,\n      config: recipe.config,\n      styleFromInit: signUpFeature.style,\n      formFields: getThemeSignUpFeatureFormFields(signUpFeature.formFields, recipe, userContext),\n      error: state.error,\n      clearError: function () {\n        return dispatch({\n          type: \"setError\",\n          error: undefined\n        });\n      },\n      onError: function (error) {\n        return dispatch({\n          type: \"setError\",\n          error: error\n        });\n      },\n      onSuccess: onSignUpSuccess\n    };\n    return {\n      config: recipe.config,\n      signInForm: signInForm,\n      signUpForm: signUpForm\n    };\n  }, [recipe, state, dispatch]);\n}\n\nvar SignInAndUpFeature = function (props) {\n  var _a = useFeatureReducer(props.recipe),\n      state = _a[0],\n      dispatch = _a[1];\n\n  var childProps = useChildProps(props.recipe, state, dispatch, props.history);\n  var recipeComponentOverrides = props.useComponentOverrides();\n  return jsxRuntime.jsx(translations.ComponentOverrideContext.Provider, sessionAuth.__assign({\n    value: recipeComponentOverrides\n  }, {\n    children: jsxRuntime.jsx(translations.FeatureWrapper, sessionAuth.__assign({\n      useShadowDom: props.recipe.config.useShadowDom,\n      defaultStore: defaultTranslationsEmailPassword\n    }, {\n      children: jsxRuntime.jsxs(React.Fragment, {\n        children: [props.children === undefined && jsxRuntime.jsx(SignInAndUpThemeWrapper, sessionAuth.__assign({}, childProps, {\n          featureState: state,\n          dispatch: dispatch\n        })), props.children && React__namespace.Children.map(props.children, function (child) {\n          if (React__namespace.isValidElement(child)) {\n            return React__namespace.cloneElement(child, sessionAuth.__assign(sessionAuth.__assign({}, childProps), {\n              featureState: state,\n              dispatch: dispatch\n            }));\n          }\n\n          return child;\n        })]\n      })\n    }))\n  }));\n};\n\nvar getModifiedRecipeImplementation = function (origImpl) {\n  return sessionAuth.__assign({}, origImpl);\n};\n\nfunction getThemeSignUpFeatureFormFields(formFields, recipe, userContext) {\n  var _this = this;\n\n  var emailPasswordOnly = formFields.length === 2;\n  return formFields.map(function (field) {\n    return sessionAuth.__assign(sessionAuth.__assign({}, field), {\n      showIsRequired: function () {\n        // If email and password only, do not show required indicator (*).\n        if (emailPasswordOnly) {\n          return false;\n        } // Otherwise, show for all non optional fields (including email and password).\n\n\n        return field.optional === false;\n      }(),\n      validate: function () {\n        // If field is not email, return field validate unchanged.\n        if (field.id !== \"email\") {\n          return field.validate;\n        } // Otherwise, if email, use syntax validate method and check if email exists.\n\n\n        return function (value) {\n          return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n            var error, emailExists, err_1;\n            return sessionAuth.__generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , field.validate(value)];\n\n                case 1:\n                  error = _a.sent();\n\n                  if (error !== undefined) {\n                    return [2\n                    /*return*/\n                    , error];\n                  }\n\n                  if (typeof value !== \"string\") {\n                    return [2\n                    /*return*/\n                    , \"GENERAL_ERROR_EMAIL_NON_STRING\"];\n                  }\n\n                  _a.label = 2;\n\n                case 2:\n                  _a.trys.push([2, 4,, 5]);\n\n                  return [4\n                  /*yield*/\n                  , recipe.recipeImpl.doesEmailExist({\n                    email: value,\n                    userContext: userContext\n                  })];\n\n                case 3:\n                  emailExists = _a.sent().doesExist;\n\n                  if (emailExists) {\n                    return [2\n                    /*return*/\n                    , \"EMAIL_PASSWORD_EMAIL_ALREADY_EXISTS\"];\n                  }\n\n                  return [3\n                  /*break*/\n                  , 5];\n\n                case 4:\n                  err_1 = _a.sent();\n\n                  if (STGeneralError__default.default.isThisError(err_1)) {\n                    return [2\n                    /*return*/\n                    , err_1.message];\n                  }\n\n                  return [3\n                  /*break*/\n                  , 5];\n\n                case 5:\n                  return [2\n                  /*return*/\n                  , undefined];\n              }\n            });\n          });\n        };\n      }()\n    });\n  });\n}\n\nfunction getRecipeImplementation(recipeInput) {\n  var webJsImplementation = recipeImplementation.getRecipeImplementation({\n    recipeId: recipeInput.recipeId,\n    appInfo: recipeInput.appInfo,\n    preAPIHook: recipeInput.preAPIHook,\n    postAPIHook: recipeInput.postAPIHook\n  });\n  return {\n    submitNewPassword: function (input) {\n      return sessionAuth.__awaiter(this, void 0, void 0, function () {\n        var response;\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , webJsImplementation.submitNewPassword.bind(this)(sessionAuth.__assign(sessionAuth.__assign({}, input), {\n                formFields: [input.formFields[0]]\n              }))];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.status === \"OK\") {\n                recipeInput.onHandleEvent({\n                  action: \"PASSWORD_RESET_SUCCESSFUL\",\n                  userContext: input.userContext\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    },\n    sendPasswordResetEmail: function (input) {\n      return sessionAuth.__awaiter(this, void 0, void 0, function () {\n        var response;\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , webJsImplementation.sendPasswordResetEmail.bind(this)(sessionAuth.__assign({}, input))];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.status === \"OK\") {\n                recipeInput.onHandleEvent({\n                  action: \"RESET_PASSWORD_EMAIL_SENT\",\n                  userContext: input.userContext\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    },\n    signUp: function (input) {\n      return sessionAuth.__awaiter(this, void 0, void 0, function () {\n        var response;\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , webJsImplementation.signUp.bind(this)(sessionAuth.__assign({}, input))];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.status === \"OK\") {\n                recipeInput.onHandleEvent({\n                  action: \"SUCCESS\",\n                  isNewUser: true,\n                  user: response.user,\n                  userContext: input.userContext\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    },\n    signIn: function (input) {\n      return sessionAuth.__awaiter(this, void 0, void 0, function () {\n        var response;\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , webJsImplementation.signIn.bind(this)(sessionAuth.__assign({}, input))];\n\n            case 1:\n              response = _a.sent();\n\n              if (response.status === \"OK\") {\n                recipeInput.onHandleEvent({\n                  action: \"SUCCESS\",\n                  isNewUser: false,\n                  user: response.user,\n                  userContext: input.userContext\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    },\n    doesEmailExist: function (input) {\n      return sessionAuth.__awaiter(this, void 0, void 0, function () {\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , webJsImplementation.doesEmailExist.bind(this)(sessionAuth.__assign({}, input))];\n\n            case 1:\n              return [2\n              /*return*/\n              , _a.sent()];\n          }\n        });\n      });\n    },\n    getResetPasswordTokenFromURL: function (input) {\n      return webJsImplementation.getResetPasswordTokenFromURL.bind(this)({\n        userContext: input.userContext\n      });\n    }\n  };\n}\n/* Copyright (c) 2021, VRAI Labs and/or its affiliates. All rights reserved.\n *\n * This software is licensed under the Apache License, Version 2.0 (the\n * \"License\") as published by the Apache Software Foundation.\n *\n * You may not use this file except in compliance with the License. You may\n * obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\n\nfunction normaliseEmailPasswordConfig(config) {\n  var signInAndUpFeature = normaliseSignInAndUpFeature(config.signInAndUpFeature);\n  var signUpPasswordField = signInAndUpFeature.signUpForm.formFields.find(function (field) {\n    return field.id === \"password\";\n  });\n  var signUpEmailField = signInAndUpFeature.signUpForm.formFields.find(function (field) {\n    return field.id === \"email\";\n  });\n  var resetPasswordUsingTokenFeature = normaliseResetPasswordUsingTokenFeature(signUpPasswordField.validate, signUpEmailField, config.resetPasswordUsingTokenFeature);\n\n  var override = sessionAuth.__assign({\n    functions: function (originalImplementation) {\n      return originalImplementation;\n    }\n  }, config.override);\n\n  return sessionAuth.__assign(sessionAuth.__assign({}, utils.normaliseAuthRecipe(config)), {\n    signInAndUpFeature: signInAndUpFeature,\n    resetPasswordUsingTokenFeature: resetPasswordUsingTokenFeature,\n    override: override\n  });\n}\n\nfunction normaliseSignInAndUpFeature(config) {\n  if (config === undefined) {\n    config = {};\n  }\n\n  var disableDefaultUI = config.disableDefaultUI === true;\n  var signUpForm = normaliseSignUpFormFeatureConfig(config.signUpForm);\n  var defaultToSignUp = config.defaultToSignUp !== undefined ? config.defaultToSignUp : false;\n  /*\n   * Default Sign In corresponds to computed Sign Up fields filtered by email and password only.\n   * i.e. If the user overrides sign Up fields, that is propagated to default sign In fields.\n   * Exception made of the password validator which only verifies that the value is not empty for login\n   * https://github.com/supertokens/supertokens-auth-react/issues/21\n   */\n\n  var defaultSignInFields = signUpForm.formFields.reduce(function (signInFieldsAccumulator, field) {\n    if (field.id === \"email\") {\n      return sessionAuth.__spreadArray(sessionAuth.__spreadArray([], signInFieldsAccumulator, true), [field], false);\n    }\n\n    if (field.id === \"password\") {\n      return sessionAuth.__spreadArray(sessionAuth.__spreadArray([], signInFieldsAccumulator, true), [sessionAuth.__assign(sessionAuth.__assign({}, field), {\n        autoComplete: \"current-password\",\n        validate: validators.defaultLoginPasswordValidator\n      })], false);\n    }\n\n    return signInFieldsAccumulator;\n  }, []);\n  var signInForm = normaliseSignInFormFeatureConfig(defaultSignInFields, config.signInForm);\n  return {\n    disableDefaultUI: disableDefaultUI,\n    defaultToSignUp: defaultToSignUp,\n    signUpForm: signUpForm,\n    signInForm: signInForm\n  };\n}\n\nfunction normaliseSignUpFormFeatureConfig(config) {\n  if (config === undefined) {\n    config = {};\n  }\n\n  var defaultFormFields = getDefaultFormFields();\n  var userFormFields = [];\n\n  if (config.formFields !== undefined) {\n    userFormFields = config.formFields;\n  }\n\n  var formFields = mergeFormFields(defaultFormFields, userFormFields);\n  var privacyPolicyLink = config.privacyPolicyLink;\n  var termsOfServiceLink = config.termsOfServiceLink;\n  var style = config.style !== undefined ? config.style : \"\";\n  return {\n    style: style,\n    formFields: formFields,\n    privacyPolicyLink: privacyPolicyLink,\n    termsOfServiceLink: termsOfServiceLink\n  };\n}\n\nfunction normaliseSignInFormFeatureConfig(defaultFormFields, config) {\n  if (config === undefined) {\n    config = {};\n  }\n\n  var userFormFields = [];\n\n  if (config.formFields !== undefined) {\n    userFormFields = config.formFields // Filter on email and password only.\n    .filter(function (field) {\n      return validators.MANDATORY_FORM_FIELDS_ID_ARRAY.includes(field.id);\n    }) // Sign In fields are never optional.\n    .map(function (field) {\n      return sessionAuth.__assign(sessionAuth.__assign({}, field), {\n        optional: false\n      });\n    });\n  }\n\n  var formFields = mergeFormFields(defaultFormFields, userFormFields);\n  var style = config.style !== undefined ? config.style : \"\";\n  return {\n    style: style,\n    formFields: formFields\n  };\n}\n\nfunction getDefaultFormFields() {\n  return [getDefaultEmailFormField(), getDefaultPasswordFormField()];\n}\n\nfunction getDefaultEmailFormField() {\n  return {\n    id: \"email\",\n    label: \"EMAIL_PASSWORD_EMAIL_LABEL\",\n    placeholder: \"EMAIL_PASSWORD_EMAIL_PLACEHOLDER\",\n    validate: validators.defaultEmailValidator,\n    optional: false,\n    autoComplete: \"email\"\n  };\n}\n\nfunction getDefaultPasswordFormField() {\n  return {\n    id: \"password\",\n    label: \"EMAIL_PASSWORD_PASSWORD_LABEL\",\n    placeholder: \"EMAIL_PASSWORD_PASSWORD_PLACEHOLDER\",\n    validate: validators.defaultPasswordValidator,\n    optional: false,\n    autoComplete: \"new-password\"\n  };\n}\n\nfunction normaliseResetPasswordUsingTokenFeature(signUpPasswordFieldValidate, signUpEmailField, config) {\n  if (config === undefined) {\n    config = {};\n  }\n\n  var disableDefaultUI = config.disableDefaultUI === true;\n  var submitNewPasswordFormStyle = config.submitNewPasswordForm !== undefined && config.submitNewPasswordForm.style !== undefined ? config.submitNewPasswordForm.style : \"\";\n  var submitNewPasswordForm = {\n    style: submitNewPasswordFormStyle,\n    formFields: [{\n      id: \"password\",\n      label: \"EMAIL_PASSWORD_NEW_PASSWORD_LABEL\",\n      placeholder: \"EMAIL_PASSWORD_NEW_PASSWORD_PLACEHOLDER\",\n      validate: signUpPasswordFieldValidate,\n      optional: false,\n      autoComplete: \"new-password\"\n    }, {\n      id: \"confirm-password\",\n      label: \"EMAIL_PASSWORD_CONFIRM_PASSWORD_LABEL\",\n      placeholder: \"EMAIL_PASSWORD_CONFIRM_PASSWORD_PLACEHOLDER\",\n      validate: signUpPasswordFieldValidate,\n      optional: false,\n      autoComplete: \"new-password\"\n    }]\n  };\n  var enterEmailFormStyle = config.enterEmailForm !== undefined && config.enterEmailForm.style !== undefined ? config.enterEmailForm.style : \"\";\n  var enterEmailForm = {\n    style: enterEmailFormStyle,\n    formFields: [sessionAuth.__assign(sessionAuth.__assign({}, getDefaultEmailFormField()), {\n      validate: signUpEmailField.validate,\n      placeholder: \"\",\n      autofocus: true\n    })]\n  };\n  return {\n    disableDefaultUI: disableDefaultUI,\n    submitNewPasswordForm: submitNewPasswordForm,\n    enterEmailForm: enterEmailForm\n  };\n}\n/*\n * mergeFormFields by keeping the provided order, defaultFormFields or merged first, and unmerged userFormFields after.\n */\n\n\nfunction mergeFormFields(defaultFormFields, userFormFields) {\n  // Create a new array with default fields.\n  var mergedFormFields = defaultFormFields; // Loop through user provided fields.\n\n  for (var i = 0; i < userFormFields.length; i++) {\n    var userField = userFormFields[i];\n    var isNewField = true; // Loop through the merged fields array.\n\n    for (var j = 0; j < mergedFormFields.length; j++) {\n      var mergedField = mergedFormFields[j]; // If id is equal, merge the fields\n\n      if (userField.id === mergedField.id) {\n        // Make sure that email and password are kept mandatory.\n        var optional = mergedField.optional; // Init with default value.\n        // If user provided value, overwrite.\n\n        if (userField.optional !== undefined) {\n          optional = userField.optional;\n        } // If \"email\" or \"password\", always mandatory.\n\n\n        if (validators.MANDATORY_FORM_FIELDS_ID_ARRAY.includes(userField.id)) {\n          optional = false;\n        } // Merge.\n\n\n        mergedFormFields[j] = sessionAuth.__assign(sessionAuth.__assign(sessionAuth.__assign({}, mergedFormFields[j]), userField), {\n          optional: optional\n        });\n        isNewField = false;\n        break;\n      }\n    } // If new field, push to mergeFormFields.\n\n\n    if (isNewField) {\n      mergedFormFields.push(sessionAuth.__assign({\n        optional: false,\n        placeholder: userField.label,\n        validate: validators.defaultValidate\n      }, userField));\n    }\n  }\n\n  return mergedFormFields.map(function (field) {\n    return getFormattedFormField(field);\n  });\n}\n\nfunction getFormattedFormField(field) {\n  var _this = this;\n\n  return sessionAuth.__assign(sessionAuth.__assign({}, field), {\n    validate: function (value) {\n      return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              // Absent or not optional empty field\n              if (value === \"\" && field.optional === false) {\n                return [2\n                /*return*/\n                , \"ERROR_NON_OPTIONAL\"];\n              }\n\n              return [4\n              /*yield*/\n              , field.validate(value)];\n\n            case 1:\n              return [2\n              /*return*/\n              , _a.sent()];\n          }\n        });\n      });\n    }\n  });\n}\n/*\n * Class.\n */\n\n\nvar EmailPassword =\n/** @class */\nfunction (_super) {\n  sessionAuth.__extends(EmailPassword, _super);\n\n  function EmailPassword(config) {\n    var _this = _super.call(this, normaliseEmailPasswordConfig(config)) || this;\n\n    _this.getFeatures = function (useComponentOverrides) {\n      if (useComponentOverrides === void 0) {\n        useComponentOverrides = useContext;\n      }\n\n      var features = {};\n\n      if (_this.config.signInAndUpFeature.disableDefaultUI !== true) {\n        var normalisedFullPath = _this.config.appInfo.websiteBasePath.appendPath(new NormalisedURLPath__default.default(\"/\"));\n\n        features[normalisedFullPath.getAsStringDangerous()] = {\n          matches: sessionAuth.matchRecipeIdUsingQueryParams(_this.config.recipeId),\n          component: function (props) {\n            return _this.getFeatureComponent(\"signinup\", props, useComponentOverrides);\n          }\n        };\n      }\n\n      if (_this.config.resetPasswordUsingTokenFeature.disableDefaultUI !== true) {\n        var normalisedFullPath = _this.config.appInfo.websiteBasePath.appendPath(new NormalisedURLPath__default.default(validators.DEFAULT_RESET_PASSWORD_PATH));\n\n        features[normalisedFullPath.getAsStringDangerous()] = {\n          matches: sessionAuth.matchRecipeIdUsingQueryParams(_this.config.recipeId),\n          component: function (props) {\n            return _this.getFeatureComponent(\"resetpassword\", props, useComponentOverrides);\n          }\n        };\n      }\n\n      return features;\n    };\n\n    _this.getDefaultRedirectionURL = function (context) {\n      return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n        var resetPasswordPath;\n        return sessionAuth.__generator(this, function (_a) {\n          if (context.action === \"RESET_PASSWORD\") {\n            resetPasswordPath = new NormalisedURLPath__default.default(validators.DEFAULT_RESET_PASSWORD_PATH);\n            return [2\n            /*return*/\n            , \"\".concat(this.config.appInfo.websiteBasePath.appendPath(resetPasswordPath).getAsStringDangerous(), \"?rid=\").concat(this.config.recipeId)];\n          }\n\n          return [2\n          /*return*/\n          , this.getAuthRecipeDefaultRedirectionURL(context)];\n        });\n      });\n    };\n\n    _this.getFeatureComponent = function (componentName, props, useComponentOverrides) {\n      if (useComponentOverrides === void 0) {\n        useComponentOverrides = useContext;\n      }\n\n      if (componentName === \"signinup\") {\n        if (props.redirectOnSessionExists !== false) {\n          return jsxRuntime.jsx(sessionAuth.UserContextWrapper, sessionAuth.__assign({\n            userContext: props.userContext\n          }, {\n            children: jsxRuntime.jsx(utils.AuthWidgetWrapper, sessionAuth.__assign({\n              authRecipe: _this,\n              history: props.history\n            }, {\n              children: jsxRuntime.jsx(SignInAndUpFeature, sessionAuth.__assign({\n                recipe: _this\n              }, props, {\n                useComponentOverrides: useComponentOverrides\n              }))\n            }))\n          }));\n        } else {\n          return jsxRuntime.jsx(sessionAuth.UserContextWrapper, sessionAuth.__assign({\n            userContext: props.userContext\n          }, {\n            children: jsxRuntime.jsx(SignInAndUpFeature, sessionAuth.__assign({\n              recipe: _this\n            }, props, {\n              useComponentOverrides: useComponentOverrides\n            }))\n          }));\n        }\n      } else if (componentName === \"resetpassword\") {\n        return jsxRuntime.jsx(sessionAuth.UserContextWrapper, sessionAuth.__assign({\n          userContext: props.userContext\n        }, {\n          children: jsxRuntime.jsx(ResetPasswordUsingToken, sessionAuth.__assign({\n            recipe: _this\n          }, props, {\n            useComponentOverrides: useComponentOverrides\n          }))\n        }));\n      } else {\n        throw new Error(\"Should never come here.\");\n      }\n    };\n\n    var builder = new translations.OverrideableBuilder_1(getRecipeImplementation({\n      appInfo: _this.config.appInfo,\n      recipeId: _this.config.recipeId,\n      onHandleEvent: _this.config.onHandleEvent,\n      preAPIHook: _this.config.preAPIHook,\n      postAPIHook: _this.config.postAPIHook\n    }));\n    _this.recipeImpl = builder.override(_this.config.override.functions).build();\n    return _this;\n  }\n\n  EmailPassword.init = function (config) {\n    return function (appInfo) {\n      EmailPassword.instance = new EmailPassword(sessionAuth.__assign(sessionAuth.__assign({}, config), {\n        appInfo: appInfo,\n        recipeId: EmailPassword.RECIPE_ID\n      }));\n      return EmailPassword.instance;\n    };\n  };\n\n  EmailPassword.getInstanceOrThrow = function () {\n    if (EmailPassword.instance === undefined) {\n      var error = \"No instance of EmailPassword found. Make sure to call the EmailPassword.init method.\" + \"See https://supertokens.io/docs/emailpassword/quick-setup/frontend\"; // eslint-disable-next-line supertokens-auth-react/no-direct-window-object\n\n      if (typeof window === \"undefined\") {\n        error = error + sessionAuth.SSR_ERROR;\n      }\n\n      throw Error(error);\n    }\n\n    return EmailPassword.instance;\n  };\n  /*\n   * Tests methods.\n   */\n\n\n  EmailPassword.reset = function () {\n    if (!sessionAuth.isTest()) {\n      return;\n    }\n\n    EmailPassword.instance = undefined;\n    return;\n  };\n\n  EmailPassword.RECIPE_ID = \"emailpassword\";\n  return EmailPassword;\n}(utils.AuthRecipe);\n\nexports.EmailPassword = EmailPassword;\nexports.Provider = Provider;\nexports.ResetPasswordUsingTokenThemeWrapper = ResetPasswordUsingTokenThemeWrapper;\nexports.SignInAndUpThemeWrapper = SignInAndUpThemeWrapper;\nexports.SignInFooter = SignInFooter;\nexports.SignInForm = SignInForm;\nexports.SignInHeader = SignInHeader;\nexports.SignUpFooter = SignUpFooter;\nexports.SignUpForm = SignUpForm;\nexports.SignUpHeader = SignUpHeader;\nexports.defaultTranslationsEmailPassword = defaultTranslationsEmailPassword;\nexports.getRecipeImplementation = getRecipeImplementation;\nexports.useChildProps = useChildProps;\nexports.useFeatureReducer = useFeatureReducer;","map":{"version":3,"mappings":"","names":[],"sources":[],"sourcesContent":["\"use strict\";\n\nvar sessionAuth = require(\"./session-shared.js\");\nvar jsxRuntime = require(\"react/jsx-runtime\");\nvar translations = require(\"./translations.js\");\nvar NormalisedURLPath = require(\"supertokens-web-js/utils/normalisedURLPath\");\nvar utils = require(\"./authRecipe-shared.js\");\nvar React = require(\"react\");\nvar translations$1 = require(\"./emailverification-shared.js\");\nvar translationContext = require(\"./translationContext.js\");\nrequire(\"./index.js\");\nvar validators = require(\"./emailpassword-shared3.js\");\nvar STGeneralError = require(\"supertokens-web-js/utils/error\");\nvar button = require(\"./emailpassword-shared.js\");\nvar recipeImplementation = require(\"supertokens-web-js/recipe/emailpassword/recipeImplementation\");\n\nfunction _interopDefault(e) {\n    return e && e.__esModule ? e : { default: e };\n}\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(\n                    n,\n                    k,\n                    d.get\n                        ? d\n                        : {\n                              enumerable: true,\n                              get: function () {\n                                  return e[k];\n                              },\n                          }\n                );\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\n\nvar NormalisedURLPath__default = /*#__PURE__*/ _interopDefault(NormalisedURLPath);\nvar React__namespace = /*#__PURE__*/ _interopNamespace(React);\nvar STGeneralError__default = /*#__PURE__*/ _interopDefault(STGeneralError);\n\nvar _a = translations.createGenericComponentsOverrideContext(),\n    useContext = _a[0],\n    Provider = _a[1];\n\n/* Copyright (c) 2021, VRAI Labs and/or its affiliates. All rights reserved.\n *\n * This software is licensed under the Apache License, Version 2.0 (the\n * \"License\") as published by the Apache Software Foundation.\n *\n * You may not use this file except in compliance with the License. You may\n * obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n/*\n * Imports.\n */\n/*\n * Component.\n */\nfunction HeavyArrowLeftIcon(_a) {\n    var color = _a.color;\n    return jsxRuntime.jsx(\n        \"svg\",\n        sessionAuth.__assign(\n            {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                width: \"16\",\n                height: \"13\",\n                viewBox: \"0 0 16 13\",\n                \"data-supertokens\": \"heavyArrowLeftIcon\",\n            },\n            {\n                children: jsxRuntime.jsx(\"path\", {\n                    fill: color,\n                    d: \"M13 6.8h.022H3.8l2.9 2.9a.761.761 0 0 1 0 1.07l-.451.451a.754.754 0 0 1-1.064 0L.22 6.254a.759.759 0 0 1 0-1.068L5.186.22a.755.755 0 0 1 1.064 0l.45.451a.746.746 0 0 1 .22.532.724.724 0 0 1-.22.522l-2.93 2.92h9.24a.781.781 0 0 1 .764.773v.638A.766.766 0 0 1 13 6.8z\",\n                    transform: \"translate(1.182 .708)\",\n                }),\n            }\n        )\n    );\n}\n\n/*\n * Component.\n */\nfunction BackButton(_a) {\n    var onClick = _a.onClick;\n    return jsxRuntime.jsx(\n        \"button\",\n        sessionAuth.__assign(\n            { onClick: onClick, \"data-supertokens\": \"backButton backButtonCommon\" },\n            { children: jsxRuntime.jsx(HeavyArrowLeftIcon, { color: \"rgb(var(--palette-textTitle))\" }) }\n        )\n    );\n}\n\n/*\n * Component.\n */\nfunction BackToSignInButton(_a) {\n    var onClick = _a.onClick;\n    var t = translationContext.useTranslation();\n    return jsxRuntime.jsxs(\n        \"div\",\n        sessionAuth.__assign(\n            { \"data-supertokens\": \"secondaryText secondaryLinkWithLeftArrow\", onClick: onClick },\n            {\n                children: [\n                    jsxRuntime.jsx(validators.ArrowLeftIcon, { color: \"rgb(var(--palette-secondaryText))\" }),\n                    t(\"EMAIL_PASSWORD_RESET_SIGN_IN_LINK\"),\n                ],\n            }\n        )\n    );\n}\n\nvar EmailPasswordResetPasswordEmail = function (props) {\n    var t = translationContext.useTranslation();\n    var userContext = sessionAuth.useUserContext();\n    var _a = React.useState(\"READY\"),\n        status = _a[0],\n        setStatus = _a[1];\n    var _b = React.useState(\"\"),\n        emailFieldValue = _b[0],\n        setEmailFieldValue = _b[1];\n    var onSuccess = function () {\n        setStatus(\"SENT\");\n    };\n    var resend = function () {\n        setStatus(\"READY\");\n    };\n    var formFields = props.formFields;\n    var emailSuccessText =\n        t(\"EMAIL_PASSWORD_RESET_SEND_BEFORE_EMAIL\") +\n        (emailFieldValue !== undefined && emailFieldValue.length > 0\n            ? emailFieldValue\n            : t(\"EMAIL_PASSWORD_RESET_SEND_FALLBACK_EMAIL\")) +\n        t(\"EMAIL_PASSWORD_RESET_SEND_AFTER_EMAIL\");\n    if (status === \"SENT\") {\n        return jsxRuntime.jsx(\n            \"div\",\n            sessionAuth.__assign(\n                { \"data-supertokens\": \"container\" },\n                {\n                    children: jsxRuntime.jsxs(\n                        \"div\",\n                        sessionAuth.__assign(\n                            { \"data-supertokens\": \"row\" },\n                            {\n                                children: [\n                                    jsxRuntime.jsxs(\n                                        \"div\",\n                                        sessionAuth.__assign(\n                                            { \"data-supertokens\": \"primaryText enterEmailSuccessMessage\" },\n                                            {\n                                                children: [\n                                                    emailSuccessText,\n                                                    jsxRuntime.jsx(\n                                                        \"span\",\n                                                        sessionAuth.__assign(\n                                                            {\n                                                                \"data-supertokens\": \"link resendEmailLink\",\n                                                                onClick: resend,\n                                                            },\n                                                            { children: t(\"EMAIL_PASSWORD_RESET_RESEND_LINK\") }\n                                                        )\n                                                    ),\n                                                ],\n                                            }\n                                        )\n                                    ),\n                                    jsxRuntime.jsx(BackToSignInButton, { onClick: props.onBackButtonClicked }),\n                                ],\n                            }\n                        )\n                    ),\n                }\n            )\n        );\n    }\n    // Otherwise, return Form.\n    return jsxRuntime.jsx(\n        \"div\",\n        sessionAuth.__assign(\n            { \"data-supertokens\": \"container\" },\n            {\n                children: jsxRuntime.jsxs(\n                    \"div\",\n                    sessionAuth.__assign(\n                        { \"data-supertokens\": \"row\" },\n                        {\n                            children: [\n                                jsxRuntime.jsxs(\n                                    \"div\",\n                                    sessionAuth.__assign(\n                                        { \"data-supertokens\": \"headerTitle resetPasswordHeaderTitle\" },\n                                        {\n                                            children: [\n                                                jsxRuntime.jsx(BackButton, { onClick: props.onBackButtonClicked }),\n                                                t(\"EMAIL_PASSWORD_RESET_HEADER_TITLE\"),\n                                                jsxRuntime.jsx(\"span\", {\n                                                    \"data-supertokens\": \"backButtonPlaceholder backButtonCommon\",\n                                                }),\n                                            ],\n                                        }\n                                    )\n                                ),\n                                jsxRuntime.jsx(\n                                    \"div\",\n                                    sessionAuth.__assign(\n                                        { \"data-supertokens\": \"headerSubtitle\" },\n                                        {\n                                            children: jsxRuntime.jsx(\n                                                \"div\",\n                                                sessionAuth.__assign(\n                                                    { \"data-supertokens\": \"secondaryText\" },\n                                                    { children: t(\"EMAIL_PASSWORD_RESET_HEADER_SUBTITLE\") }\n                                                )\n                                            ),\n                                        }\n                                    )\n                                ),\n                                props.error !== undefined &&\n                                    jsxRuntime.jsx(translations.GeneralError, { error: props.error }),\n                                jsxRuntime.jsx(validators.FormBase, {\n                                    clearError: props.clearError,\n                                    onError: props.onError,\n                                    formFields: formFields,\n                                    buttonLabel: \"EMAIL_PASSWORD_RESET_SEND_BTN\",\n                                    onSuccess: onSuccess,\n                                    callAPI: function (formFields) {\n                                        return sessionAuth.__awaiter(void 0, void 0, void 0, function () {\n                                            var validationErrors, emailField;\n                                            return sessionAuth.__generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        return [\n                                                            4 /*yield*/,\n                                                            sessionAuth.validateForm(\n                                                                formFields,\n                                                                props.config.resetPasswordUsingTokenFeature\n                                                                    .enterEmailForm.formFields\n                                                            ),\n                                                        ];\n                                                    case 1:\n                                                        validationErrors = _a.sent();\n                                                        if (validationErrors.length > 0) {\n                                                            return [\n                                                                2 /*return*/,\n                                                                {\n                                                                    status: \"FIELD_ERROR\",\n                                                                    formFields: validationErrors,\n                                                                },\n                                                            ];\n                                                        }\n                                                        emailField = formFields.find(function (field) {\n                                                            return field.id === \"email\";\n                                                        });\n                                                        if (emailField !== undefined) {\n                                                            setEmailFieldValue(emailField.value);\n                                                        }\n                                                        return [\n                                                            4 /*yield*/,\n                                                            props.recipeImplementation.sendPasswordResetEmail({\n                                                                formFields: formFields,\n                                                                userContext: userContext,\n                                                            }),\n                                                        ];\n                                                    case 2:\n                                                        return [2 /*return*/, _a.sent()];\n                                                }\n                                            });\n                                        });\n                                    },\n                                    showLabels: true,\n                                    validateOnBlur: true,\n                                }),\n                            ],\n                        }\n                    )\n                ),\n            }\n        )\n    );\n};\nvar ResetPasswordEmail = translations.withOverride(\"EmailPasswordResetPasswordEmail\", EmailPasswordResetPasswordEmail);\n\nvar EmailPasswordSubmitNewPassword = function (props) {\n    var t = translationContext.useTranslation();\n    var userContext = sessionAuth.useUserContext();\n    var _a = React.useState(\"READY\"),\n        status = _a[0],\n        setStatus = _a[1];\n    var onSuccess = function () {\n        setStatus(\"SUCCESS\");\n    };\n    var formFields = props.formFields,\n        onSignInClicked = props.onSignInClicked;\n    if (status === \"SUCCESS\") {\n        return jsxRuntime.jsx(\n            \"div\",\n            sessionAuth.__assign(\n                { \"data-supertokens\": \"container\" },\n                {\n                    children: jsxRuntime.jsxs(\n                        \"div\",\n                        sessionAuth.__assign(\n                            { \"data-supertokens\": \"row\" },\n                            {\n                                children: [\n                                    jsxRuntime.jsx(\n                                        \"div\",\n                                        sessionAuth.__assign(\n                                            { \"data-supertokens\": \"headerTitle\" },\n                                            { children: t(\"EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_HEADER_TITLE\") }\n                                        )\n                                    ),\n                                    jsxRuntime.jsx(\n                                        validators.FormRow,\n                                        {\n                                            children: jsxRuntime.jsxs(React.Fragment, {\n                                                children: [\n                                                    jsxRuntime.jsx(\n                                                        \"div\",\n                                                        sessionAuth.__assign(\n                                                            {\n                                                                \"data-supertokens\":\n                                                                    \"primaryText submitNewPasswordSuccessMessage\",\n                                                            },\n                                                            {\n                                                                children: t(\n                                                                    \"EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_DESC\"\n                                                                ),\n                                                            }\n                                                        )\n                                                    ),\n                                                    jsxRuntime.jsx(button.Button, {\n                                                        disabled: false,\n                                                        isLoading: false,\n                                                        type: \"button\",\n                                                        onClick: onSignInClicked,\n                                                        label: \"EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_SIGN_IN_BTN\",\n                                                    }),\n                                                ],\n                                            }),\n                                        },\n                                        \"form-button\"\n                                    ),\n                                ],\n                            }\n                        )\n                    ),\n                }\n            )\n        );\n    }\n    return jsxRuntime.jsx(\n        \"div\",\n        sessionAuth.__assign(\n            { \"data-supertokens\": \"container\" },\n            {\n                children: jsxRuntime.jsxs(\n                    \"div\",\n                    sessionAuth.__assign(\n                        { \"data-supertokens\": \"row\" },\n                        {\n                            children: [\n                                jsxRuntime.jsx(\n                                    \"div\",\n                                    sessionAuth.__assign(\n                                        { \"data-supertokens\": \"headerTitle\" },\n                                        { children: t(\"EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_TITLE\") }\n                                    )\n                                ),\n                                jsxRuntime.jsx(\n                                    \"div\",\n                                    sessionAuth.__assign(\n                                        { \"data-supertokens\": \"headerSubtitle\" },\n                                        {\n                                            children: jsxRuntime.jsx(\n                                                \"div\",\n                                                sessionAuth.__assign(\n                                                    { \"data-supertokens\": \"secondaryText\" },\n                                                    { children: t(\"EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_SUBTITLE\") }\n                                                )\n                                            ),\n                                        }\n                                    )\n                                ),\n                                props.error !== undefined &&\n                                    jsxRuntime.jsx(translations.GeneralError, { error: props.error }),\n                                jsxRuntime.jsx(validators.FormBase, {\n                                    formFields: formFields,\n                                    clearError: props.clearError,\n                                    onError: props.onError,\n                                    buttonLabel: \"EMAIL_PASSWORD_RESET_SUBMIT_PW_CHANGE_PW_BTN\",\n                                    onSuccess: onSuccess,\n                                    validateOnBlur: true,\n                                    callAPI: function (fields) {\n                                        return sessionAuth.__awaiter(void 0, void 0, void 0, function () {\n                                            var validationErrors, response;\n                                            return sessionAuth.__generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        return [\n                                                            4 /*yield*/,\n                                                            sessionAuth.validateForm(\n                                                                fields,\n                                                                props.config.resetPasswordUsingTokenFeature\n                                                                    .submitNewPasswordForm.formFields\n                                                            ),\n                                                        ];\n                                                    case 1:\n                                                        validationErrors = _a.sent();\n                                                        if (validationErrors.length > 0) {\n                                                            return [\n                                                                2 /*return*/,\n                                                                {\n                                                                    status: \"FIELD_ERROR\",\n                                                                    formFields: validationErrors,\n                                                                },\n                                                            ];\n                                                        }\n                                                        // Verify that both passwords match.\n                                                        if (fields[0].value !== fields[1].value) {\n                                                            return [\n                                                                2 /*return*/,\n                                                                {\n                                                                    status: \"FIELD_ERROR\",\n                                                                    formFields: [\n                                                                        {\n                                                                            id: fields[1].id,\n                                                                            error: \"ERROR_CONFIRM_PASSWORD_NO_MATCH\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ];\n                                                        }\n                                                        return [\n                                                            4 /*yield*/,\n                                                            props.recipeImplementation.submitNewPassword({\n                                                                formFields: fields,\n                                                                userContext: userContext,\n                                                            }),\n                                                        ];\n                                                    case 2:\n                                                        response = _a.sent();\n                                                        if (response.status === \"RESET_PASSWORD_INVALID_TOKEN_ERROR\") {\n                                                            throw new STGeneralError__default.default(\n                                                                \"EMAIL_PASSWORD_RESET_PASSWORD_INVALID_TOKEN_ERROR\"\n                                                            );\n                                                        }\n                                                        return [\n                                                            2 /*return*/,\n                                                            response.status === \"FIELD_ERROR\"\n                                                                ? response\n                                                                : {\n                                                                      status: \"OK\",\n                                                                  },\n                                                        ];\n                                                }\n                                            });\n                                        });\n                                    },\n                                    showLabels: true,\n                                }),\n                            ],\n                        }\n                    )\n                ),\n            }\n        )\n    );\n};\nvar SubmitNewPassword = translations.withOverride(\"EmailPasswordSubmitNewPassword\", EmailPasswordSubmitNewPassword);\n\n/*\n * Component.\n */\nfunction ResetPasswordUsingTokenTheme(props) {\n    /*\n     * Render.\n     */\n    // If no token, return SubmitNewPassword.\n    if (props.submitNewPasswordForm !== undefined) {\n        return jsxRuntime.jsx(SubmitNewPassword, sessionAuth.__assign({}, props.submitNewPasswordForm));\n    }\n    // Otherwise, return EnterEmail.\n    return jsxRuntime.jsx(ResetPasswordEmail, sessionAuth.__assign({}, props.enterEmailForm));\n}\nfunction ResetPasswordUsingTokenThemeWrapper(props) {\n    var hasFont = translations.hasFontDefined(props.config.rootStyle);\n    var userStyles = props.submitNewPasswordForm\n        ? props.config.resetPasswordUsingTokenFeature.submitNewPasswordForm.style\n        : props.config.resetPasswordUsingTokenFeature.enterEmailForm.style;\n    return jsxRuntime.jsx(\n        sessionAuth.UserContextWrapper,\n        sessionAuth.__assign(\n            { userContext: props.userContext },\n            {\n                children: jsxRuntime.jsx(\n                    translations$1.ThemeBase,\n                    sessionAuth.__assign(\n                        { loadDefaultFont: !hasFont, userStyles: [props.config.rootStyle, userStyles] },\n                        { children: jsxRuntime.jsx(ResetPasswordUsingTokenTheme, sessionAuth.__assign({}, props)) }\n                    )\n                ),\n            }\n        )\n    );\n}\n\nvar SignInFooter = translations.withOverride(\"EmailPasswordSignInFooter\", function EmailPasswordSignInFooter(_a) {\n    var onClick = _a.onClick;\n    var t = translationContext.useTranslation();\n    return jsxRuntime.jsx(\n        \"div\",\n        sessionAuth.__assign(\n            { \"data-supertokens\": \"link secondaryText forgotPasswordLink\", onClick: onClick },\n            { children: t(\"EMAIL_PASSWORD_SIGN_IN_FOOTER_FORGOT_PW_LINK\") }\n        )\n    );\n});\n\nvar SignInForm = translations.withOverride(\"EmailPasswordSignInForm\", function EmailPasswordSignInForm(props) {\n    var _this = this;\n    var userContext = sessionAuth.useUserContext();\n    return jsxRuntime.jsx(validators.FormBase, {\n        formFields: props.formFields,\n        clearError: props.clearError,\n        onError: props.onError,\n        buttonLabel: \"EMAIL_PASSWORD_SIGN_IN_SUBMIT_BTN\",\n        onSuccess: props.onSuccess,\n        callAPI: function (formFields) {\n            return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n                var validationErrors, response;\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            return [\n                                4 /*yield*/,\n                                sessionAuth.validateForm(\n                                    formFields,\n                                    props.config.signInAndUpFeature.signInForm.formFields\n                                ),\n                            ];\n                        case 1:\n                            validationErrors = _a.sent();\n                            if (validationErrors.length > 0) {\n                                return [\n                                    2 /*return*/,\n                                    {\n                                        status: \"FIELD_ERROR\",\n                                        formFields: validationErrors,\n                                    },\n                                ];\n                            }\n                            return [\n                                4 /*yield*/,\n                                props.recipeImplementation.signIn({\n                                    formFields: formFields,\n                                    userContext: userContext,\n                                }),\n                            ];\n                        case 2:\n                            response = _a.sent();\n                            if (response.status === \"WRONG_CREDENTIALS_ERROR\") {\n                                throw new STGeneralError__default.default(\n                                    \"EMAIL_PASSWORD_SIGN_IN_WRONG_CREDENTIALS_ERROR\"\n                                );\n                            } else {\n                                return [2 /*return*/, response];\n                            }\n                    }\n                });\n            });\n        },\n        validateOnBlur: false,\n        showLabels: true,\n        footer: props.footer,\n    });\n});\n\nvar SignInHeader = translations.withOverride(\"EmailPasswordSignInHeader\", function EmailPasswordSignInHeader(_a) {\n    var onClick = _a.onClick;\n    var t = translationContext.useTranslation();\n    return jsxRuntime.jsxs(React.Fragment, {\n        children: [\n            jsxRuntime.jsx(\n                \"div\",\n                sessionAuth.__assign(\n                    { \"data-supertokens\": \"headerTitle\" },\n                    { children: t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_TITLE\") }\n                )\n            ),\n            jsxRuntime.jsx(\n                \"div\",\n                sessionAuth.__assign(\n                    { \"data-supertokens\": \"headerSubtitle\" },\n                    {\n                        children: jsxRuntime.jsxs(\n                            \"div\",\n                            sessionAuth.__assign(\n                                { \"data-supertokens\": \"secondaryText\" },\n                                {\n                                    children: [\n                                        t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_START\"),\n                                        jsxRuntime.jsx(\n                                            \"span\",\n                                            sessionAuth.__assign(\n                                                { \"data-supertokens\": \"link\", onClick: onClick },\n                                                { children: t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_SIGN_UP_LINK\") }\n                                            )\n                                        ),\n                                        t(\"EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_END\"),\n                                    ],\n                                }\n                            )\n                        ),\n                    }\n                )\n            ),\n            jsxRuntime.jsx(\"div\", { \"data-supertokens\": \"divider\" }),\n        ],\n    });\n});\n\nvar SignIn = translations.withOverride(\"EmailPasswordSignIn\", function EmailPasswordSignIn(props) {\n    return jsxRuntime.jsxs(\n        \"div\",\n        sessionAuth.__assign(\n            { \"data-supertokens\": \"container\" },\n            {\n                children: [\n                    jsxRuntime.jsxs(\n                        \"div\",\n                        sessionAuth.__assign(\n                            { \"data-supertokens\": \"row\" },\n                            {\n                                children: [\n                                    jsxRuntime.jsx(SignInHeader, { onClick: props.signUpClicked }),\n                                    props.error !== undefined &&\n                                        jsxRuntime.jsx(translations.GeneralError, { error: props.error }),\n                                    jsxRuntime.jsx(\n                                        SignInForm,\n                                        sessionAuth.__assign({}, props, {\n                                            footer: jsxRuntime.jsx(SignInFooter, {\n                                                onClick: props.forgotPasswordClick,\n                                            }),\n                                        })\n                                    ),\n                                ],\n                            }\n                        )\n                    ),\n                    jsxRuntime.jsx(utils.SuperTokensBranding, {}),\n                ],\n            }\n        )\n    );\n});\n\nvar SignUpFooter = translations.withOverride(\"EmailPasswordSignUpFooter\", function EmailPasswordSignUpFooter(_a) {\n    var termsOfServiceLink = _a.termsOfServiceLink,\n        privacyPolicyLink = _a.privacyPolicyLink;\n    var t = translationContext.useTranslation();\n    if (termsOfServiceLink === undefined && privacyPolicyLink === undefined) {\n        return null;\n    }\n    return jsxRuntime.jsxs(\n        \"div\",\n        sessionAuth.__assign(\n            { \"data-supertokens\": \"secondaryText privacyPolicyAndTermsAndConditions\" },\n            {\n                children: [\n                    t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_START\"),\n                    termsOfServiceLink !== undefined &&\n                        jsxRuntime.jsx(\n                            \"a\",\n                            sessionAuth.__assign(\n                                {\n                                    \"data-supertokens\": \"link\",\n                                    href: termsOfServiceLink,\n                                    target: \"_blank\",\n                                    rel: \"noopener noreferer\",\n                                },\n                                { children: t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_TOS\") }\n                            )\n                        ),\n                    termsOfServiceLink !== undefined &&\n                        privacyPolicyLink !== undefined &&\n                        t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_AND\"),\n                    privacyPolicyLink !== undefined &&\n                        jsxRuntime.jsx(\n                            \"a\",\n                            sessionAuth.__assign(\n                                {\n                                    \"data-supertokens\": \"link\",\n                                    href: privacyPolicyLink,\n                                    target: \"_blank\",\n                                    rel: \"noopener noreferer\",\n                                },\n                                { children: t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_PP\") }\n                            )\n                        ),\n                    t(\"EMAIL_PASSWORD_SIGN_UP_FOOTER_END\"),\n                ],\n            }\n        )\n    );\n});\n\n/*\n * Component.\n */\nvar SignUpForm = translations.withOverride(\"EmailPasswordSignUpForm\", function EmailPasswordSignUpForm(props) {\n    var _this = this;\n    var userContext = sessionAuth.useUserContext();\n    return jsxRuntime.jsx(validators.FormBase, {\n        formFields: props.formFields,\n        clearError: props.clearError,\n        onError: props.onError,\n        buttonLabel: \"EMAIL_PASSWORD_SIGN_UP_SUBMIT_BTN\",\n        onSuccess: props.onSuccess,\n        callAPI: function (formFields) {\n            return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n                var validationErrors;\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            return [\n                                4 /*yield*/,\n                                sessionAuth.validateForm(\n                                    formFields,\n                                    props.config.signInAndUpFeature.signUpForm.formFields\n                                ),\n                            ];\n                        case 1:\n                            validationErrors = _a.sent();\n                            if (validationErrors.length > 0) {\n                                return [\n                                    2 /*return*/,\n                                    {\n                                        status: \"FIELD_ERROR\",\n                                        formFields: validationErrors,\n                                    },\n                                ];\n                            }\n                            return [\n                                2 /*return*/,\n                                props.recipeImplementation.signUp({\n                                    formFields: formFields,\n                                    userContext: userContext,\n                                }),\n                            ];\n                    }\n                });\n            });\n        },\n        validateOnBlur: true,\n        showLabels: true,\n        footer: props.footer,\n    });\n});\n\nvar SignUpHeader = translations.withOverride(\"EmailPasswordSignUpHeader\", function EmailPasswordSignUpHeader(_a) {\n    var onClick = _a.onClick;\n    var t = translationContext.useTranslation();\n    return jsxRuntime.jsxs(React.Fragment, {\n        children: [\n            jsxRuntime.jsx(\n                \"div\",\n                sessionAuth.__assign(\n                    { \"data-supertokens\": \"headerTitle\" },\n                    { children: t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_TITLE\") }\n                )\n            ),\n            jsxRuntime.jsx(\n                \"div\",\n                sessionAuth.__assign(\n                    { \"data-supertokens\": \"headerSubtitle\" },\n                    {\n                        children: jsxRuntime.jsxs(\n                            \"div\",\n                            sessionAuth.__assign(\n                                { \"data-supertokens\": \"secondaryText\" },\n                                {\n                                    children: [\n                                        t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_START\"),\n                                        jsxRuntime.jsx(\n                                            \"span\",\n                                            sessionAuth.__assign(\n                                                { \"data-supertokens\": \"link\", onClick: onClick },\n                                                { children: t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_SIGN_IN_LINK\") }\n                                            )\n                                        ),\n                                        t(\"EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_END\"),\n                                    ],\n                                }\n                            )\n                        ),\n                    }\n                )\n            ),\n            jsxRuntime.jsx(\"div\", { \"data-supertokens\": \"divider\" }),\n        ],\n    });\n});\n\nvar SignUp = translations.withOverride(\"EmailPasswordSignUp\", function EmailPasswordSignUp(props) {\n    return jsxRuntime.jsxs(\n        \"div\",\n        sessionAuth.__assign(\n            { \"data-supertokens\": \"container\" },\n            {\n                children: [\n                    jsxRuntime.jsxs(\n                        \"div\",\n                        sessionAuth.__assign(\n                            { \"data-supertokens\": \"row\" },\n                            {\n                                children: [\n                                    jsxRuntime.jsx(SignUpHeader, { onClick: props.signInClicked }),\n                                    props.error !== undefined &&\n                                        jsxRuntime.jsx(translations.GeneralError, { error: props.error }),\n                                    jsxRuntime.jsx(\n                                        SignUpForm,\n                                        sessionAuth.__assign({}, props, {\n                                            footer: jsxRuntime.jsx(SignUpFooter, {\n                                                privacyPolicyLink:\n                                                    props.config.signInAndUpFeature.signUpForm.privacyPolicyLink,\n                                                termsOfServiceLink:\n                                                    props.config.signInAndUpFeature.signUpForm.termsOfServiceLink,\n                                            }),\n                                        })\n                                    ),\n                                ],\n                            }\n                        )\n                    ),\n                    jsxRuntime.jsx(utils.SuperTokensBranding, {}),\n                ],\n            }\n        )\n    );\n});\n\nvar SignInAndUpTheme = function (props) {\n    // If isSignUp, return signUp.\n    if (props.featureState.isSignUp) {\n        return jsxRuntime.jsx(\n            SignUp,\n            sessionAuth.__assign({}, props.signUpForm, {\n                signInClicked: function () {\n                    props.dispatch({ type: \"setSignIn\" });\n                },\n            })\n        );\n    }\n    // Otherwise, return SignIn.\n    return jsxRuntime.jsx(\n        SignIn,\n        sessionAuth.__assign({}, props.signInForm, {\n            signUpClicked: function () {\n                props.dispatch({ type: \"setSignUp\" });\n            },\n        })\n    );\n};\nfunction SignInAndUpThemeWrapper(props) {\n    var hasFont = translations.hasFontDefined(props.config.rootStyle);\n    var activeStyle = props.featureState.isSignUp\n        ? props.config.signInAndUpFeature.signUpForm.style\n        : props.config.signInAndUpFeature.signInForm.style;\n    return jsxRuntime.jsx(\n        sessionAuth.UserContextWrapper,\n        sessionAuth.__assign(\n            { userContext: props.userContext },\n            {\n                children: jsxRuntime.jsx(\n                    translations$1.ThemeBase,\n                    sessionAuth.__assign(\n                        { loadDefaultFont: !hasFont, userStyles: [props.config.rootStyle, activeStyle] },\n                        { children: jsxRuntime.jsx(SignInAndUpTheme, sessionAuth.__assign({}, props)) }\n                    )\n                ),\n            }\n        )\n    );\n}\n\nvar defaultTranslationsEmailPassword = {\n    en: sessionAuth.__assign(\n        sessionAuth.__assign(\n            sessionAuth.__assign({}, translations.defaultTranslationsCommon.en),\n            translations$1.defaultTranslationsEmailVerification.en\n        ),\n        {\n            EMAIL_PASSWORD_EMAIL_LABEL: \"Email\",\n            EMAIL_PASSWORD_EMAIL_PLACEHOLDER: \"Email address\",\n            EMAIL_PASSWORD_PASSWORD_LABEL: \"Password\",\n            EMAIL_PASSWORD_PASSWORD_PLACEHOLDER: \"Password\",\n            EMAIL_PASSWORD_SIGN_IN_HEADER_TITLE: \"Sign In\",\n            EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_START: \"Not registered yet?\",\n            EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_SIGN_UP_LINK: \"Sign Up\",\n            EMAIL_PASSWORD_SIGN_IN_HEADER_SUBTITLE_END: \"\",\n            EMAIL_PASSWORD_SIGN_IN_FOOTER_FORGOT_PW_LINK: \"Forgot password?\",\n            EMAIL_PASSWORD_SIGN_IN_SUBMIT_BTN: \"SIGN IN\",\n            EMAIL_PASSWORD_SIGN_IN_WRONG_CREDENTIALS_ERROR: \"Incorrect email and password combination\",\n            EMAIL_PASSWORD_SIGN_UP_HEADER_TITLE: \"Sign Up\",\n            EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_START: \"Already have an account?\",\n            EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_SIGN_IN_LINK: \"Sign In\",\n            EMAIL_PASSWORD_SIGN_UP_HEADER_SUBTITLE_END: \"\",\n            EMAIL_PASSWORD_SIGN_UP_FOOTER_START: \"By continuing, you agree to our \",\n            EMAIL_PASSWORD_SIGN_UP_FOOTER_TOS: \"Terms of Service\",\n            EMAIL_PASSWORD_SIGN_UP_FOOTER_AND: \" and \",\n            EMAIL_PASSWORD_SIGN_UP_FOOTER_PP: \"Privacy Policy\",\n            EMAIL_PASSWORD_SIGN_UP_FOOTER_END: \"\",\n            EMAIL_PASSWORD_SIGN_UP_SUBMIT_BTN: \"SIGN UP\",\n            EMAIL_PASSWORD_EMAIL_ALREADY_EXISTS: \"This email already exists. Please sign in instead\",\n            EMAIL_PASSWORD_RESET_HEADER_TITLE: \"Reset your password\",\n            EMAIL_PASSWORD_RESET_HEADER_SUBTITLE: \"We will send you an email to reset your password\",\n            EMAIL_PASSWORD_RESET_SEND_FALLBACK_EMAIL: \"your account\",\n            EMAIL_PASSWORD_RESET_SEND_BEFORE_EMAIL: \"A password reset email has been sent to \",\n            EMAIL_PASSWORD_RESET_SEND_AFTER_EMAIL: \", if it exists in our system. \",\n            EMAIL_PASSWORD_RESET_RESEND_LINK: \"Resend or change email\",\n            EMAIL_PASSWORD_RESET_SEND_BTN: \"Email me\",\n            EMAIL_PASSWORD_RESET_SIGN_IN_LINK: \"Sign In\",\n            EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_HEADER_TITLE: \"Success!\",\n            EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_DESC: \"Your password has been updated successfully\",\n            EMAIL_PASSWORD_RESET_SUBMIT_PW_SUCCESS_SIGN_IN_BTN: \"SIGN IN\",\n            EMAIL_PASSWORD_NEW_PASSWORD_LABEL: \"New password\",\n            EMAIL_PASSWORD_NEW_PASSWORD_PLACEHOLDER: \"New password\",\n            EMAIL_PASSWORD_CONFIRM_PASSWORD_LABEL: \"Confirm password\",\n            EMAIL_PASSWORD_CONFIRM_PASSWORD_PLACEHOLDER: \"Confirm your password\",\n            EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_TITLE: \"Change your password\",\n            EMAIL_PASSWORD_RESET_SUBMIT_PW_HEADER_SUBTITLE: \"Enter a new password below to change your password\",\n            EMAIL_PASSWORD_RESET_SUBMIT_PW_CHANGE_PW_BTN: \"CHANGE PASSWORD\",\n            EMAIL_PASSWORD_RESET_PASSWORD_INVALID_TOKEN_ERROR: \"Invalid password reset token\",\n            ERROR_EMAIL_NON_STRING: \"Email must be of type string\",\n            ERROR_EMAIL_INVALID: \"Email is invalid\",\n            ERROR_PASSWORD_NON_STRING: \"Password must be of type string\",\n            ERROR_PASSWORD_TOO_SHORT: \"Password must contain at least 8 characters, including a number\",\n            ERROR_PASSWORD_TOO_LONG: \"Password's length must be lesser than 100 characters\",\n            ERROR_PASSWORD_NO_ALPHA: \"Password must contain at least one alphabet\",\n            ERROR_PASSWORD_NO_NUM: \"Password must contain at least one number\",\n            ERROR_CONFIRM_PASSWORD_NO_MATCH: \"Confirmation password doesn't match\",\n            ERROR_NON_OPTIONAL: \"Field is not optional\",\n            /*\n             * The following are error messages from our backend SDK.\n             * These are returned as full messages to preserver compatibilty, but they work just like the keys above.\n             * They are shown as is by default (setting the value to undefined will display the raw translation key)\n             */\n            \"This email already exists. Please sign in instead.\": undefined,\n            \"Field is not optional\": undefined,\n            \"Password must contain at least 8 characters, including a number\": undefined,\n            \"Password's length must be lesser than 100 characters\": undefined,\n            \"Password must contain at least one alphabet\": undefined,\n            \"Password must contain at least one number\": undefined,\n            \"Email is invalid\": undefined,\n        }\n    ),\n};\n\nvar ResetPasswordUsingToken = function (props) {\n    var token = sessionAuth.getQueryParams(\"token\");\n    var _a = React__namespace.useState(),\n        error = _a[0],\n        setError = _a[1];\n    var enterEmailFormFeature = props.recipe.config.resetPasswordUsingTokenFeature.enterEmailForm;\n    var submitNewPasswordFormFeature = props.recipe.config.resetPasswordUsingTokenFeature.submitNewPasswordForm;\n    var submitNewPasswordForm =\n        token === undefined || token === null\n            ? undefined\n            : {\n                  error: error,\n                  onError: function (error) {\n                      return setError(error);\n                  },\n                  clearError: function () {\n                      return setError(undefined);\n                  },\n                  styleFromInit: submitNewPasswordFormFeature.style,\n                  formFields: submitNewPasswordFormFeature.formFields,\n                  recipeImplementation: props.recipe.recipeImpl,\n                  config: props.recipe.config,\n                  onSignInClicked: function () {\n                      void sessionAuth.SuperTokens.getInstanceOrThrow().redirectToAuth({\n                          show: \"signin\",\n                          history: props.history,\n                          redirectBack: false,\n                      });\n                  },\n                  token: token,\n              };\n    var enterEmailForm = {\n        onBackButtonClicked: function () {\n            return sessionAuth.SuperTokens.getInstanceOrThrow().redirectToAuth({\n                show: \"signin\",\n                history: props.history,\n                redirectBack: false,\n            });\n        },\n        error: error,\n        onError: function (error) {\n            return setError(error);\n        },\n        clearError: function () {\n            return setError(undefined);\n        },\n        styleFromInit: enterEmailFormFeature.style,\n        formFields: enterEmailFormFeature.formFields,\n        recipeImplementation: props.recipe.recipeImpl,\n        config: props.recipe.config,\n    };\n    var childProps = {\n        config: props.recipe.config,\n        submitNewPasswordForm: submitNewPasswordForm,\n        enterEmailForm: enterEmailForm,\n    };\n    var recipeComponentOverrides = props.useComponentOverrides();\n    return jsxRuntime.jsx(\n        translations.ComponentOverrideContext.Provider,\n        sessionAuth.__assign(\n            { value: recipeComponentOverrides },\n            {\n                children: jsxRuntime.jsx(\n                    translations.FeatureWrapper,\n                    sessionAuth.__assign(\n                        {\n                            useShadowDom: props.recipe.config.useShadowDom,\n                            defaultStore: defaultTranslationsEmailPassword,\n                        },\n                        {\n                            children: jsxRuntime.jsxs(React.Fragment, {\n                                children: [\n                                    props.children === undefined &&\n                                        jsxRuntime.jsx(\n                                            ResetPasswordUsingTokenThemeWrapper,\n                                            sessionAuth.__assign({}, childProps)\n                                        ),\n                                    props.children &&\n                                        React__namespace.Children.map(props.children, function (child) {\n                                            if (React__namespace.isValidElement(child)) {\n                                                return React__namespace.cloneElement(child, childProps);\n                                            }\n                                            return child;\n                                        }),\n                                ],\n                            }),\n                        }\n                    )\n                ),\n            }\n        )\n    );\n};\n\nvar useFeatureReducer = function (recipe) {\n    return React__namespace.useReducer(\n        function (oldState, action) {\n            switch (action.type) {\n                case \"setSignIn\":\n                    return sessionAuth.__assign(sessionAuth.__assign({}, oldState), {\n                        error: undefined,\n                        isSignUp: false,\n                    });\n                case \"setSignUp\":\n                    return sessionAuth.__assign(sessionAuth.__assign({}, oldState), {\n                        error: undefined,\n                        isSignUp: true,\n                    });\n                case \"setError\":\n                    return sessionAuth.__assign(sessionAuth.__assign({}, oldState), { error: action.error });\n                default:\n                    return oldState;\n            }\n        },\n        {\n            isSignUp: recipe === undefined ? false : recipe.config.signInAndUpFeature.defaultToSignUp,\n            user: undefined,\n            error: undefined,\n        },\n        function (initArg) {\n            var show = sessionAuth.getQueryParams(\"show\");\n            var isSignUp = initArg.isSignUp;\n            if (show !== null) {\n                isSignUp = show === \"signup\";\n            }\n            return {\n                isSignUp: isSignUp,\n                user: undefined,\n                error: undefined,\n            };\n        }\n    );\n};\nfunction useChildProps(recipe, state, dispatch, history) {\n    var _this = this;\n    var recipeImplementation = React.useMemo(\n        function () {\n            return recipe && getModifiedRecipeImplementation(recipe.recipeImpl);\n        },\n        [recipe]\n    );\n    var userContext = sessionAuth.useUserContext();\n    var onSignInSuccess = React.useCallback(\n        function () {\n            return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n                return sessionAuth.__generator(this, function (_a) {\n                    return [\n                        2 /*return*/,\n                        sessionAuth.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection(\n                            {\n                                rid: recipe.config.recipeId,\n                                successRedirectContext: {\n                                    action: \"SUCCESS\",\n                                    isNewUser: false,\n                                    redirectToPath: sessionAuth.getRedirectToPathFromURL(),\n                                },\n                            },\n                            userContext,\n                            history\n                        ),\n                    ];\n                });\n            });\n        },\n        [recipe, userContext, history]\n    );\n    var onSignUpSuccess = React.useCallback(\n        function () {\n            return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n                return sessionAuth.__generator(this, function (_a) {\n                    return [\n                        2 /*return*/,\n                        sessionAuth.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection(\n                            {\n                                rid: recipe.config.recipeId,\n                                successRedirectContext: {\n                                    action: \"SUCCESS\",\n                                    isNewUser: true,\n                                    redirectToPath: sessionAuth.getRedirectToPathFromURL(),\n                                },\n                            },\n                            userContext,\n                            history\n                        ),\n                    ];\n                });\n            });\n        },\n        [recipe, userContext, history]\n    );\n    return React.useMemo(\n        function () {\n            if (recipe === undefined || recipeImplementation === undefined) {\n                return;\n            }\n            var signInAndUpFeature = recipe.config.signInAndUpFeature;\n            var signUpFeature = signInAndUpFeature.signUpForm;\n            var signInFeature = signInAndUpFeature.signInForm;\n            var signInForm = {\n                recipeImplementation: recipeImplementation,\n                config: recipe.config,\n                styleFromInit: signInFeature.style,\n                formFields: signInFeature.formFields,\n                error: state.error,\n                clearError: function () {\n                    return dispatch({ type: \"setError\", error: undefined });\n                },\n                onError: function (error) {\n                    return dispatch({ type: \"setError\", error: error });\n                },\n                onSuccess: onSignInSuccess,\n                forgotPasswordClick: function () {\n                    return recipe.redirect({ action: \"RESET_PASSWORD\" }, history);\n                },\n            };\n            var signUpForm = {\n                recipeImplementation: recipeImplementation,\n                config: recipe.config,\n                styleFromInit: signUpFeature.style,\n                formFields: getThemeSignUpFeatureFormFields(signUpFeature.formFields, recipe, userContext),\n                error: state.error,\n                clearError: function () {\n                    return dispatch({ type: \"setError\", error: undefined });\n                },\n                onError: function (error) {\n                    return dispatch({ type: \"setError\", error: error });\n                },\n                onSuccess: onSignUpSuccess,\n            };\n            return {\n                config: recipe.config,\n                signInForm: signInForm,\n                signUpForm: signUpForm,\n            };\n        },\n        [recipe, state, dispatch]\n    );\n}\nvar SignInAndUpFeature = function (props) {\n    var _a = useFeatureReducer(props.recipe),\n        state = _a[0],\n        dispatch = _a[1];\n    var childProps = useChildProps(props.recipe, state, dispatch, props.history);\n    var recipeComponentOverrides = props.useComponentOverrides();\n    return jsxRuntime.jsx(\n        translations.ComponentOverrideContext.Provider,\n        sessionAuth.__assign(\n            { value: recipeComponentOverrides },\n            {\n                children: jsxRuntime.jsx(\n                    translations.FeatureWrapper,\n                    sessionAuth.__assign(\n                        {\n                            useShadowDom: props.recipe.config.useShadowDom,\n                            defaultStore: defaultTranslationsEmailPassword,\n                        },\n                        {\n                            children: jsxRuntime.jsxs(React.Fragment, {\n                                children: [\n                                    props.children === undefined &&\n                                        jsxRuntime.jsx(\n                                            SignInAndUpThemeWrapper,\n                                            sessionAuth.__assign({}, childProps, {\n                                                featureState: state,\n                                                dispatch: dispatch,\n                                            })\n                                        ),\n                                    props.children &&\n                                        React__namespace.Children.map(props.children, function (child) {\n                                            if (React__namespace.isValidElement(child)) {\n                                                return React__namespace.cloneElement(\n                                                    child,\n                                                    sessionAuth.__assign(sessionAuth.__assign({}, childProps), {\n                                                        featureState: state,\n                                                        dispatch: dispatch,\n                                                    })\n                                                );\n                                            }\n                                            return child;\n                                        }),\n                                ],\n                            }),\n                        }\n                    )\n                ),\n            }\n        )\n    );\n};\nvar getModifiedRecipeImplementation = function (origImpl) {\n    return sessionAuth.__assign({}, origImpl);\n};\nfunction getThemeSignUpFeatureFormFields(formFields, recipe, userContext) {\n    var _this = this;\n    var emailPasswordOnly = formFields.length === 2;\n    return formFields.map(function (field) {\n        return sessionAuth.__assign(sessionAuth.__assign({}, field), {\n            showIsRequired: (function () {\n                // If email and password only, do not show required indicator (*).\n                if (emailPasswordOnly) {\n                    return false;\n                }\n                // Otherwise, show for all non optional fields (including email and password).\n                return field.optional === false;\n            })(),\n            validate: (function () {\n                // If field is not email, return field validate unchanged.\n                if (field.id !== \"email\") {\n                    return field.validate;\n                }\n                // Otherwise, if email, use syntax validate method and check if email exists.\n                return function (value) {\n                    return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n                        var error, emailExists, err_1;\n                        return sessionAuth.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    return [4 /*yield*/, field.validate(value)];\n                                case 1:\n                                    error = _a.sent();\n                                    if (error !== undefined) {\n                                        return [2 /*return*/, error];\n                                    }\n                                    if (typeof value !== \"string\") {\n                                        return [2 /*return*/, \"GENERAL_ERROR_EMAIL_NON_STRING\"];\n                                    }\n                                    _a.label = 2;\n                                case 2:\n                                    _a.trys.push([2, 4, , 5]);\n                                    return [\n                                        4 /*yield*/,\n                                        recipe.recipeImpl.doesEmailExist({\n                                            email: value,\n                                            userContext: userContext,\n                                        }),\n                                    ];\n                                case 3:\n                                    emailExists = _a.sent().doesExist;\n                                    if (emailExists) {\n                                        return [2 /*return*/, \"EMAIL_PASSWORD_EMAIL_ALREADY_EXISTS\"];\n                                    }\n                                    return [3 /*break*/, 5];\n                                case 4:\n                                    err_1 = _a.sent();\n                                    if (STGeneralError__default.default.isThisError(err_1)) {\n                                        return [2 /*return*/, err_1.message];\n                                    }\n                                    return [3 /*break*/, 5];\n                                case 5:\n                                    return [2 /*return*/, undefined];\n                            }\n                        });\n                    });\n                };\n            })(),\n        });\n    });\n}\n\nfunction getRecipeImplementation(recipeInput) {\n    var webJsImplementation = recipeImplementation.getRecipeImplementation({\n        recipeId: recipeInput.recipeId,\n        appInfo: recipeInput.appInfo,\n        preAPIHook: recipeInput.preAPIHook,\n        postAPIHook: recipeInput.postAPIHook,\n    });\n    return {\n        submitNewPassword: function (input) {\n            return sessionAuth.__awaiter(this, void 0, void 0, function () {\n                var response;\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            return [\n                                4 /*yield*/,\n                                webJsImplementation.submitNewPassword.bind(this)(\n                                    sessionAuth.__assign(sessionAuth.__assign({}, input), {\n                                        formFields: [input.formFields[0]],\n                                    })\n                                ),\n                            ];\n                        case 1:\n                            response = _a.sent();\n                            if (response.status === \"OK\") {\n                                recipeInput.onHandleEvent({\n                                    action: \"PASSWORD_RESET_SUCCESSFUL\",\n                                    userContext: input.userContext,\n                                });\n                            }\n                            return [2 /*return*/, response];\n                    }\n                });\n            });\n        },\n        sendPasswordResetEmail: function (input) {\n            return sessionAuth.__awaiter(this, void 0, void 0, function () {\n                var response;\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            return [\n                                4 /*yield*/,\n                                webJsImplementation.sendPasswordResetEmail.bind(this)(sessionAuth.__assign({}, input)),\n                            ];\n                        case 1:\n                            response = _a.sent();\n                            if (response.status === \"OK\") {\n                                recipeInput.onHandleEvent({\n                                    action: \"RESET_PASSWORD_EMAIL_SENT\",\n                                    userContext: input.userContext,\n                                });\n                            }\n                            return [2 /*return*/, response];\n                    }\n                });\n            });\n        },\n        signUp: function (input) {\n            return sessionAuth.__awaiter(this, void 0, void 0, function () {\n                var response;\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            return [\n                                4 /*yield*/,\n                                webJsImplementation.signUp.bind(this)(sessionAuth.__assign({}, input)),\n                            ];\n                        case 1:\n                            response = _a.sent();\n                            if (response.status === \"OK\") {\n                                recipeInput.onHandleEvent({\n                                    action: \"SUCCESS\",\n                                    isNewUser: true,\n                                    user: response.user,\n                                    userContext: input.userContext,\n                                });\n                            }\n                            return [2 /*return*/, response];\n                    }\n                });\n            });\n        },\n        signIn: function (input) {\n            return sessionAuth.__awaiter(this, void 0, void 0, function () {\n                var response;\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            return [\n                                4 /*yield*/,\n                                webJsImplementation.signIn.bind(this)(sessionAuth.__assign({}, input)),\n                            ];\n                        case 1:\n                            response = _a.sent();\n                            if (response.status === \"OK\") {\n                                recipeInput.onHandleEvent({\n                                    action: \"SUCCESS\",\n                                    isNewUser: false,\n                                    user: response.user,\n                                    userContext: input.userContext,\n                                });\n                            }\n                            return [2 /*return*/, response];\n                    }\n                });\n            });\n        },\n        doesEmailExist: function (input) {\n            return sessionAuth.__awaiter(this, void 0, void 0, function () {\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            return [\n                                4 /*yield*/,\n                                webJsImplementation.doesEmailExist.bind(this)(sessionAuth.__assign({}, input)),\n                            ];\n                        case 1:\n                            return [2 /*return*/, _a.sent()];\n                    }\n                });\n            });\n        },\n        getResetPasswordTokenFromURL: function (input) {\n            return webJsImplementation.getResetPasswordTokenFromURL.bind(this)({\n                userContext: input.userContext,\n            });\n        },\n    };\n}\n\n/* Copyright (c) 2021, VRAI Labs and/or its affiliates. All rights reserved.\n *\n * This software is licensed under the Apache License, Version 2.0 (the\n * \"License\") as published by the Apache Software Foundation.\n *\n * You may not use this file except in compliance with the License. You may\n * obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\nfunction normaliseEmailPasswordConfig(config) {\n    var signInAndUpFeature = normaliseSignInAndUpFeature(config.signInAndUpFeature);\n    var signUpPasswordField = signInAndUpFeature.signUpForm.formFields.find(function (field) {\n        return field.id === \"password\";\n    });\n    var signUpEmailField = signInAndUpFeature.signUpForm.formFields.find(function (field) {\n        return field.id === \"email\";\n    });\n    var resetPasswordUsingTokenFeature = normaliseResetPasswordUsingTokenFeature(\n        signUpPasswordField.validate,\n        signUpEmailField,\n        config.resetPasswordUsingTokenFeature\n    );\n    var override = sessionAuth.__assign(\n        {\n            functions: function (originalImplementation) {\n                return originalImplementation;\n            },\n        },\n        config.override\n    );\n    return sessionAuth.__assign(sessionAuth.__assign({}, utils.normaliseAuthRecipe(config)), {\n        signInAndUpFeature: signInAndUpFeature,\n        resetPasswordUsingTokenFeature: resetPasswordUsingTokenFeature,\n        override: override,\n    });\n}\nfunction normaliseSignInAndUpFeature(config) {\n    if (config === undefined) {\n        config = {};\n    }\n    var disableDefaultUI = config.disableDefaultUI === true;\n    var signUpForm = normaliseSignUpFormFeatureConfig(config.signUpForm);\n    var defaultToSignUp = config.defaultToSignUp !== undefined ? config.defaultToSignUp : false;\n    /*\n     * Default Sign In corresponds to computed Sign Up fields filtered by email and password only.\n     * i.e. If the user overrides sign Up fields, that is propagated to default sign In fields.\n     * Exception made of the password validator which only verifies that the value is not empty for login\n     * https://github.com/supertokens/supertokens-auth-react/issues/21\n     */\n    var defaultSignInFields = signUpForm.formFields.reduce(function (signInFieldsAccumulator, field) {\n        if (field.id === \"email\") {\n            return sessionAuth.__spreadArray(\n                sessionAuth.__spreadArray([], signInFieldsAccumulator, true),\n                [field],\n                false\n            );\n        }\n        if (field.id === \"password\") {\n            return sessionAuth.__spreadArray(\n                sessionAuth.__spreadArray([], signInFieldsAccumulator, true),\n                [\n                    sessionAuth.__assign(sessionAuth.__assign({}, field), {\n                        autoComplete: \"current-password\",\n                        validate: validators.defaultLoginPasswordValidator,\n                    }),\n                ],\n                false\n            );\n        }\n        return signInFieldsAccumulator;\n    }, []);\n    var signInForm = normaliseSignInFormFeatureConfig(defaultSignInFields, config.signInForm);\n    return {\n        disableDefaultUI: disableDefaultUI,\n        defaultToSignUp: defaultToSignUp,\n        signUpForm: signUpForm,\n        signInForm: signInForm,\n    };\n}\nfunction normaliseSignUpFormFeatureConfig(config) {\n    if (config === undefined) {\n        config = {};\n    }\n    var defaultFormFields = getDefaultFormFields();\n    var userFormFields = [];\n    if (config.formFields !== undefined) {\n        userFormFields = config.formFields;\n    }\n    var formFields = mergeFormFields(defaultFormFields, userFormFields);\n    var privacyPolicyLink = config.privacyPolicyLink;\n    var termsOfServiceLink = config.termsOfServiceLink;\n    var style = config.style !== undefined ? config.style : \"\";\n    return {\n        style: style,\n        formFields: formFields,\n        privacyPolicyLink: privacyPolicyLink,\n        termsOfServiceLink: termsOfServiceLink,\n    };\n}\nfunction normaliseSignInFormFeatureConfig(defaultFormFields, config) {\n    if (config === undefined) {\n        config = {};\n    }\n    var userFormFields = [];\n    if (config.formFields !== undefined) {\n        userFormFields = config.formFields\n            // Filter on email and password only.\n            .filter(function (field) {\n                return validators.MANDATORY_FORM_FIELDS_ID_ARRAY.includes(field.id);\n            })\n            // Sign In fields are never optional.\n            .map(function (field) {\n                return sessionAuth.__assign(sessionAuth.__assign({}, field), { optional: false });\n            });\n    }\n    var formFields = mergeFormFields(defaultFormFields, userFormFields);\n    var style = config.style !== undefined ? config.style : \"\";\n    return {\n        style: style,\n        formFields: formFields,\n    };\n}\nfunction getDefaultFormFields() {\n    return [getDefaultEmailFormField(), getDefaultPasswordFormField()];\n}\nfunction getDefaultEmailFormField() {\n    return {\n        id: \"email\",\n        label: \"EMAIL_PASSWORD_EMAIL_LABEL\",\n        placeholder: \"EMAIL_PASSWORD_EMAIL_PLACEHOLDER\",\n        validate: validators.defaultEmailValidator,\n        optional: false,\n        autoComplete: \"email\",\n    };\n}\nfunction getDefaultPasswordFormField() {\n    return {\n        id: \"password\",\n        label: \"EMAIL_PASSWORD_PASSWORD_LABEL\",\n        placeholder: \"EMAIL_PASSWORD_PASSWORD_PLACEHOLDER\",\n        validate: validators.defaultPasswordValidator,\n        optional: false,\n        autoComplete: \"new-password\",\n    };\n}\nfunction normaliseResetPasswordUsingTokenFeature(signUpPasswordFieldValidate, signUpEmailField, config) {\n    if (config === undefined) {\n        config = {};\n    }\n    var disableDefaultUI = config.disableDefaultUI === true;\n    var submitNewPasswordFormStyle =\n        config.submitNewPasswordForm !== undefined && config.submitNewPasswordForm.style !== undefined\n            ? config.submitNewPasswordForm.style\n            : \"\";\n    var submitNewPasswordForm = {\n        style: submitNewPasswordFormStyle,\n        formFields: [\n            {\n                id: \"password\",\n                label: \"EMAIL_PASSWORD_NEW_PASSWORD_LABEL\",\n                placeholder: \"EMAIL_PASSWORD_NEW_PASSWORD_PLACEHOLDER\",\n                validate: signUpPasswordFieldValidate,\n                optional: false,\n                autoComplete: \"new-password\",\n            },\n            {\n                id: \"confirm-password\",\n                label: \"EMAIL_PASSWORD_CONFIRM_PASSWORD_LABEL\",\n                placeholder: \"EMAIL_PASSWORD_CONFIRM_PASSWORD_PLACEHOLDER\",\n                validate: signUpPasswordFieldValidate,\n                optional: false,\n                autoComplete: \"new-password\",\n            },\n        ],\n    };\n    var enterEmailFormStyle =\n        config.enterEmailForm !== undefined && config.enterEmailForm.style !== undefined\n            ? config.enterEmailForm.style\n            : \"\";\n    var enterEmailForm = {\n        style: enterEmailFormStyle,\n        formFields: [\n            sessionAuth.__assign(sessionAuth.__assign({}, getDefaultEmailFormField()), {\n                validate: signUpEmailField.validate,\n                placeholder: \"\",\n                autofocus: true,\n            }),\n        ],\n    };\n    return {\n        disableDefaultUI: disableDefaultUI,\n        submitNewPasswordForm: submitNewPasswordForm,\n        enterEmailForm: enterEmailForm,\n    };\n}\n/*\n * mergeFormFields by keeping the provided order, defaultFormFields or merged first, and unmerged userFormFields after.\n */\nfunction mergeFormFields(defaultFormFields, userFormFields) {\n    // Create a new array with default fields.\n    var mergedFormFields = defaultFormFields;\n    // Loop through user provided fields.\n    for (var i = 0; i < userFormFields.length; i++) {\n        var userField = userFormFields[i];\n        var isNewField = true;\n        // Loop through the merged fields array.\n        for (var j = 0; j < mergedFormFields.length; j++) {\n            var mergedField = mergedFormFields[j];\n            // If id is equal, merge the fields\n            if (userField.id === mergedField.id) {\n                // Make sure that email and password are kept mandatory.\n                var optional = mergedField.optional; // Init with default value.\n                // If user provided value, overwrite.\n                if (userField.optional !== undefined) {\n                    optional = userField.optional;\n                }\n                // If \"email\" or \"password\", always mandatory.\n                if (validators.MANDATORY_FORM_FIELDS_ID_ARRAY.includes(userField.id)) {\n                    optional = false;\n                }\n                // Merge.\n                mergedFormFields[j] = sessionAuth.__assign(\n                    sessionAuth.__assign(sessionAuth.__assign({}, mergedFormFields[j]), userField),\n                    { optional: optional }\n                );\n                isNewField = false;\n                break;\n            }\n        }\n        // If new field, push to mergeFormFields.\n        if (isNewField) {\n            mergedFormFields.push(\n                sessionAuth.__assign(\n                    { optional: false, placeholder: userField.label, validate: validators.defaultValidate },\n                    userField\n                )\n            );\n        }\n    }\n    return mergedFormFields.map(function (field) {\n        return getFormattedFormField(field);\n    });\n}\nfunction getFormattedFormField(field) {\n    var _this = this;\n    return sessionAuth.__assign(sessionAuth.__assign({}, field), {\n        validate: function (value) {\n            return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n                return sessionAuth.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            // Absent or not optional empty field\n                            if (value === \"\" && field.optional === false) {\n                                return [2 /*return*/, \"ERROR_NON_OPTIONAL\"];\n                            }\n                            return [4 /*yield*/, field.validate(value)];\n                        case 1:\n                            return [2 /*return*/, _a.sent()];\n                    }\n                });\n            });\n        },\n    });\n}\n\n/*\n * Class.\n */\nvar EmailPassword = /** @class */ (function (_super) {\n    sessionAuth.__extends(EmailPassword, _super);\n    function EmailPassword(config) {\n        var _this = _super.call(this, normaliseEmailPasswordConfig(config)) || this;\n        _this.getFeatures = function (useComponentOverrides) {\n            if (useComponentOverrides === void 0) {\n                useComponentOverrides = useContext;\n            }\n            var features = {};\n            if (_this.config.signInAndUpFeature.disableDefaultUI !== true) {\n                var normalisedFullPath = _this.config.appInfo.websiteBasePath.appendPath(\n                    new NormalisedURLPath__default.default(\"/\")\n                );\n                features[normalisedFullPath.getAsStringDangerous()] = {\n                    matches: sessionAuth.matchRecipeIdUsingQueryParams(_this.config.recipeId),\n                    component: function (props) {\n                        return _this.getFeatureComponent(\"signinup\", props, useComponentOverrides);\n                    },\n                };\n            }\n            if (_this.config.resetPasswordUsingTokenFeature.disableDefaultUI !== true) {\n                var normalisedFullPath = _this.config.appInfo.websiteBasePath.appendPath(\n                    new NormalisedURLPath__default.default(validators.DEFAULT_RESET_PASSWORD_PATH)\n                );\n                features[normalisedFullPath.getAsStringDangerous()] = {\n                    matches: sessionAuth.matchRecipeIdUsingQueryParams(_this.config.recipeId),\n                    component: function (props) {\n                        return _this.getFeatureComponent(\"resetpassword\", props, useComponentOverrides);\n                    },\n                };\n            }\n            return features;\n        };\n        _this.getDefaultRedirectionURL = function (context) {\n            return sessionAuth.__awaiter(_this, void 0, void 0, function () {\n                var resetPasswordPath;\n                return sessionAuth.__generator(this, function (_a) {\n                    if (context.action === \"RESET_PASSWORD\") {\n                        resetPasswordPath = new NormalisedURLPath__default.default(\n                            validators.DEFAULT_RESET_PASSWORD_PATH\n                        );\n                        return [\n                            2 /*return*/,\n                            \"\"\n                                .concat(\n                                    this.config.appInfo.websiteBasePath\n                                        .appendPath(resetPasswordPath)\n                                        .getAsStringDangerous(),\n                                    \"?rid=\"\n                                )\n                                .concat(this.config.recipeId),\n                        ];\n                    }\n                    return [2 /*return*/, this.getAuthRecipeDefaultRedirectionURL(context)];\n                });\n            });\n        };\n        _this.getFeatureComponent = function (componentName, props, useComponentOverrides) {\n            if (useComponentOverrides === void 0) {\n                useComponentOverrides = useContext;\n            }\n            if (componentName === \"signinup\") {\n                if (props.redirectOnSessionExists !== false) {\n                    return jsxRuntime.jsx(\n                        sessionAuth.UserContextWrapper,\n                        sessionAuth.__assign(\n                            { userContext: props.userContext },\n                            {\n                                children: jsxRuntime.jsx(\n                                    utils.AuthWidgetWrapper,\n                                    sessionAuth.__assign(\n                                        { authRecipe: _this, history: props.history },\n                                        {\n                                            children: jsxRuntime.jsx(\n                                                SignInAndUpFeature,\n                                                sessionAuth.__assign({ recipe: _this }, props, {\n                                                    useComponentOverrides: useComponentOverrides,\n                                                })\n                                            ),\n                                        }\n                                    )\n                                ),\n                            }\n                        )\n                    );\n                } else {\n                    return jsxRuntime.jsx(\n                        sessionAuth.UserContextWrapper,\n                        sessionAuth.__assign(\n                            { userContext: props.userContext },\n                            {\n                                children: jsxRuntime.jsx(\n                                    SignInAndUpFeature,\n                                    sessionAuth.__assign({ recipe: _this }, props, {\n                                        useComponentOverrides: useComponentOverrides,\n                                    })\n                                ),\n                            }\n                        )\n                    );\n                }\n            } else if (componentName === \"resetpassword\") {\n                return jsxRuntime.jsx(\n                    sessionAuth.UserContextWrapper,\n                    sessionAuth.__assign(\n                        { userContext: props.userContext },\n                        {\n                            children: jsxRuntime.jsx(\n                                ResetPasswordUsingToken,\n                                sessionAuth.__assign({ recipe: _this }, props, {\n                                    useComponentOverrides: useComponentOverrides,\n                                })\n                            ),\n                        }\n                    )\n                );\n            } else {\n                throw new Error(\"Should never come here.\");\n            }\n        };\n        var builder = new translations.OverrideableBuilder_1(\n            getRecipeImplementation({\n                appInfo: _this.config.appInfo,\n                recipeId: _this.config.recipeId,\n                onHandleEvent: _this.config.onHandleEvent,\n                preAPIHook: _this.config.preAPIHook,\n                postAPIHook: _this.config.postAPIHook,\n            })\n        );\n        _this.recipeImpl = builder.override(_this.config.override.functions).build();\n        return _this;\n    }\n    EmailPassword.init = function (config) {\n        return function (appInfo) {\n            EmailPassword.instance = new EmailPassword(\n                sessionAuth.__assign(sessionAuth.__assign({}, config), {\n                    appInfo: appInfo,\n                    recipeId: EmailPassword.RECIPE_ID,\n                })\n            );\n            return EmailPassword.instance;\n        };\n    };\n    EmailPassword.getInstanceOrThrow = function () {\n        if (EmailPassword.instance === undefined) {\n            var error =\n                \"No instance of EmailPassword found. Make sure to call the EmailPassword.init method.\" +\n                \"See https://supertokens.io/docs/emailpassword/quick-setup/frontend\";\n            // eslint-disable-next-line supertokens-auth-react/no-direct-window-object\n            if (typeof window === \"undefined\") {\n                error = error + sessionAuth.SSR_ERROR;\n            }\n            throw Error(error);\n        }\n        return EmailPassword.instance;\n    };\n    /*\n     * Tests methods.\n     */\n    EmailPassword.reset = function () {\n        if (!sessionAuth.isTest()) {\n            return;\n        }\n        EmailPassword.instance = undefined;\n        return;\n    };\n    EmailPassword.RECIPE_ID = \"emailpassword\";\n    return EmailPassword;\n})(utils.AuthRecipe);\n\nexports.EmailPassword = EmailPassword;\nexports.Provider = Provider;\nexports.ResetPasswordUsingTokenThemeWrapper = ResetPasswordUsingTokenThemeWrapper;\nexports.SignInAndUpThemeWrapper = SignInAndUpThemeWrapper;\nexports.SignInFooter = SignInFooter;\nexports.SignInForm = SignInForm;\nexports.SignInHeader = SignInHeader;\nexports.SignUpFooter = SignUpFooter;\nexports.SignUpForm = SignUpForm;\nexports.SignUpHeader = SignUpHeader;\nexports.defaultTranslationsEmailPassword = defaultTranslationsEmailPassword;\nexports.getRecipeImplementation = getRecipeImplementation;\nexports.useChildProps = useChildProps;\nexports.useFeatureReducer = useFeatureReducer;\n"]},"metadata":{},"sourceType":"script"}