{"ast":null,"code":"\"use strict\";\n\nvar sessionAuth = require(\"./session-shared.js\");\n\nvar jsxRuntime = require(\"react/jsx-runtime\");\n\nvar React = require(\"react\");\n\nfunction _interopDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefault(React);\n\nvar errCB = function () {\n  throw new Error(\"Cannot use translation func outside TranslationContext provider.\");\n};\n\nvar TranslationContext = React__default.default.createContext({\n  translate: errCB\n});\n\nvar useTranslation = function () {\n  return React.useContext(TranslationContext).translate;\n};\n\nvar TranslationContextProvider = function (_a) {\n  var children = _a.children,\n      defaultLanguage = _a.defaultLanguage,\n      userTranslationFunc = _a.userTranslationFunc,\n      defaultStore = _a.defaultStore,\n      translationControlEventSource = _a.translationControlEventSource;\n\n  var _b = React.useState(defaultStore),\n      translationStore = _b[0],\n      setTranslationStore = _b[1];\n\n  var _c = React.useState(undefined),\n      currentLanguage = _c[0],\n      setCurrentLanguage = _c[1];\n\n  React.useEffect(function () {\n    function loadLanguageFromCookies() {\n      return sessionAuth.__awaiter(this, void 0, void 0, function () {\n        var cookieLang, cookieLangTemp;\n        return sessionAuth.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , sessionAuth.getCurrentLanguageFromCookie()];\n\n            case 1:\n              cookieLang = _a.sent();\n              cookieLangTemp = cookieLang === null ? defaultLanguage : cookieLang;\n              /**\n               * If current is not undefined, it means that something else has set the language.\n               * For example if the user calls SuperTokens.changeLanguage before this\n               *\n               * We want to use the language preference from cookies only if something else has\n               * not set language before this\n               */\n\n              setCurrentLanguage(function (current) {\n                return current !== undefined ? current : cookieLangTemp;\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n\n    void loadLanguageFromCookies();\n  }, [defaultLanguage, setCurrentLanguage]);\n  React.useEffect(function () {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    var changeHandler = function (_eventName, detail) {\n      setCurrentLanguage(detail);\n    }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    var loadHandler = function (_eventName, detail) {\n      setTranslationStore(function (os) {\n        return sessionAuth.mergeObjects(os, detail);\n      });\n    };\n\n    translationControlEventSource.on(\"LanguageChange\", changeHandler);\n    translationControlEventSource.on(\"TranslationLoaded\", loadHandler);\n    return function () {\n      translationControlEventSource.off(\"LanguageChange\", changeHandler);\n      translationControlEventSource.off(\"TranslationLoaded\", loadHandler);\n    };\n  });\n  var translateFunc = React.useCallback(function (key) {\n    if (userTranslationFunc !== undefined) {\n      return userTranslationFunc(key);\n    }\n\n    if (currentLanguage !== undefined) {\n      var res = translationStore[currentLanguage] && translationStore[currentLanguage][key];\n      var fallback = translationStore[defaultLanguage] && translationStore[defaultLanguage][key];\n\n      if (res === undefined) {\n        if (fallback !== undefined) {\n          return fallback;\n        }\n\n        return key;\n      }\n\n      return res;\n    }\n\n    throw new Error(\"Should never come here\");\n  }, [translationStore, currentLanguage, defaultLanguage, userTranslationFunc]);\n\n  if (currentLanguage === undefined) {\n    return null;\n  }\n\n  return jsxRuntime.jsx(TranslationContext.Provider, sessionAuth.__assign({\n    value: {\n      translate: translateFunc\n    }\n  }, {\n    children: children\n  }));\n};\n\nexports.TranslationContextProvider = TranslationContextProvider;\nexports.useTranslation = useTranslation;","map":{"version":3,"mappings":"","names":[],"sources":[],"sourcesContent":["\"use strict\";\n\nvar sessionAuth = require(\"./session-shared.js\");\nvar jsxRuntime = require(\"react/jsx-runtime\");\nvar React = require(\"react\");\n\nfunction _interopDefault(e) {\n    return e && e.__esModule ? e : { default: e };\n}\n\nvar React__default = /*#__PURE__*/ _interopDefault(React);\n\nvar errCB = function () {\n    throw new Error(\"Cannot use translation func outside TranslationContext provider.\");\n};\nvar TranslationContext = React__default.default.createContext({\n    translate: errCB,\n});\nvar useTranslation = function () {\n    return React.useContext(TranslationContext).translate;\n};\nvar TranslationContextProvider = function (_a) {\n    var children = _a.children,\n        defaultLanguage = _a.defaultLanguage,\n        userTranslationFunc = _a.userTranslationFunc,\n        defaultStore = _a.defaultStore,\n        translationControlEventSource = _a.translationControlEventSource;\n    var _b = React.useState(defaultStore),\n        translationStore = _b[0],\n        setTranslationStore = _b[1];\n    var _c = React.useState(undefined),\n        currentLanguage = _c[0],\n        setCurrentLanguage = _c[1];\n    React.useEffect(\n        function () {\n            function loadLanguageFromCookies() {\n                return sessionAuth.__awaiter(this, void 0, void 0, function () {\n                    var cookieLang, cookieLangTemp;\n                    return sessionAuth.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                return [4 /*yield*/, sessionAuth.getCurrentLanguageFromCookie()];\n                            case 1:\n                                cookieLang = _a.sent();\n                                cookieLangTemp = cookieLang === null ? defaultLanguage : cookieLang;\n                                /**\n                                 * If current is not undefined, it means that something else has set the language.\n                                 * For example if the user calls SuperTokens.changeLanguage before this\n                                 *\n                                 * We want to use the language preference from cookies only if something else has\n                                 * not set language before this\n                                 */\n                                setCurrentLanguage(function (current) {\n                                    return current !== undefined ? current : cookieLangTemp;\n                                });\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            }\n            void loadLanguageFromCookies();\n        },\n        [defaultLanguage, setCurrentLanguage]\n    );\n    React.useEffect(function () {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var changeHandler = function (_eventName, detail) {\n            setCurrentLanguage(detail);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var loadHandler = function (_eventName, detail) {\n            setTranslationStore(function (os) {\n                return sessionAuth.mergeObjects(os, detail);\n            });\n        };\n        translationControlEventSource.on(\"LanguageChange\", changeHandler);\n        translationControlEventSource.on(\"TranslationLoaded\", loadHandler);\n        return function () {\n            translationControlEventSource.off(\"LanguageChange\", changeHandler);\n            translationControlEventSource.off(\"TranslationLoaded\", loadHandler);\n        };\n    });\n    var translateFunc = React.useCallback(\n        function (key) {\n            if (userTranslationFunc !== undefined) {\n                return userTranslationFunc(key);\n            }\n            if (currentLanguage !== undefined) {\n                var res = translationStore[currentLanguage] && translationStore[currentLanguage][key];\n                var fallback = translationStore[defaultLanguage] && translationStore[defaultLanguage][key];\n                if (res === undefined) {\n                    if (fallback !== undefined) {\n                        return fallback;\n                    }\n                    return key;\n                }\n                return res;\n            }\n            throw new Error(\"Should never come here\");\n        },\n        [translationStore, currentLanguage, defaultLanguage, userTranslationFunc]\n    );\n    if (currentLanguage === undefined) {\n        return null;\n    }\n    return jsxRuntime.jsx(\n        TranslationContext.Provider,\n        sessionAuth.__assign({ value: { translate: translateFunc } }, { children: children })\n    );\n};\n\nexports.TranslationContextProvider = TranslationContextProvider;\nexports.useTranslation = useTranslation;\n"]},"metadata":{},"sourceType":"script"}