{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _bluebird = _interopRequireDefault(require(\"bluebird\"));\n\nvar _util = _interopRequireDefault(require(\"util\"));\n\nvar _access_token = _interopRequireDefault(require(\"./client/access_token\"));\n\nvar _listener = _interopRequireDefault(require(\"./client/listener\"));\n\nvar _request = _interopRequireDefault(require(\"./client/request\"));\n\nvar _validator = _interopRequireDefault(require(\"./client/validator\"));\n\nvar _package = _interopRequireDefault(require(\"../../package.json\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n/**\n * A convenient wrapper around the API, allowing for generic, authenticated and\n * unauthenticated API calls without having to manage the serialization,\n * desrialization, and authentication.\n *\n * Generally you do not need to use this object directly. Instead it is used\n * indirectly by the various namespaced methods for every API call.\n *\n * For example, the following are the semantically the same.\n *\n * ```js\n * amadeus.client.get('/v1/reference-data/urls/checkin-links', params);\n * amadeus.amadeus.reference_data.urls.checkin_links.get(params);\n * ```\n *\n * @param {Object} options a list of options. See {@link Amadeus} .\n * @property {string} clientId the API key used to authenticate the API\n * @property {string} clientSecret the API secret used to authenticate\n *  the API\n * @property {Object} logger the `console`-compatible logger used to debug calls\n * @property {string} logLevel the log level for the client, available options\n *  are `debug`, `warn`, and `silent`. Defaults to 'silent'\n * @property {string} host the hostname of the server API calls are made to\n * @property {number} port the port the server API calls are made to\n * @property {boolean} ssl wether an SSL request is made to the server\n * @property {string} customAppId the custom App ID to be passed in the User\n *  Agent to the server\n * @property {string} customAppVersion the custom App Version number to be\n *  passed in the User Agent to the server\n * @property {Object} http the Node/HTTP(S)-compatible client used to make\n *  requests\n * @property {number} version The version of this API client\n */\n\n\nvar Client = /*#__PURE__*/function () {\n  function Client() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    new _validator[\"default\"]().validateAndInitialize(this, options);\n    this.accessToken = new _access_token[\"default\"](this);\n    this.version = _package[\"default\"].version;\n  }\n  /**\n   * Make an authenticated GET API call.\n   *\n   * ```js\n   * amadeus.client.get('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the query string parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n\n\n  _createClass(Client, [{\n    key: \"get\",\n    value: function get(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('GET', path, params);\n    }\n    /**\n     * Make an authenticated POST API call.\n     *\n     * ```js\n     * amadeus.client.post('/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the POST parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('POST', path, params);\n    }\n    /**\n     * Make an authenticated DELETE API call.\n     *\n     * ```js\n     * amadeus.client.delete('/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the query string parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', path, params);\n    } // PROTECTED\n\n    /**\n     * Make an authenticated API call.\n     *\n     * ```js\n     * amadeus.client.call('GET', '/v2/foo/bar', { some: 'data' });\n     * ```\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} [params={}] the POST parameters\n     * @return {Promise.<Response,ResponseError>} a Promise\n     * @protected\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(verb, path) {\n      var _this = this;\n\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.accessToken.bearerToken(this).then(function (bearerToken) {\n        return _this.unauthenticatedRequest(verb, path, params, bearerToken);\n      });\n    } // PRIVATE\n\n    /**\n     * Make any kind of API call, authenticated or not\n     *\n     * Used by the .get, .post methods to make API calls.\n     *\n     * Sets up a new Promise and then excutes the API call, triggering the Promise\n     * to be called when the API call fails or succeeds.\n     *\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} params the parameters to pass in the query or body\n     * @param {string} [bearerToken=null] the BearerToken as generated by the\n     *  AccessToken class\n     * @return {Promise.<Response,ResponseError>} a Promise\n     * @private\n     */\n\n  }, {\n    key: \"unauthenticatedRequest\",\n    value: function unauthenticatedRequest(verb, path, params) {\n      var bearerToken = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var request = this.buildRequest(verb, path, params, bearerToken);\n      this.log(request);\n      var emitter = new _events[\"default\"]();\n      var promise = this.buildPromise(emitter);\n      this.execute(request, emitter);\n      return promise;\n    }\n    /**\n     * Actually executes the API call.\n     *\n     * @param {Request} request the request to execute\n     * @param {EventEmitter} emitter the event emitter to notify of changes\n     * @private\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(request, emitter) {\n      var http_request = this.http.request(request.options());\n      var listener = new _listener[\"default\"](request, emitter, this);\n      http_request.on('response', listener.onResponse.bind(listener));\n      http_request.on('error', listener.onError.bind(listener));\n      http_request.write(request.body());\n      http_request.end();\n    }\n    /**\n     * Builds a Request object to be used in the API call\n     *\n     * @param {string} verb the HTTP method, for example `GET` or `POST`\n     * @param {string} path the full path of the API endpoint\n     * @param {Object} params the parameters to pass in the query or body\n     * @param {string} [bearerToken=null] the BearerToken as generated by the\n     *  AccessToken class\n     * @return {Request}\n     * @private\n     */\n\n  }, {\n    key: \"buildRequest\",\n    value: function buildRequest(verb, path, params, bearerToken) {\n      return new _request[\"default\"]({\n        host: this.host,\n        verb: verb,\n        path: path,\n        params: params,\n        bearerToken: bearerToken,\n        clientVersion: this.version,\n        languageVersion: process.version,\n        appId: this.customAppId,\n        appVersion: this.customAppVersion,\n        port: this.port,\n        ssl: this.ssl\n      });\n    }\n    /**\n     * Builds a Bluebird Promise to be returned to the API user\n     *\n     * @param  {type} emitter the event emitter to notify of changes\n     * @return {Promise} a Bluebird promise\n     * @private\n     */\n\n  }, {\n    key: \"buildPromise\",\n    value: function buildPromise(emitter) {\n      return new _bluebird[\"default\"](function (resolve, reject) {\n        emitter.on('resolve', function (response) {\n          return resolve(response);\n        });\n        emitter.on('reject', function (error) {\n          return reject(error);\n        });\n      });\n    }\n    /**\n     * Logs the request, when in debug mode\n     *\n     * @param  {Request} request the request object to log\n     * @private\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(request) {\n      /* istanbul ignore next */\n      if (this.debug()) {\n        this.logger.log(_util[\"default\"].inspect(request, false, null));\n      }\n    }\n    /**\n     * Determines if this client is in debug mode\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      return this.logLevel == 'debug';\n    }\n    /**\n     * Determines if this client is in warn or debug mode\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      return this.logLevel == 'warn' || this.debug();\n    }\n  }]);\n\n  return Client;\n}();\n\nvar _default = Client;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":"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","names":["descriptor","Object","writable","Client","options","_classCallCheck","Validator","validateAndInitialize","accessToken","AccessToken","version","pkg","_createClass","key","value","path","params","request","verb","bearerToken","then","_this","unauthenticatedRequest","buildRequest","log","emitter","EventEmitter","promise","buildPromise","execute","http_request","http","listener","Listener","on","onResponse","bind","onError","write","body","end","Request","host","clientVersion","languageVersion","process","appId","customAppId","appVersion","customAppVersion","port","ssl","Promise","resolve","reject","response","error","debug","logger","util","inspect","logLevel","exports","module"],"sources":["/home/dom/Videos/FlyM/node_modules/amadeus/src/amadeus/client.js"],"sourcesContent":["import EventEmitter from 'events';\nimport Promise      from 'bluebird';\nimport util         from 'util';\n\nimport AccessToken from './client/access_token';\nimport Listener    from './client/listener';\nimport Request     from './client/request';\nimport Validator   from './client/validator';\n\nimport pkg         from '../../package.json';\n\n/**\n * A convenient wrapper around the API, allowing for generic, authenticated and\n * unauthenticated API calls without having to manage the serialization,\n * desrialization, and authentication.\n *\n * Generally you do not need to use this object directly. Instead it is used\n * indirectly by the various namespaced methods for every API call.\n *\n * For example, the following are the semantically the same.\n *\n * ```js\n * amadeus.client.get('/v1/reference-data/urls/checkin-links', params);\n * amadeus.amadeus.reference_data.urls.checkin_links.get(params);\n * ```\n *\n * @param {Object} options a list of options. See {@link Amadeus} .\n * @property {string} clientId the API key used to authenticate the API\n * @property {string} clientSecret the API secret used to authenticate\n *  the API\n * @property {Object} logger the `console`-compatible logger used to debug calls\n * @property {string} logLevel the log level for the client, available options\n *  are `debug`, `warn`, and `silent`. Defaults to 'silent'\n * @property {string} host the hostname of the server API calls are made to\n * @property {number} port the port the server API calls are made to\n * @property {boolean} ssl wether an SSL request is made to the server\n * @property {string} customAppId the custom App ID to be passed in the User\n *  Agent to the server\n * @property {string} customAppVersion the custom App Version number to be\n *  passed in the User Agent to the server\n * @property {Object} http the Node/HTTP(S)-compatible client used to make\n *  requests\n * @property {number} version The version of this API client\n */\nclass Client {\n  constructor(options = {}) {\n    new Validator().validateAndInitialize(this, options);\n    this.accessToken = new AccessToken(this);\n    this.version = pkg.version;\n  }\n\n  /**\n   * Make an authenticated GET API call.\n   *\n   * ```js\n   * amadeus.client.get('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the query string parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  get(path, params = {}) {\n    return this.request('GET', path, params);\n  }\n\n  /**\n   * Make an authenticated POST API call.\n   *\n   * ```js\n   * amadeus.client.post('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the POST parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  post(path, params = {}) {\n    return this.request('POST', path, params);\n  }\n\n  /**\n   * Make an authenticated DELETE API call.\n   *\n   * ```js\n   * amadeus.client.delete('/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the query string parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   */\n  delete(path, params = {}) {\n    return this.request('DELETE', path, params);\n  }\n\n  // PROTECTED\n\n  /**\n   * Make an authenticated API call.\n   *\n   * ```js\n   * amadeus.client.call('GET', '/v2/foo/bar', { some: 'data' });\n   * ```\n   * @param {string} verb the HTTP method, for example `GET` or `POST`\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} [params={}] the POST parameters\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * @protected\n   */\n  request(verb, path, params = {}) {\n    return this.accessToken.bearerToken(this).then((bearerToken) => {\n      return this.unauthenticatedRequest(verb, path, params, bearerToken);\n    });\n  }\n\n  // PRIVATE\n\n  /**\n   * Make any kind of API call, authenticated or not\n   *\n   * Used by the .get, .post methods to make API calls.\n   *\n   * Sets up a new Promise and then excutes the API call, triggering the Promise\n   * to be called when the API call fails or succeeds.\n   *\n   * @param {string} verb the HTTP method, for example `GET` or `POST`\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} params the parameters to pass in the query or body\n   * @param {string} [bearerToken=null] the BearerToken as generated by the\n   *  AccessToken class\n   * @return {Promise.<Response,ResponseError>} a Promise\n   * @private\n   */\n  unauthenticatedRequest(verb, path, params, bearerToken = null) {\n    let request = this.buildRequest(verb, path, params, bearerToken);\n    this.log(request);\n    let emitter = new EventEmitter();\n    let promise = this.buildPromise(emitter);\n\n    this.execute(request, emitter);\n    return promise;\n  }\n\n  /**\n   * Actually executes the API call.\n   *\n   * @param {Request} request the request to execute\n   * @param {EventEmitter} emitter the event emitter to notify of changes\n   * @private\n   */\n  execute(request, emitter) {\n    let http_request = this.http.request(request.options());\n    let listener = new Listener(request, emitter, this);\n    http_request.on('response', listener.onResponse.bind(listener));\n    http_request.on('error',    listener.onError.bind(listener));\n    http_request.write(request.body());\n    http_request.end();\n  }\n\n  /**\n   * Builds a Request object to be used in the API call\n   *\n   * @param {string} verb the HTTP method, for example `GET` or `POST`\n   * @param {string} path the full path of the API endpoint\n   * @param {Object} params the parameters to pass in the query or body\n   * @param {string} [bearerToken=null] the BearerToken as generated by the\n   *  AccessToken class\n   * @return {Request}\n   * @private\n   */\n  buildRequest(verb, path, params, bearerToken) {\n    return new Request({\n      host: this.host,\n      verb: verb,\n      path: path,\n      params: params,\n      bearerToken: bearerToken,\n      clientVersion: this.version,\n      languageVersion: process.version,\n      appId: this.customAppId,\n      appVersion: this.customAppVersion,\n      port: this.port,\n      ssl: this.ssl\n    });\n  }\n\n  /**\n   * Builds a Bluebird Promise to be returned to the API user\n   *\n   * @param  {type} emitter the event emitter to notify of changes\n   * @return {Promise} a Bluebird promise\n   * @private\n   */\n  buildPromise(emitter) {\n    return new Promise((resolve, reject) => {\n      emitter.on('resolve', response => resolve(response));\n      emitter.on('reject', error => reject(error));\n    });\n  }\n\n\n  /**\n   * Logs the request, when in debug mode\n   *\n   * @param  {Request} request the request object to log\n   * @private\n   */\n  log(request) {\n    /* istanbul ignore next */\n    if(this.debug()) { this.logger.log(util.inspect(request, false, null)); }\n  }\n\n  /**\n   * Determines if this client is in debug mode\n   *\n   * @return {boolean}\n   */\n  debug() {\n    return this.logLevel == 'debug';\n  }\n\n  /**\n   * Determines if this client is in warn or debug mode\n   *\n   * @return {boolean}\n   */\n  warn() {\n    return this.logLevel == 'warn' || this.debug();\n  }\n}\n\nexport default Client;\n"]},"metadata":{},"sourceType":"script"}