{"ast":null,"code":"'use strict'; // this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js');\n\nconst Header = require('./header.js');\n\nconst EE = require('events');\n\nconst Yallist = require('yallist');\n\nconst maxMetaEntrySize = 1024 * 1024;\n\nconst Entry = require('./read-entry.js');\n\nconst Pax = require('./pax.js');\n\nconst zlib = require('minizlib');\n\nconst {\n  nextTick\n} = require('process');\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b]);\nconst STATE = Symbol('state');\nconst WRITEENTRY = Symbol('writeEntry');\nconst READENTRY = Symbol('readEntry');\nconst NEXTENTRY = Symbol('nextEntry');\nconst PROCESSENTRY = Symbol('processEntry');\nconst EX = Symbol('extendedHeader');\nconst GEX = Symbol('globalExtendedHeader');\nconst META = Symbol('meta');\nconst EMITMETA = Symbol('emitMeta');\nconst BUFFER = Symbol('buffer');\nconst QUEUE = Symbol('queue');\nconst ENDED = Symbol('ended');\nconst EMITTEDEND = Symbol('emittedEnd');\nconst EMIT = Symbol('emit');\nconst UNZIP = Symbol('unzip');\nconst CONSUMECHUNK = Symbol('consumeChunk');\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub');\nconst CONSUMEBODY = Symbol('consumeBody');\nconst CONSUMEMETA = Symbol('consumeMeta');\nconst CONSUMEHEADER = Symbol('consumeHeader');\nconst CONSUMING = Symbol('consuming');\nconst BUFFERCONCAT = Symbol('bufferConcat');\nconst MAYBEEND = Symbol('maybeEnd');\nconst WRITING = Symbol('writing');\nconst ABORTED = Symbol('aborted');\nconst DONE = Symbol('onDone');\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry');\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock');\nconst SAW_EOF = Symbol('sawEOF');\nconst CLOSESTREAM = Symbol('closeStream');\n\nconst noop = _ => true;\n\nmodule.exports = warner(class Parser extends EE {\n  constructor(opt) {\n    opt = opt || {};\n    super(opt);\n    this.file = opt.file || ''; // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n\n    this[SAW_VALID_ENTRY] = null; // these BADARCHIVE errors can't be detected early. listen on DONE.\n\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format');\n      }\n    });\n\n    if (opt.ondone) {\n      this.on(DONE, opt.ondone);\n    } else {\n      this.on(DONE, _ => {\n        this.emit('prefinish');\n        this.emit('finish');\n        this.emit('end');\n      });\n    }\n\n    this.strict = !!opt.strict;\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop; // have to set this so that streams are ok piping into it\n\n    this.writable = true;\n    this.readable = false;\n    this[QUEUE] = new Yallist();\n    this[BUFFER] = null;\n    this[READENTRY] = null;\n    this[WRITEENTRY] = null;\n    this[STATE] = 'begin';\n    this[META] = '';\n    this[EX] = null;\n    this[GEX] = null;\n    this[ENDED] = false;\n    this[UNZIP] = null;\n    this[ABORTED] = false;\n    this[SAW_NULL_BLOCK] = false;\n    this[SAW_EOF] = false;\n    this.on('end', () => this[CLOSESTREAM]());\n\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn);\n    }\n\n    if (typeof opt.onentry === 'function') {\n      this.on('entry', opt.onentry);\n    }\n  }\n\n  [CONSUMEHEADER](chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null) {\n      this[SAW_VALID_ENTRY] = false;\n    }\n\n    let header;\n\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX]);\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er);\n    }\n\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true; // ending an archive with no entries.  pointless, but legal.\n\n        if (this[STATE] === 'begin') {\n          this[STATE] = 'header';\n        }\n\n        this[EMIT]('eof');\n      } else {\n        this[SAW_NULL_BLOCK] = true;\n        this[EMIT]('nullBlock');\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false;\n\n      if (!header.cksumValid) {\n        this.warn('TAR_ENTRY_INVALID', 'checksum failure', {\n          header\n        });\n      } else if (!header.path) {\n        this.warn('TAR_ENTRY_INVALID', 'path is required', {\n          header\n        });\n      } else {\n        const type = header.type;\n\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath required', {\n            header\n          });\n        } else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', {\n            header\n          });\n        } else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]); // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid) {\n                  this[SAW_VALID_ENTRY] = true;\n                }\n              };\n\n              entry.on('end', onend);\n            } else {\n              this[SAW_VALID_ENTRY] = true;\n            }\n          }\n\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true;\n              this[EMIT]('ignoredEntry', entry);\n              this[STATE] = 'ignore';\n              entry.resume();\n            } else if (entry.size > 0) {\n              this[META] = '';\n              entry.on('data', c => this[META] += c);\n              this[STATE] = 'meta';\n            }\n          } else {\n            this[EX] = null;\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry);\n\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry);\n              this[STATE] = entry.remain ? 'ignore' : 'header';\n              entry.resume();\n            } else {\n              if (entry.remain) {\n                this[STATE] = 'body';\n              } else {\n                this[STATE] = 'header';\n                entry.end();\n              }\n\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry);\n                this[NEXTENTRY]();\n              } else {\n                this[QUEUE].push(entry);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  [CLOSESTREAM]() {\n    nextTick(() => this.emit('close'));\n  }\n\n  [PROCESSENTRY](entry) {\n    let go = true;\n\n    if (!entry) {\n      this[READENTRY] = null;\n      go = false;\n    } else if (Array.isArray(entry)) {\n      this.emit.apply(this, entry);\n    } else {\n      this[READENTRY] = entry;\n      this.emit('entry', entry);\n\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]());\n        go = false;\n      }\n    }\n\n    return go;\n  }\n\n  [NEXTENTRY]() {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()));\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY];\n      const drainNow = !re || re.flowing || re.size === re.remain;\n\n      if (drainNow) {\n        if (!this[WRITING]) {\n          this.emit('drain');\n        }\n      } else {\n        re.once('drain', _ => this.emit('drain'));\n      }\n    }\n  }\n\n  [CONSUMEBODY](chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY];\n    const br = entry.blockRemain;\n    const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);\n    entry.write(c);\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'header';\n      this[WRITEENTRY] = null;\n      entry.end();\n    }\n\n    return c.length;\n  }\n\n  [CONSUMEMETA](chunk, position) {\n    const entry = this[WRITEENTRY];\n    const ret = this[CONSUMEBODY](chunk, position); // if we finished, then the entry is reset\n\n    if (!this[WRITEENTRY]) {\n      this[EMITMETA](entry);\n    }\n\n    return ret;\n  }\n\n  [EMIT](ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY]) {\n      this.emit(ev, data, extra);\n    } else {\n      this[QUEUE].push([ev, data, extra]);\n    }\n  }\n\n  [EMITMETA](entry) {\n    this[EMIT]('meta', this[META]);\n\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false);\n        break;\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true);\n        break;\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].path = this[META].replace(/\\0.*/, '');\n        break;\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].linkpath = this[META].replace(/\\0.*/, '');\n        break;\n\n      /* istanbul ignore next */\n\n      default:\n        throw new Error('unknown meta: ' + entry.type);\n    }\n  }\n\n  abort(error) {\n    this[ABORTED] = true;\n    this.emit('abort', error); // always throws, even in non-strict mode\n\n    this.warn('TAR_ABORT', error, {\n      recoverable: false\n    });\n  }\n\n  write(chunk) {\n    if (this[ABORTED]) {\n      return;\n    } // first write, might be gzipped\n\n\n    if (this[UNZIP] === null && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk]);\n        this[BUFFER] = null;\n      }\n\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk;\n        return true;\n      }\n\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i]) {\n          this[UNZIP] = false;\n        }\n      }\n\n      if (this[UNZIP] === null) {\n        const ended = this[ENDED];\n        this[ENDED] = false;\n        this[UNZIP] = new zlib.Unzip();\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk));\n        this[UNZIP].on('error', er => this.abort(er));\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true;\n          this[CONSUMECHUNK]();\n        });\n        this[WRITING] = true;\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk);\n        this[WRITING] = false;\n        return ret;\n      }\n    }\n\n    this[WRITING] = true;\n\n    if (this[UNZIP]) {\n      this[UNZIP].write(chunk);\n    } else {\n      this[CONSUMECHUNK](chunk);\n    }\n\n    this[WRITING] = false; // return false if there's a queue, or if the current entry isn't flowing\n\n    const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true; // if we have no queue, then that means a clogged READENTRY\n\n    if (!ret && !this[QUEUE].length) {\n      this[READENTRY].once('drain', _ => this.emit('drain'));\n    }\n\n    return ret;\n  }\n\n  [BUFFERCONCAT](c) {\n    if (c && !this[ABORTED]) {\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;\n    }\n  }\n\n  [MAYBEEND]() {\n    if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {\n      this[EMITTEDEND] = true;\n      const entry = this[WRITEENTRY];\n\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0;\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, {\n          entry\n        });\n\n        if (this[BUFFER]) {\n          entry.write(this[BUFFER]);\n        }\n\n        entry.end();\n      }\n\n      this[EMIT](DONE);\n    }\n  }\n\n  [CONSUMECHUNK](chunk) {\n    if (this[CONSUMING]) {\n      this[BUFFERCONCAT](chunk);\n    } else if (!chunk && !this[BUFFER]) {\n      this[MAYBEEND]();\n    } else {\n      this[CONSUMING] = true;\n\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk);\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      } else {\n        this[CONSUMECHUNKSUB](chunk);\n      }\n\n      while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      }\n\n      this[CONSUMING] = false;\n    }\n\n    if (!this[BUFFER] || this[ENDED]) {\n      this[MAYBEEND]();\n    }\n  }\n\n  [CONSUMECHUNKSUB](chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0;\n    const length = chunk.length;\n\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position);\n          position += 512;\n          break;\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position);\n          break;\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position);\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error('invalid state: ' + this[STATE]);\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER]) {\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);\n      } else {\n        this[BUFFER] = chunk.slice(position);\n      }\n    }\n  }\n\n  end(chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP]) {\n        this[UNZIP].end(chunk);\n      } else {\n        this[ENDED] = true;\n        this.write(chunk);\n      }\n    }\n  }\n\n});","map":{"version":3,"sources":["/home/dom/Videos/FlyM/node_modules/tar/lib/parse.js"],"names":["warner","require","Header","EE","Yallist","maxMetaEntrySize","Entry","Pax","zlib","nextTick","gzipHeader","Buffer","from","STATE","Symbol","WRITEENTRY","READENTRY","NEXTENTRY","PROCESSENTRY","EX","GEX","META","EMITMETA","BUFFER","QUEUE","ENDED","EMITTEDEND","EMIT","UNZIP","CONSUMECHUNK","CONSUMECHUNKSUB","CONSUMEBODY","CONSUMEMETA","CONSUMEHEADER","CONSUMING","BUFFERCONCAT","MAYBEEND","WRITING","ABORTED","DONE","SAW_VALID_ENTRY","SAW_NULL_BLOCK","SAW_EOF","CLOSESTREAM","noop","_","module","exports","Parser","constructor","opt","file","on","warn","ondone","emit","strict","filter","writable","readable","onwarn","onentry","chunk","position","header","er","nullBlock","cksumValid","path","type","test","linkpath","entry","remain","onend","invalid","meta","size","ignore","resume","c","end","push","go","Array","isArray","apply","emittedEnd","shift","length","re","drainNow","flowing","once","br","blockRemain","slice","write","ret","ev","data","extra","parse","Object","create","replace","Error","abort","error","recoverable","concat","i","ended","Unzip","have"],"mappings":"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","sourcesContent":["'use strict'\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js')\nconst Header = require('./header.js')\nconst EE = require('events')\nconst Yallist = require('yallist')\nconst maxMetaEntrySize = 1024 * 1024\nconst Entry = require('./read-entry.js')\nconst Pax = require('./pax.js')\nconst zlib = require('minizlib')\nconst { nextTick } = require('process')\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b])\nconst STATE = Symbol('state')\nconst WRITEENTRY = Symbol('writeEntry')\nconst READENTRY = Symbol('readEntry')\nconst NEXTENTRY = Symbol('nextEntry')\nconst PROCESSENTRY = Symbol('processEntry')\nconst EX = Symbol('extendedHeader')\nconst GEX = Symbol('globalExtendedHeader')\nconst META = Symbol('meta')\nconst EMITMETA = Symbol('emitMeta')\nconst BUFFER = Symbol('buffer')\nconst QUEUE = Symbol('queue')\nconst ENDED = Symbol('ended')\nconst EMITTEDEND = Symbol('emittedEnd')\nconst EMIT = Symbol('emit')\nconst UNZIP = Symbol('unzip')\nconst CONSUMECHUNK = Symbol('consumeChunk')\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub')\nconst CONSUMEBODY = Symbol('consumeBody')\nconst CONSUMEMETA = Symbol('consumeMeta')\nconst CONSUMEHEADER = Symbol('consumeHeader')\nconst CONSUMING = Symbol('consuming')\nconst BUFFERCONCAT = Symbol('bufferConcat')\nconst MAYBEEND = Symbol('maybeEnd')\nconst WRITING = Symbol('writing')\nconst ABORTED = Symbol('aborted')\nconst DONE = Symbol('onDone')\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry')\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock')\nconst SAW_EOF = Symbol('sawEOF')\nconst CLOSESTREAM = Symbol('closeStream')\n\nconst noop = _ => true\n\nmodule.exports = warner(class Parser extends EE {\n  constructor (opt) {\n    opt = opt || {}\n    super(opt)\n\n    this.file = opt.file || ''\n\n    // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n    this[SAW_VALID_ENTRY] = null\n\n    // these BADARCHIVE errors can't be detected early. listen on DONE.\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format')\n      }\n    })\n\n    if (opt.ondone) {\n      this.on(DONE, opt.ondone)\n    } else {\n      this.on(DONE, _ => {\n        this.emit('prefinish')\n        this.emit('finish')\n        this.emit('end')\n      })\n    }\n\n    this.strict = !!opt.strict\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop\n\n    // have to set this so that streams are ok piping into it\n    this.writable = true\n    this.readable = false\n\n    this[QUEUE] = new Yallist()\n    this[BUFFER] = null\n    this[READENTRY] = null\n    this[WRITEENTRY] = null\n    this[STATE] = 'begin'\n    this[META] = ''\n    this[EX] = null\n    this[GEX] = null\n    this[ENDED] = false\n    this[UNZIP] = null\n    this[ABORTED] = false\n    this[SAW_NULL_BLOCK] = false\n    this[SAW_EOF] = false\n\n    this.on('end', () => this[CLOSESTREAM]())\n\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn)\n    }\n    if (typeof opt.onentry === 'function') {\n      this.on('entry', opt.onentry)\n    }\n  }\n\n  [CONSUMEHEADER] (chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null) {\n      this[SAW_VALID_ENTRY] = false\n    }\n    let header\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX])\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er)\n    }\n\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true\n        // ending an archive with no entries.  pointless, but legal.\n        if (this[STATE] === 'begin') {\n          this[STATE] = 'header'\n        }\n        this[EMIT]('eof')\n      } else {\n        this[SAW_NULL_BLOCK] = true\n        this[EMIT]('nullBlock')\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false\n      if (!header.cksumValid) {\n        this.warn('TAR_ENTRY_INVALID', 'checksum failure', { header })\n      } else if (!header.path) {\n        this.warn('TAR_ENTRY_INVALID', 'path is required', { header })\n      } else {\n        const type = header.type\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath required', { header })\n        } else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', { header })\n        } else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX])\n\n          // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid) {\n                  this[SAW_VALID_ENTRY] = true\n                }\n              }\n              entry.on('end', onend)\n            } else {\n              this[SAW_VALID_ENTRY] = true\n            }\n          }\n\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = 'ignore'\n              entry.resume()\n            } else if (entry.size > 0) {\n              this[META] = ''\n              entry.on('data', c => this[META] += c)\n              this[STATE] = 'meta'\n            }\n          } else {\n            this[EX] = null\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry)\n\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = entry.remain ? 'ignore' : 'header'\n              entry.resume()\n            } else {\n              if (entry.remain) {\n                this[STATE] = 'body'\n              } else {\n                this[STATE] = 'header'\n                entry.end()\n              }\n\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry)\n                this[NEXTENTRY]()\n              } else {\n                this[QUEUE].push(entry)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  [CLOSESTREAM] () {\n    nextTick(() => this.emit('close'))\n  }\n\n  [PROCESSENTRY] (entry) {\n    let go = true\n\n    if (!entry) {\n      this[READENTRY] = null\n      go = false\n    } else if (Array.isArray(entry)) {\n      this.emit.apply(this, entry)\n    } else {\n      this[READENTRY] = entry\n      this.emit('entry', entry)\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]())\n        go = false\n      }\n    }\n\n    return go\n  }\n\n  [NEXTENTRY] () {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()))\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY]\n      const drainNow = !re || re.flowing || re.size === re.remain\n      if (drainNow) {\n        if (!this[WRITING]) {\n          this.emit('drain')\n        }\n      } else {\n        re.once('drain', _ => this.emit('drain'))\n      }\n    }\n  }\n\n  [CONSUMEBODY] (chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY]\n    const br = entry.blockRemain\n    const c = (br >= chunk.length && position === 0) ? chunk\n      : chunk.slice(position, position + br)\n\n    entry.write(c)\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'header'\n      this[WRITEENTRY] = null\n      entry.end()\n    }\n\n    return c.length\n  }\n\n  [CONSUMEMETA] (chunk, position) {\n    const entry = this[WRITEENTRY]\n    const ret = this[CONSUMEBODY](chunk, position)\n\n    // if we finished, then the entry is reset\n    if (!this[WRITEENTRY]) {\n      this[EMITMETA](entry)\n    }\n\n    return ret\n  }\n\n  [EMIT] (ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY]) {\n      this.emit(ev, data, extra)\n    } else {\n      this[QUEUE].push([ev, data, extra])\n    }\n  }\n\n  [EMITMETA] (entry) {\n    this[EMIT]('meta', this[META])\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false)\n        break\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true)\n        break\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].path = this[META].replace(/\\0.*/, '')\n        break\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].linkpath = this[META].replace(/\\0.*/, '')\n        break\n\n      /* istanbul ignore next */\n      default: throw new Error('unknown meta: ' + entry.type)\n    }\n  }\n\n  abort (error) {\n    this[ABORTED] = true\n    this.emit('abort', error)\n    // always throws, even in non-strict mode\n    this.warn('TAR_ABORT', error, { recoverable: false })\n  }\n\n  write (chunk) {\n    if (this[ABORTED]) {\n      return\n    }\n\n    // first write, might be gzipped\n    if (this[UNZIP] === null && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk])\n        this[BUFFER] = null\n      }\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk\n        return true\n      }\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i]) {\n          this[UNZIP] = false\n        }\n      }\n      if (this[UNZIP] === null) {\n        const ended = this[ENDED]\n        this[ENDED] = false\n        this[UNZIP] = new zlib.Unzip()\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk))\n        this[UNZIP].on('error', er => this.abort(er))\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true\n          this[CONSUMECHUNK]()\n        })\n        this[WRITING] = true\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk)\n        this[WRITING] = false\n        return ret\n      }\n    }\n\n    this[WRITING] = true\n    if (this[UNZIP]) {\n      this[UNZIP].write(chunk)\n    } else {\n      this[CONSUMECHUNK](chunk)\n    }\n    this[WRITING] = false\n\n    // return false if there's a queue, or if the current entry isn't flowing\n    const ret =\n      this[QUEUE].length ? false :\n      this[READENTRY] ? this[READENTRY].flowing :\n      true\n\n    // if we have no queue, then that means a clogged READENTRY\n    if (!ret && !this[QUEUE].length) {\n      this[READENTRY].once('drain', _ => this.emit('drain'))\n    }\n\n    return ret\n  }\n\n  [BUFFERCONCAT] (c) {\n    if (c && !this[ABORTED]) {\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c\n    }\n  }\n\n  [MAYBEEND] () {\n    if (this[ENDED] &&\n        !this[EMITTEDEND] &&\n        !this[ABORTED] &&\n        !this[CONSUMING]) {\n      this[EMITTEDEND] = true\n      const entry = this[WRITEENTRY]\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${\n          entry.blockRemain} more bytes, only ${have} available)`, { entry })\n        if (this[BUFFER]) {\n          entry.write(this[BUFFER])\n        }\n        entry.end()\n      }\n      this[EMIT](DONE)\n    }\n  }\n\n  [CONSUMECHUNK] (chunk) {\n    if (this[CONSUMING]) {\n      this[BUFFERCONCAT](chunk)\n    } else if (!chunk && !this[BUFFER]) {\n      this[MAYBEEND]()\n    } else {\n      this[CONSUMING] = true\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk)\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      } else {\n        this[CONSUMECHUNKSUB](chunk)\n      }\n\n      while (this[BUFFER] &&\n          this[BUFFER].length >= 512 &&\n          !this[ABORTED] &&\n          !this[SAW_EOF]) {\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      }\n      this[CONSUMING] = false\n    }\n\n    if (!this[BUFFER] || this[ENDED]) {\n      this[MAYBEEND]()\n    }\n  }\n\n  [CONSUMECHUNKSUB] (chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0\n    const length = chunk.length\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position)\n          position += 512\n          break\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position)\n          break\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position)\n          break\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('invalid state: ' + this[STATE])\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER]) {\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]])\n      } else {\n        this[BUFFER] = chunk.slice(position)\n      }\n    }\n  }\n\n  end (chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP]) {\n        this[UNZIP].end(chunk)\n      } else {\n        this[ENDED] = true\n        this.write(chunk)\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}